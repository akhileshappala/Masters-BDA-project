"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.default = void 0;
var _classnames = _interopRequireDefault(require("classnames"));
var _react = _interopRequireWildcard(require("react"));
var _all = _interopRequireDefault(require("prop-types-extra/lib/all"));
var _Feedback = _interopRequireDefault(require("./Feedback"));
var _FormFileInput = _interopRequireDefault(require("./FormFileInput"));
var _FormFileLabel = _interopRequireDefault(require("./FormFileLabel"));
var _FormContext = _interopRequireDefault(require("./FormContext"));
var _ThemeProvider = require("./ThemeProvider");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const FormFile = /*#__PURE__*/_react.default.forwardRef(({
  id,
  bsPrefix,
  bsCustomPrefix,
  disabled = false,
  isValid = false,
  isInvalid = false,
  feedbackTooltip = false,
  feedback,
  className,
  style,
  label,
  children,
  custom,
  lang,
  'data-browse': dataBrowse,
  // Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
  as: Component = 'div',
  inputAs = 'input',
  ...props
}, ref) => {
  const [prefix, defaultPrefix] = custom ? [bsCustomPrefix, 'custom'] : [bsPrefix, 'form-file'];
  bsPrefix = (0, _ThemeProvider.useBootstrapPrefix)(prefix, defaultPrefix);
  const type = 'file';
  const {
    controlId
  } = (0, _react.useContext)(_FormContext.default);
  const innerFormContext = (0, _react.useMemo)(() => ({
    controlId: id || controlId,
    custom
  }), [controlId, custom, id]);
  const hasLabel = label != null && label !== false && !children;
  const input = /*#__PURE__*/(0, _jsxRuntime.jsx)(_FormFileInput.default, {
    ...props,
    ref: ref,
    isValid: isValid,
    isInvalid: isInvalid,
    disabled: disabled,
    as: inputAs,
    lang: lang
  });
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_FormContext.default.Provider, {
    value: innerFormContext,
    children: /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {
      style: style,
      className: (0, _classnames.default)(className, bsPrefix, custom && `custom-${type}`),
      children: children || /*#__PURE__*/(0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
        children: [custom ? /*#__PURE__*/(0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
          children: [input, hasLabel && /*#__PURE__*/(0, _jsxRuntime.jsx)(_FormFileLabel.default, {
            "data-browse": dataBrowse,
            children: label
          })]
        }) : /*#__PURE__*/(0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
          children: [hasLabel && /*#__PURE__*/(0, _jsxRuntime.jsx)(_FormFileLabel.default, {
            children: label
          }), input]
        }), (isValid || isInvalid) && /*#__PURE__*/(0, _jsxRuntime.jsx)(_Feedback.default, {
          type: isValid ? 'valid' : 'invalid',
          tooltip: feedbackTooltip,
          children: feedback
        })]
      })
    })
  });
});
FormFile.displayName = 'FormFile';
FormFile.Input = _FormFileInput.default;
FormFile.Label = _FormFileLabel.default;
var _default = FormFile;
exports.default = _default;
module.exports = exports.default;