"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.default = void 0;
var React = _interopRequireWildcard(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var PropTypes = _interopRequireWildcard(require("prop-types"));
var _uncontrollable = require("uncontrollable");
var _useEventCallback = _interopRequireDefault(require("@restart/hooks/useEventCallback"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/*!
  Modus React Bootstrap 
  A React-based component library developed as a common, open source platform for all of Trimbleâ€™s web applications built on React.
  Extends React-Bootstrap v1.6.5
  Copyright (c) 2022 Trimble Inc.
 */

// const chipDiv = divWithClassName('chip');
// chipDiv.displayName = 'chipDiv';

// const ChipThumbnail = divWithClassName('chip-thumbnail');
// ChipThumbnail.displayName = 'chipThumbnailDiv';

// const ChipText = divWithClassName('chip-text');
// ChipText.displayName = 'chipTextDiv';

// const ChipDismiss = divWithClassName('chip-delete-right');

// type Chip = React.ForwardRefExoticComponent<ChipProps>;
// & {
//   Thumbnail: typeof ChipThumbnail;
//   Text: typeof ChipText;
//   Dismiss: typeof ChipDismiss;
// };

const propTypes = {
  /**
   * Chip visual variant
   *
   * @type {'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light'}
   */
  variant: PropTypes.string,
  /**
   * Type that says what type of Chip
   *
   * * @type {'input' | 'filter' }
   */
  type: PropTypes.string,
  /**
   * Label text inside Chip
   *
   */
  label: PropTypes.string,
  /**
   * Chip Icon Element
   *
   */
  icon: PropTypes.element,
  /**
   * Chip Avatar Element
   *
   */
  avatar: PropTypes.element,
  /**
   * Controls the visual state of the Chip.
   *
   * @controllable onClose
   */
  show: PropTypes.bool,
  /**
   * states whether to display close button.
   *
   * @controllable onClose
   */
  dismissible: PropTypes.bool,
  /**
   * Controls the size Chip and its children.
   *
   * @controllable onClose
   */
  size: PropTypes.string,
  /**
   * Callback fired when alert is closed.
   *
   * @controllable show
   */
  onClose: PropTypes.func,
  /**
   * Custom icon for closing the Chip
   *
   */
  closeIcon: PropTypes.element
};
const defaultProps = {
  show: true
};
const prefix = 'chip';
const Chip = /*#__PURE__*/(0, React.forwardRef)((uncontrolledProps, ref) => {
  const {
    show,
    className,
    children,
    variant,
    label,
    icon,
    avatar,
    type,
    size,
    dismissible,
    closeIcon,
    onClose,
    ...props
  } = (0, _uncontrollable.useUncontrolled)(uncontrolledProps, {
    // show: 'onClose',
  });
  const handleClose = (0, _useEventCallback.default)(e => {
    if (onClose) {
      onClose(e);
    }
  });
  const chip = /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
    ...props,
    ref: ref,
    className: (0, _classnames.default)(prefix, size && `${prefix}-${size}`, variant && `${prefix}-${variant}`, type && `${prefix}-${type}`, className),
    children: [avatar && /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      className: "chip-thumbnail",
      children: avatar
    }), icon && /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      className: "chip-icon-left",
      children: icon
    }), label && /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      className: "chip-text",
      children: label
    }), children, (onClose || dismissible) &&
    /*#__PURE__*/
    // eslint-disable-next-line prettier/prettier
    // eslint-disable-next-line jsx-a11y/no-static-element-interactions
    (0, _jsxRuntime.jsx)("div", {
      className: "chip-delete-right",
      "aria-label": "chip",
      onClick: handleClose,
      children: closeIcon || /*#__PURE__*/(0, _jsxRuntime.jsx)("i", {
        className: (0, _classnames.default)(size && 'modus-icons', 'material-icons'),
        children: "cancel"
      })
    })]
  });
  return show ? chip : null;
});
// as unknown as Chip;

Chip.displayName = 'Chip';
Chip.defaultProps = defaultProps;
Chip.propTypes = propTypes;
// Chip.Thumbnail = ChipThumbnail;
// Chip.Text = ChipText;
// Chip.Dismiss = ChipDismiss;
var _default = Chip;
exports.default = _default;
module.exports = exports.default;