{"version":3,"sources":["components/Minigraphs.js"],"names":["margin","Minigraphs","timeseries","timelineDate","date","refs","useRef","endDate","getIndiaDateYesterdayISO","useMeasure","wrapperRef","width","Math","min","dates","useMemo","pastDates","Object","keys","filter","lastDate","length","cutOffDateLower","formatISO","subDays","parseIndiaDate","MINIGRAPH_LOOKBACK_DAYS","representation","getMinigraphStatistic","useCallback","statistic","getStatistic","useEffect","T","chartRight","chartBottom","xScale","scaleTime","clamp","domain","range","current","forEach","ref","index","pathLength","svg","select","LEVEL_STATISTICS","color","STATISTIC_CONFIGS","dailyMaxAbs","max","abs","yScale","scaleLinear","linePath","line","curve","curveMonotoneX","x","y","selectAll","data","join","enter","append","attr","this","getTotalLength","call","transition","delay","duration","update","attrTween","previous","interpolatePath","selection","style","className","map","classnames","el","preserveAspectRatio","height","isEqual","prevProps","currProps","forceRender","equal","stateCode","memo"],"mappings":"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","file":"static/js/22.eea0aca6.chunk.js","sourcesContent":["import {\n  MINIGRAPH_LOOKBACK_DAYS,\n  LEVEL_STATISTICS,\n  STATISTIC_CONFIGS,\n} from '../constants';\nimport {\n  getStatistic,\n  getIndiaDateYesterdayISO,\n  parseIndiaDate,\n} from '../utils/commonFunctions';\n\nimport classnames from 'classnames';\nimport {max} from 'd3-array';\nimport {interpolatePath} from 'd3-interpolate-path';\nimport {scaleTime, scaleLinear} from 'd3-scale';\nimport {select} from 'd3-selection';\nimport {line, curveMonotoneX} from 'd3-shape';\nimport 'd3-transition';\nimport {formatISO, subDays} from 'date-fns';\nimport equal from 'fast-deep-equal';\nimport {memo, useCallback, useEffect, useRef, useMemo} from 'react';\nimport {useMeasure} from 'react-use';\n\n// Dimensions\nconst margin = {top: 10, right: 10, bottom: 2, left: 10};\nconst height = 75;\nconst maxWidth = 120;\n\nfunction Minigraphs({timeseries, date: timelineDate}) {\n  const refs = useRef([]);\n  const endDate = timelineDate || getIndiaDateYesterdayISO();\n\n  let [wrapperRef, {width}] = useMeasure();\n  width = Math.min(width, maxWidth);\n\n  const dates = useMemo(() => {\n    const pastDates = Object.keys(timeseries || {}).filter(\n      (date) => date <= endDate\n    );\n    const lastDate = pastDates[pastDates.length - 1];\n\n    const cutOffDateLower = formatISO(\n      subDays(parseIndiaDate(lastDate), MINIGRAPH_LOOKBACK_DAYS),\n      {representation: 'date'}\n    );\n    return pastDates.filter((date) => date >= cutOffDateLower);\n  }, [endDate, timeseries]);\n\n  const getMinigraphStatistic = useCallback(\n    (date, statistic) => {\n      return getStatistic(timeseries?.[date], 'delta', statistic);\n    },\n    [timeseries]\n  );\n\n  useEffect(() => {\n    if (!width) return;\n\n    const T = dates.length;\n\n    const chartRight = width - margin.right;\n    const chartBottom = height - margin.bottom;\n\n    const xScale = scaleTime()\n      .clamp(true)\n      .domain([\n        parseIndiaDate(dates[0] || endDate),\n        parseIndiaDate(dates[T - 1]) || endDate,\n      ])\n      .range([margin.left, chartRight]);\n\n    refs.current.forEach((ref, index) => {\n      const svg = select(ref);\n      const statistic = LEVEL_STATISTICS[index];\n      const color = STATISTIC_CONFIGS[statistic].color;\n\n      const dailyMaxAbs = max(dates, (date) =>\n        Math.abs(getMinigraphStatistic(date, statistic))\n      );\n\n      const yScale = scaleLinear()\n        .clamp(true)\n        .domain([-dailyMaxAbs, dailyMaxAbs])\n        .range([chartBottom, margin.top]);\n\n      const linePath = line()\n        .curve(curveMonotoneX)\n        .x((date) => xScale(parseIndiaDate(date)))\n        .y((date) => yScale(getMinigraphStatistic(date, statistic)));\n\n      let pathLength;\n      svg\n        .selectAll('path')\n        .data(T ? [dates] : [])\n        .join(\n          (enter) =>\n            enter\n              .append('path')\n              .attr('fill', 'none')\n              .attr('stroke', color + '99')\n              .attr('stroke-width', 2.5)\n              .attr('d', linePath)\n              .attr('stroke-dasharray', function () {\n                return (pathLength = this.getTotalLength());\n              })\n              .call((enter) =>\n                enter\n                  .attr('stroke-dashoffset', pathLength)\n                  .transition()\n                  .delay(100)\n                  .duration(2500)\n                  .attr('stroke-dashoffset', 0)\n              ),\n          (update) =>\n            update\n              .attr('stroke-dasharray', null)\n              .transition()\n              .duration(500)\n              .attrTween('d', function (date) {\n                const previous = select(this).attr('d');\n                const current = linePath(date);\n                return interpolatePath(previous, current);\n              })\n              .selection()\n        );\n\n      svg\n        .selectAll('circle')\n        .data(T ? [dates[T - 1]] : [])\n        .join(\n          (enter) =>\n            enter\n              .append('circle')\n              .attr('fill', color)\n              .attr('r', 2.5)\n              .attr('cx', (date) => xScale(parseIndiaDate(date)))\n              .attr('cy', (date) =>\n                yScale(getMinigraphStatistic(date, statistic))\n              )\n              .style('opacity', 0)\n              .call((enter) =>\n                enter\n                  .transition()\n                  .delay(2100)\n                  .duration(500)\n                  .style('opacity', 1)\n                  .attr('cx', (date) => xScale(parseIndiaDate(date)))\n                  .attr('cy', (date) =>\n                    yScale(getMinigraphStatistic(date, statistic))\n                  )\n              ),\n          (update) =>\n            update\n              .transition()\n              .duration(500)\n              .attr('cx', (date) => xScale(parseIndiaDate(date)))\n              .attr('cy', (date) =>\n                yScale(getMinigraphStatistic(date, statistic))\n              )\n              .style('opacity', 1)\n              .selection()\n        );\n    });\n  }, [endDate, dates, width, getMinigraphStatistic]);\n\n  return (\n    <div className=\"Minigraph\">\n      {LEVEL_STATISTICS.map((statistic, index) => (\n        <div\n          key={statistic}\n          className={classnames('svg-parent')}\n          ref={index === 0 ? wrapperRef : null}\n          style={{width: `calc(${100 / LEVEL_STATISTICS.length}%)`}}\n        >\n          <svg\n            ref={(el) => {\n              refs.current[index] = el;\n            }}\n            preserveAspectRatio=\"xMidYMid meet\"\n            width={width}\n            height={height}\n          />\n        </div>\n      ))}\n    </div>\n  );\n}\n\nconst isEqual = (prevProps, currProps) => {\n  if (currProps.forceRender) {\n    return false;\n  } else if (!currProps.timeseries && prevProps.timeseries) {\n    return true;\n  } else if (currProps.timeseries && !prevProps.timeseries) {\n    return false;\n  } else if (!equal(currProps.stateCode, prevProps.stateCode)) {\n    return false;\n  } else if (!equal(currProps.date, prevProps.date)) {\n    return false;\n  }\n  return true;\n};\n\nexport default memo(Minigraphs, isEqual);\n"],"sourceRoot":""}