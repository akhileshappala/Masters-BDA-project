{"version":3,"sources":["components/ActionsPanel.js","components/Actions.js","components/Tooltip.js"],"names":["ActionsPanel","lastUpdatedDate","newUpdate","isTimelineMode","setIsTimelineMode","showUpdates","setNewUpdate","date","setDate","dates","setShowUpdates","useTranslation","t","useMemo","styles","map","element","index","push","animationDelay","useCallback","className","Updates","lazy","retry","Actions","useState","useLocalStorage","lastViewedLog","setLastViewedLog","updates","useSWR","API_DOMAIN","fetcher","refreshInterval","API_REFRESH_INTERVAL","data","useEffect","undefined","lastTimestamp","slice","reverse","timestamp","maxLastUpdatedDate","formatDateObjIndia","max","filter","parseIndiaDate","fallback","isEqual","prevProps","currProps","equal","memo","Tooltip","children","message","hold","childProps","handleClick","e","stopPropagation","content","dangerouslySetInnerHTML","__html","trim","split","text","join","arrow","animation","touch","onClick"],"mappings":"0KAiDeA,EAvCM,SAAC,GAWhB,EAVJC,gBAUI,EATJC,UASI,EARJC,eAQK,IAPLC,EAOI,EAPJA,kBACAC,EAMI,EANJA,YAIAC,GAEI,EALJC,KAKI,EAJJC,QAII,EAHJC,MAGI,EAFJH,cACAI,EACI,EADJA,eAEYC,cAALC,EAEOC,mBAAQ,WACpB,IAAMC,EAAS,GAQf,MANA,CAAC,EAAG,EAAG,GAAGC,KAAI,SAACC,EAASC,GAItB,OAHAH,EAAOI,KAAK,CACVC,eAAe,GAAD,OAAK,IAAc,IAARF,EAAX,QAET,QAEFH,IACN,IAEyBM,uBAAY,WACtChB,GAAkB,GACdC,GAAaK,GAAgBL,KAChC,CAACD,EAAmBM,EAAgBL,IAEfe,uBAAY,WAC7Bf,GAAaC,GAAa,GAC/BI,GAAgBL,KACf,CAACA,EAAaK,EAAgBJ,IAEjC,OAAO,qBAAKe,UAAU,kB,mDC9BlBC,EAAUC,gBAAK,kBAAMC,aAAM,kBAAM,2DAEjCC,EAAU,SAAC,GAA6C,IAA5ClB,EAA2C,EAA3CA,KAAMC,EAAqC,EAArCA,QAASC,EAA4B,EAA5BA,MAAOR,EAAqB,EAArBA,gBACtC,EAAsCyB,oBAAS,GAA/C,mBAAOrB,EAAP,KAAoBK,EAApB,KACA,EAAkCiB,YAAgB,aAAa,GAA/D,mBAAOzB,EAAP,KAAkBI,EAAlB,KACA,EAA0CqB,YAAgB,gBAAiB,GAA3E,mBAAOC,EAAP,KAAsBC,EAAtB,KACA,EAA4CH,oBAAS,GAArD,mBAAOvB,EAAP,KAAuBC,EAAvB,KAEa0B,EAAWC,YAAO,GAAD,OAAIC,IAAJ,uBAAqCC,IAAS,CAC1EC,gBAAiBC,MADZC,KAIPC,qBAAU,WACR,QAAgBC,IAAZR,EAAuB,CACzB,IAAMS,EAAyD,IAAzCT,EAAQU,QAAQC,UAAU,GAAGC,UAC/CH,IAAkBX,IACpBtB,GAAa,GACbuB,EAAiBU,OAGpB,CAACX,EAAeE,EAASD,EAAkBvB,IAE9C,IAAMqC,EAAqB9B,mBAAQ,WACjC,OAAO+B,YACLC,YACE,CAACjB,EAAe3B,GACb6C,QAAO,SAACvC,GAAD,OAAUA,KACjBQ,KAAI,SAACR,GAAD,OAAUwC,YAAexC,UAGnC,CAACqB,EAAe3B,IAEnB,OACE,qCACE,cAAC,EAAD,CAEIA,gBAAiB0C,EACjBzC,YACAC,iBACAC,oBACAC,cACAE,OACAC,UACAC,QACAH,eACAI,mBAIHL,GACC,cAAC,WAAD,CAAU2C,SAAU,wBAApB,SACE,cAAC1B,EAAD,CAAcQ,kBAOlBmB,EAAU,SAACC,EAAWC,GAC1B,QAAKC,IAAMD,EAAU5C,KAAM2C,EAAU3C,UAEzB6C,IAAMD,EAAUlD,gBAAiBiD,EAAUjD,oBAE3CmD,IAAMD,EAAU1C,MAAOyC,EAAUzC,SAMhC4C,yBAAK5B,EAASwB,I,oFC9CdK,IAjCf,YAAsE,IAApDC,EAAmD,EAAnDA,SAAUC,EAAyC,EAAzCA,QAAyC,IAAhCC,YAAgC,aAAlBC,kBAAkB,MAAL,GAAK,EAC7DC,EAAcvC,uBAAY,SAACwC,GAAD,OAAOA,EAAEC,oBAAmB,IAE5D,OACE,cAAC,IAAD,CACExC,UAAU,UACVyC,QACqB,kBAAZN,EACL,mBACEnC,UAAU,UACV0C,wBAAyB,CACvBC,OAAQR,EACLS,OACAC,MAAM,MACNnD,KAAI,SAACoD,GAAD,qBAAkBA,EAAlB,aACJC,KAAK,OAIZZ,EAGJa,OAAO,EACPC,UAAU,aACVC,OAAOd,GAAO,CAAC,OAAQ,KApBzB,SAsBE,6CAAKe,QAASb,GAAiBD,GAA/B,aACGH","file":"static/js/13.9659af16.chunk.js","sourcesContent":["import Tooltip from './Tooltip';\n\nimport {formatDate, retry} from '../utils/commonFunctions';\n\nimport {BellIcon, BellSlashIcon, HistoryIcon} from '@primer/octicons-react';\nimport {useMemo, useCallback, lazy, Suspense} from 'react';\nimport {useTranslation} from 'react-i18next';\n\nconst Timeline = lazy(() => retry(() => import('./Timeline')));\n\nconst ActionsPanel = ({\n  lastUpdatedDate,\n  newUpdate,\n  isTimelineMode,\n  setIsTimelineMode,\n  showUpdates,\n  date,\n  setDate,\n  dates,\n  setNewUpdate,\n  setShowUpdates,\n}) => {\n  const {t} = useTranslation();\n\n  const trail = useMemo(() => {\n    const styles = [];\n\n    [0, 0, 0].map((element, index) => {\n      styles.push({\n        animationDelay: `${500 + index * 250}ms`,\n      });\n      return null;\n    });\n    return styles;\n  }, []);\n\n  const handleTimelineClick = useCallback(() => {\n    setIsTimelineMode(true);\n    if (showUpdates) setShowUpdates(!showUpdates);\n  }, [setIsTimelineMode, setShowUpdates, showUpdates]);\n\n  const handleBellClick = useCallback(() => {\n    if (!showUpdates) setNewUpdate(false);\n    setShowUpdates(!showUpdates);\n  }, [showUpdates, setShowUpdates, setNewUpdate]);\n\n  return <div className=\"ActionsPanel\"></div>;\n};\n\nexport default ActionsPanel;\n","import ActionsPanel from './ActionsPanel';\n\nimport {API_DOMAIN, API_REFRESH_INTERVAL} from '../constants';\nimport {\n  fetcher,\n  formatDateObjIndia,\n  parseIndiaDate,\n  retry,\n} from '../utils/commonFunctions';\n\nimport {max} from 'date-fns';\nimport equal from 'fast-deep-equal';\nimport {memo, useEffect, useMemo, useState, lazy, Suspense} from 'react';\nimport {useLocalStorage} from 'react-use';\nimport useSWR from 'swr';\n\nconst Updates = lazy(() => retry(() => import('./Updates')));\n\nconst Actions = ({date, setDate, dates, lastUpdatedDate}) => {\n  const [showUpdates, setShowUpdates] = useState(false);\n  const [newUpdate, setNewUpdate] = useLocalStorage('newUpdate', false);\n  const [lastViewedLog, setLastViewedLog] = useLocalStorage('lastViewedLog', 0);\n  const [isTimelineMode, setIsTimelineMode] = useState(false);\n\n  const {data: updates} = useSWR(`${API_DOMAIN}/updatelog/log.json`, fetcher, {\n    refreshInterval: API_REFRESH_INTERVAL,\n  });\n\n  useEffect(() => {\n    if (updates !== undefined) {\n      const lastTimestamp = updates.slice().reverse()[0].timestamp * 1000;\n      if (lastTimestamp !== lastViewedLog) {\n        setNewUpdate(true);\n        setLastViewedLog(lastTimestamp);\n      }\n    }\n  }, [lastViewedLog, updates, setLastViewedLog, setNewUpdate]);\n\n  const maxLastUpdatedDate = useMemo(() => {\n    return formatDateObjIndia(\n      max(\n        [lastViewedLog, lastUpdatedDate]\n          .filter((date) => date)\n          .map((date) => parseIndiaDate(date))\n      )\n    );\n  }, [lastViewedLog, lastUpdatedDate]);\n\n  return (\n    <>\n      <ActionsPanel\n        {...{\n          lastUpdatedDate: maxLastUpdatedDate,\n          newUpdate,\n          isTimelineMode,\n          setIsTimelineMode,\n          showUpdates,\n          date,\n          setDate,\n          dates,\n          setNewUpdate,\n          setShowUpdates,\n        }}\n      />\n\n      {showUpdates && (\n        <Suspense fallback={<div />}>\n          <Updates {...{updates}} />\n        </Suspense>\n      )}\n    </>\n  );\n};\n\nconst isEqual = (prevProps, currProps) => {\n  if (!equal(currProps.date, prevProps.date)) {\n    return false;\n  } else if (!equal(currProps.lastUpdatedDate, prevProps.lastUpdatedDate)) {\n    return false;\n  } else if (!equal(currProps.dates, prevProps.dates)) {\n    return false;\n  }\n  return true;\n};\n\nexport default memo(Actions, isEqual);\n","import Tippy from '@tippyjs/react';\nimport {useCallback} from 'react';\n\nimport 'tippy.js/dist/tippy.css';\nimport 'tippy.js/animations/shift-away.css';\n\nfunction Tooltip({children, message, hold = false, childProps = {}}) {\n  const handleClick = useCallback((e) => e.stopPropagation(), []);\n\n  return (\n    <Tippy\n      className=\"Tooltip\"\n      content={\n        typeof message === 'string' ? (\n          <p\n            className=\"message\"\n            dangerouslySetInnerHTML={{\n              __html: message\n                .trim()\n                .split('\\n')\n                .map((text) => `<div>${text}</div>`)\n                .join(''),\n            }}\n          ></p>\n        ) : (\n          message\n        )\n      }\n      arrow={false}\n      animation=\"shift-away\"\n      touch={hold ? ['hold', 300] : true}\n    >\n      <div onClick={handleClick} {...childProps}>\n        {children}\n      </div>\n    </Tippy>\n  );\n}\n\nexport default Tooltip;\n"],"sourceRoot":""}