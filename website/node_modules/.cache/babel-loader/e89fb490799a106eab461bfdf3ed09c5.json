{"ast":null,"code":"var _jsxFileName = \"/Users/ssakhilesha/Documents/GitHub/Masters-BDA-project/website /covid19india-react-master/src/components/StatisticDropdown.js\",\n    _s = $RefreshSig$();\n\nimport { MAP_TYPES, TABLE_STATISTICS_EXPANDED, STATISTIC_CONFIGS } from '../constants';\nimport { capitalize } from '../utils/commonFunctions';\nimport { TriangleRightIcon } from '@primer/octicons-react';\nimport classnames from 'classnames';\nimport equal from 'fast-deep-equal';\nimport { memo, useEffect, useCallback, useMemo, useRef } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useMeasure } from 'react-use';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst StatisticDropdown = ({\n  currentStatistic,\n  isPerLakh,\n  delta7Mode,\n  mapStatistic,\n  setMapStatistic,\n  mapType,\n  hideDistrictTestData,\n  hideVaccinated,\n  zoneColor\n}) => {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const [wrapperRef, {\n    width\n  }] = useMeasure();\n  const selectRef = useRef();\n  const currentStatisticConfig = STATISTIC_CONFIGS[currentStatistic];\n  const statistics = useMemo(() => {\n    const filteredStatistics = TABLE_STATISTICS_EXPANDED.filter(statistic => {\n      var _STATISTIC_CONFIGS$st, _STATISTIC_CONFIGS$st2;\n\n      return (mapType === MAP_TYPES.COUNTRY || ((_STATISTIC_CONFIGS$st = STATISTIC_CONFIGS[statistic]) === null || _STATISTIC_CONFIGS$st === void 0 ? void 0 : _STATISTIC_CONFIGS$st.category) !== 'tested' || !hideDistrictTestData) && (((_STATISTIC_CONFIGS$st2 = STATISTIC_CONFIGS[statistic]) === null || _STATISTIC_CONFIGS$st2 === void 0 ? void 0 : _STATISTIC_CONFIGS$st2.category) !== 'vaccinated' || !hideVaccinated);\n    });\n    return filteredStatistics.includes(currentStatistic) ? filteredStatistics : [currentStatistic, ...filteredStatistics];\n  }, [currentStatistic, mapType, hideDistrictTestData, hideVaccinated]);\n  const handleChange = useCallback(event => {\n    setMapStatistic(event.target.value);\n  }, [setMapStatistic]);\n  useEffect(() => {\n    var _STATISTIC_CONFIGS$ma;\n\n    const tempSelect = document.createElement('select');\n    const tempOption = document.createElement('option');\n    tempOption.textContent = (_STATISTIC_CONFIGS$ma = STATISTIC_CONFIGS[mapStatistic]) === null || _STATISTIC_CONFIGS$ma === void 0 ? void 0 : _STATISTIC_CONFIGS$ma.displayName;\n    tempSelect.style.cssText += `\n      visibility: hidden;\n      position: fixed;\n      `;\n    tempSelect.appendChild(tempOption);\n    selectRef.current.after(tempSelect);\n    const tempSelectWidth = tempSelect.getBoundingClientRect().width;\n\n    if (tempSelectWidth > 0) {\n      selectRef.current.style.width = `${tempSelectWidth + 2}px`;\n    }\n\n    tempSelect.remove();\n  }, [width, mapStatistic]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"StatisticDropdown\",\n    ref: wrapperRef,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classnames('triangle-icon'),\n      children: /*#__PURE__*/_jsxDEV(TriangleRightIcon, {\n        size: 20\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      ref: selectRef,\n      value: currentStatistic,\n      className: classnames(currentStatistic, zoneColor),\n      style: zoneColor && {\n        color: zoneColor,\n        backgroundColor: zoneColor + '20',\n        outlineColor: zoneColor + '40'\n      } || {},\n      onChange: handleChange,\n      children: statistics.map(statistic => {\n        const statisticConfig = STATISTIC_CONFIGS[statistic];\n        return /*#__PURE__*/_jsxDEV(\"option\", {\n          value: statistic,\n          children: t(capitalize(statisticConfig === null || statisticConfig === void 0 ? void 0 : statisticConfig.displayName))\n        }, statistic, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: `${isPerLakh && !(currentStatisticConfig === null || currentStatisticConfig === void 0 ? void 0 : currentStatisticConfig.nonLinear) && mapStatistic !== 'population' ? ` ${t('per lakh')}` : ''}${delta7Mode && (currentStatisticConfig === null || currentStatisticConfig === void 0 ? void 0 : currentStatisticConfig.showDelta) || (currentStatisticConfig === null || currentStatisticConfig === void 0 ? void 0 : currentStatisticConfig.onlyDelta7) ? ` ${t('in last 7 days')}` : ''}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n};\n\n_s(StatisticDropdown, \"kkXh5JmLEBdnsC9d2gEOwCZE3/I=\", false, function () {\n  return [useTranslation, useMeasure];\n});\n\n_c = StatisticDropdown;\n\nconst isEqual = (prevProps, currProps) => {\n  if (!equal(prevProps.currentStatistic, currProps.currentStatistic)) {\n    return false;\n  } else if (!equal(prevProps.isPerLakh, currProps.isPerLakh)) {\n    return false;\n  } else if (!equal(prevProps.delta7Mode, currProps.delta7Mode)) {\n    return false;\n  } else if (!equal(prevProps.mapStatistic, currProps.mapStatistic)) {\n    return false;\n  } else if (!equal(prevProps.mapType, currProps.mapType)) {\n    return false;\n  } else if (!equal(prevProps.hideDistrictTestData, currProps.hideDistrictTestData)) {\n    return false;\n  } else if (!equal(prevProps.hideVaccinated, currProps.hideVaccinated)) {\n    return false;\n  } else if (!equal(prevProps.zoneColor, currProps.zoneColor)) {\n    return false;\n  }\n\n  return true;\n};\n\nexport default _c2 = /*#__PURE__*/memo(StatisticDropdown, isEqual);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"StatisticDropdown\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/ssakhilesha/Documents/GitHub/Masters-BDA-project/website /covid19india-react-master/src/components/StatisticDropdown.js"],"names":["MAP_TYPES","TABLE_STATISTICS_EXPANDED","STATISTIC_CONFIGS","capitalize","TriangleRightIcon","classnames","equal","memo","useEffect","useCallback","useMemo","useRef","useTranslation","useMeasure","StatisticDropdown","currentStatistic","isPerLakh","delta7Mode","mapStatistic","setMapStatistic","mapType","hideDistrictTestData","hideVaccinated","zoneColor","t","wrapperRef","width","selectRef","currentStatisticConfig","statistics","filteredStatistics","filter","statistic","COUNTRY","category","includes","handleChange","event","target","value","tempSelect","document","createElement","tempOption","textContent","displayName","style","cssText","appendChild","current","after","tempSelectWidth","getBoundingClientRect","remove","color","backgroundColor","outlineColor","map","statisticConfig","nonLinear","showDelta","onlyDelta7","isEqual","prevProps","currProps"],"mappings":"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","sourcesContent":["import {\n  MAP_TYPES,\n  TABLE_STATISTICS_EXPANDED,\n  STATISTIC_CONFIGS,\n} from '../constants';\nimport {capitalize} from '../utils/commonFunctions';\n\nimport {TriangleRightIcon} from '@primer/octicons-react';\nimport classnames from 'classnames';\nimport equal from 'fast-deep-equal';\nimport {memo, useEffect, useCallback, useMemo, useRef} from 'react';\nimport {useTranslation} from 'react-i18next';\nimport {useMeasure} from 'react-use';\n\nconst StatisticDropdown = ({\n  currentStatistic,\n  isPerLakh,\n  delta7Mode,\n  mapStatistic,\n  setMapStatistic,\n  mapType,\n  hideDistrictTestData,\n  hideVaccinated,\n  zoneColor,\n}) => {\n  const {t} = useTranslation();\n  const [wrapperRef, {width}] = useMeasure();\n  const selectRef = useRef();\n\n  const currentStatisticConfig = STATISTIC_CONFIGS[currentStatistic];\n\n  const statistics = useMemo(() => {\n    const filteredStatistics = TABLE_STATISTICS_EXPANDED.filter(\n      (statistic) =>\n        (mapType === MAP_TYPES.COUNTRY ||\n          STATISTIC_CONFIGS[statistic]?.category !== 'tested' ||\n          !hideDistrictTestData) &&\n        (STATISTIC_CONFIGS[statistic]?.category !== 'vaccinated' ||\n          !hideVaccinated)\n    );\n    return filteredStatistics.includes(currentStatistic)\n      ? filteredStatistics\n      : [currentStatistic, ...filteredStatistics];\n  }, [currentStatistic, mapType, hideDistrictTestData, hideVaccinated]);\n\n  const handleChange = useCallback(\n    (event) => {\n      setMapStatistic(event.target.value);\n    },\n    [setMapStatistic]\n  );\n\n  useEffect(() => {\n    const tempSelect = document.createElement('select');\n    const tempOption = document.createElement('option');\n\n    tempOption.textContent = STATISTIC_CONFIGS[mapStatistic]?.displayName;\n    tempSelect.style.cssText += `\n      visibility: hidden;\n      position: fixed;\n      `;\n\n    tempSelect.appendChild(tempOption);\n    selectRef.current.after(tempSelect);\n\n    const tempSelectWidth = tempSelect.getBoundingClientRect().width;\n    if (tempSelectWidth > 0) {\n      selectRef.current.style.width = `${tempSelectWidth + 2}px`;\n    }\n    tempSelect.remove();\n  }, [width, mapStatistic]);\n\n  return (\n    <div className=\"StatisticDropdown\" ref={wrapperRef}>\n      <div className={classnames('triangle-icon')}>\n        <TriangleRightIcon size={20} />\n      </div>\n      <select\n        ref={selectRef}\n        value={currentStatistic}\n        className={classnames(currentStatistic, zoneColor)}\n        style={\n          (zoneColor && {\n            color: zoneColor,\n            backgroundColor: zoneColor + '20',\n            outlineColor: zoneColor + '40',\n          }) ||\n          {}\n        }\n        onChange={handleChange}\n      >\n        {statistics.map((statistic) => {\n          const statisticConfig = STATISTIC_CONFIGS[statistic];\n          return (\n            <option key={statistic} value={statistic}>\n              {t(capitalize(statisticConfig?.displayName))}\n            </option>\n          );\n        })}\n      </select>\n      <span>{`${\n        isPerLakh &&\n        !currentStatisticConfig?.nonLinear &&\n        mapStatistic !== 'population'\n          ? ` ${t('per lakh')}`\n          : ''\n      }${\n        (delta7Mode && currentStatisticConfig?.showDelta) ||\n        currentStatisticConfig?.onlyDelta7\n          ? ` ${t('in last 7 days')}`\n          : ''\n      }`}</span>\n    </div>\n  );\n};\n\nconst isEqual = (prevProps, currProps) => {\n  if (!equal(prevProps.currentStatistic, currProps.currentStatistic)) {\n    return false;\n  } else if (!equal(prevProps.isPerLakh, currProps.isPerLakh)) {\n    return false;\n  } else if (!equal(prevProps.delta7Mode, currProps.delta7Mode)) {\n    return false;\n  } else if (!equal(prevProps.mapStatistic, currProps.mapStatistic)) {\n    return false;\n  } else if (!equal(prevProps.mapType, currProps.mapType)) {\n    return false;\n  } else if (\n    !equal(prevProps.hideDistrictTestData, currProps.hideDistrictTestData)\n  ) {\n    return false;\n  } else if (!equal(prevProps.hideVaccinated, currProps.hideVaccinated)) {\n    return false;\n  } else if (!equal(prevProps.zoneColor, currProps.zoneColor)) {\n    return false;\n  }\n  return true;\n};\n\nexport default memo(StatisticDropdown, isEqual);\n"]},"metadata":{},"sourceType":"module"}