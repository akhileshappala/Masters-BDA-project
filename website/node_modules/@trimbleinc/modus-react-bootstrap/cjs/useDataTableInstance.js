"use strict";

exports.__esModule = true;
exports.default = void 0;
var _react = require("react");
var _reactTable = require("react-table");
/*!
  Modus React Bootstrap 
  A React-based component library developed as a common, open source platform for all of Trimbleâ€™s web applications built on React.
  Extends React-Bootstrap v1.6.5
  Copyright (c) 2022 Trimble Inc.
 */

function useDataTableInstance(columns, data, options, hooks) {
  // Handle custom props such as - sortBy
  const normalizedColumns = (0, _react.useMemo)(() => columns.map(col => {
    const {
      sortBy,
      sortType,
      ...columnProps
    } = col;
    const disableSortBy = !(sortBy || sortType);
    const sortTypeProp = sortType ? {
      sortType
    } : {};
    return {
      disableSortBy,
      ...sortTypeProp,
      ...columnProps
    };
  }), [columns]);

  // Construct Table instance
  const tableInstance = (0, _reactTable.useTable)({
    columns: normalizedColumns,
    data,
    ...options
  }, ...hooks);
  const {
    getTableProps,
    getTableBodyProps,
    headerGroups,
    prepareRow,
    rows,
    allColumns,
    setFilter,
    setAllFilters,
    setGlobalFilter,
    toggleHideColumn,
    toggleHideAllColumns,
    visibleColumns,
    setColumnOrder,
    page,
    pageOptions,
    gotoPage,
    setPageSize,
    selectedFlatRows,
    state: {
      pageIndex,
      pageSize,
      filters,
      globalFilter
    }
  } = tableInstance;
  const isResizing = headerGroups.find(group => group.headers.find(h => h.isResizing));
  const filterColumns = (0, _react.useMemo)(() => allColumns.filter(it => it.canFilter && it.Filter).map(props => props), [allColumns]);
  const resetFilter = (0, _react.useCallback)(columnId => setFilter(columnId, undefined), [setFilter]);
  const resetAllFilters = (0, _react.useCallback)(() => setAllFilters([]), [setAllFilters]);

  // Use useAsyncDebounce for Global filter https://react-table.tanstack.com/docs/faq#how-can-i-debounce-rapid-table-state-changes
  const setGlobalFilterCustom = (0, _reactTable.useAsyncDebounce)(value => {
    setGlobalFilter(value || undefined);
  }, 50);

  // Helpers
  // To add invisible columns
  const getAllHeadersInAGroup = (0, _react.useCallback)((curr, headerGroupid) => allColumns.filter(col => col.id === 'selector' || !headerGroupid || (col.parent ? col.parent.id === headerGroupid : false)).map(col => {
    const newCol = curr.find(c => c.id === col.id);
    return newCol || col;
  }), [allColumns]);
  return {
    // tableinstance
    getTableProps,
    getTableBodyProps,
    headerGroups,
    prepareRow,
    rows,
    allColumns,
    filterColumns,
    resetFilter,
    resetAllFilters,
    setColumnOrder,
    visibleColumns,
    setGlobalFilter: setGlobalFilterCustom,
    toggleHideColumn,
    toggleHideAllColumns,
    page,
    pageOptions,
    gotoPage,
    setPageSize,
    selectedFlatRows,
    isResizing,
    state: {
      pageIndex,
      pageSize,
      filters,
      globalFilter
    },
    getAllHeadersInAGroup
  };
}
var _default = useDataTableInstance;
exports.default = _default;
module.exports = exports.default;