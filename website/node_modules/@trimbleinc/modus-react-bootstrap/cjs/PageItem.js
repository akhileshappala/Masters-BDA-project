"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.default = exports.Prev = exports.Next = exports.Last = exports.First = exports.Ellipsis = void 0;
var _classnames = _interopRequireDefault(require("classnames"));
var _react = _interopRequireDefault(require("react"));
var _SafeAnchor = _interopRequireDefault(require("./SafeAnchor"));
var _jsxRuntime = require("react/jsx-runtime");
/* eslint-disable react/no-multi-comp */

const defaultProps = {
  active: false,
  disabled: false,
  activeLabel: '(current)'
};
const PageItem = /*#__PURE__*/_react.default.forwardRef(({
  active,
  disabled,
  className,
  style,
  activeLabel,
  children,
  ...props
}, ref) => {
  const Component = active || disabled ? 'span' : _SafeAnchor.default;
  return /*#__PURE__*/(0, _jsxRuntime.jsx)("li", {
    ref: ref,
    style: style,
    className: (0, _classnames.default)(className, 'page-item', {
      active,
      disabled
    }),
    children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(Component, {
      className: "page-link",
      disabled: disabled,
      ...props,
      children: [children, active && activeLabel && /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
        className: "sr-only",
        children: activeLabel
      })]
    })
  });
});
PageItem.defaultProps = defaultProps;
PageItem.displayName = 'PageItem';
var _default = PageItem;
exports.default = _default;
function createButton(name, defaultValue, label = name) {
  function Button({
    children,
    ...props
  }) {
    return /*#__PURE__*/(0, _jsxRuntime.jsxs)(PageItem, {
      ...props,
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
        "aria-hidden": "true",
        children: children || defaultValue
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
        className: "sr-only",
        children: label
      })]
    });
  }
  Button.displayName = name;
  return Button;
}
const First = createButton('First', '«');
exports.First = First;
const Prev = createButton('Prev', '‹', 'Previous');
exports.Prev = Prev;
const Ellipsis = createButton('Ellipsis', '…', 'More');
exports.Ellipsis = Ellipsis;
const Next = createButton('Next', '›');
exports.Next = Next;
const Last = createButton('Last', '»');
exports.Last = Last;