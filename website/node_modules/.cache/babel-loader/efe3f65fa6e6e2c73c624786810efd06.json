{"ast":null,"code":"var _jsxFileName = \"/Users/ssakhilesha/Documents/GitHub/Masters-BDA-project/website/covid19/src/components/Cell.js\",\n    _s = $RefreshSig$();\n\nimport { SPRING_CONFIG_NUMBERS, STATISTIC_CONFIGS } from '../constants.js';\nimport { formatNumber } from '../utils/commonFunctions';\nimport classnames from 'classnames';\nimport equal from 'fast-deep-equal';\nimport { memo } from 'react';\nimport { animated, useSpring } from 'react-spring';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Cell = ({\n  statistic,\n  data,\n  getTableStatistic,\n  noDistrictData\n}) => {\n  _s();\n\n  const total = getTableStatistic(data, statistic, 'total');\n  const delta = getTableStatistic(data, statistic, 'delta');\n  const spring = useSpring({\n    total: total,\n    delta: delta,\n    config: SPRING_CONFIG_NUMBERS\n  });\n  const statisticConfig = STATISTIC_CONFIGS[statistic];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"cell statistic\",\n    children: [(statisticConfig === null || statisticConfig === void 0 ? void 0 : statisticConfig.showDelta) && /*#__PURE__*/_jsxDEV(animated.div, {\n      className: classnames('delta', `is-${statistic}`),\n      title: delta,\n      children: spring.delta.to(delta => !noDistrictData || !statisticConfig.hasPrimary ? delta > 0 ? '\\u2191' + formatNumber(delta, statisticConfig.format) : delta < 0 ? '\\u2193' + formatNumber(Math.abs(delta), statisticConfig.format) : '' : '')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(animated.div, {\n      className: \"total\",\n      title: total,\n      children: spring.total.to(total => !noDistrictData || !statisticConfig.hasPrimary ? formatNumber(total, statisticConfig.format, statistic) : '-')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Cell, \"xrfx8rkkJgEmgq4ddSaV8nbWakk=\", false, function () {\n  return [useSpring];\n});\n\n_c = Cell;\n\nconst isCellEqual = (prevProps, currProps) => {\n  var _prevProps$data, _currProps$data, _prevProps$data2, _currProps$data2, _prevProps$data3, _currProps$data3;\n\n  if (!equal((_prevProps$data = prevProps.data) === null || _prevProps$data === void 0 ? void 0 : _prevProps$data.total, (_currProps$data = currProps.data) === null || _currProps$data === void 0 ? void 0 : _currProps$data.total)) {\n    return false;\n  } else if (!equal((_prevProps$data2 = prevProps.data) === null || _prevProps$data2 === void 0 ? void 0 : _prevProps$data2.delta, (_currProps$data2 = currProps.data) === null || _currProps$data2 === void 0 ? void 0 : _currProps$data2.delta)) {\n    return false;\n  } else if (!equal((_prevProps$data3 = prevProps.data) === null || _prevProps$data3 === void 0 ? void 0 : _prevProps$data3.noDistrictData, (_currProps$data3 = currProps.data) === null || _currProps$data3 === void 0 ? void 0 : _currProps$data3.noDistrictData)) {\n    return false;\n  } else if (!equal(prevProps.getTableStatistic, currProps.getTableStatistic)) {\n    return false;\n  }\n\n  return true;\n};\n\nexport default _c2 = /*#__PURE__*/memo(Cell, isCellEqual);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Cell\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/ssakhilesha/Documents/GitHub/Masters-BDA-project/website/covid19/src/components/Cell.js"],"names":["SPRING_CONFIG_NUMBERS","STATISTIC_CONFIGS","formatNumber","classnames","equal","memo","animated","useSpring","Cell","statistic","data","getTableStatistic","noDistrictData","total","delta","spring","config","statisticConfig","showDelta","to","hasPrimary","format","Math","abs","isCellEqual","prevProps","currProps"],"mappings":"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","sourcesContent":["import {SPRING_CONFIG_NUMBERS, STATISTIC_CONFIGS} from '../constants.js';\nimport {formatNumber} from '../utils/commonFunctions';\n\nimport classnames from 'classnames';\nimport equal from 'fast-deep-equal';\nimport {memo} from 'react';\nimport {animated, useSpring} from 'react-spring';\n\nconst Cell = ({statistic, data, getTableStatistic, noDistrictData}) => {\n  const total = getTableStatistic(data, statistic, 'total');\n  const delta = getTableStatistic(data, statistic, 'delta');\n\n  const spring = useSpring({\n    total: total,\n    delta: delta,\n    config: SPRING_CONFIG_NUMBERS,\n  });\n\n  const statisticConfig = STATISTIC_CONFIGS[statistic];\n\n  return (\n    <div className=\"cell statistic\">\n      {statisticConfig?.showDelta && (\n        <animated.div\n          className={classnames('delta', `is-${statistic}`)}\n          title={delta}\n        >\n          {spring.delta.to((delta) =>\n            !noDistrictData || !statisticConfig.hasPrimary\n              ? delta > 0\n                ? '\\u2191' + formatNumber(delta, statisticConfig.format)\n                : delta < 0\n                ? '\\u2193' +\n                  formatNumber(Math.abs(delta), statisticConfig.format)\n                : ''\n              : ''\n          )}\n        </animated.div>\n      )}\n\n      <animated.div className=\"total\" title={total}>\n        {spring.total.to((total) =>\n          !noDistrictData || !statisticConfig.hasPrimary\n            ? formatNumber(total, statisticConfig.format, statistic)\n            : '-'\n        )}\n      </animated.div>\n    </div>\n  );\n};\n\nconst isCellEqual = (prevProps, currProps) => {\n  if (!equal(prevProps.data?.total, currProps.data?.total)) {\n    return false;\n  } else if (!equal(prevProps.data?.delta, currProps.data?.delta)) {\n    return false;\n  } else if (\n    !equal(prevProps.data?.noDistrictData, currProps.data?.noDistrictData)\n  ) {\n    return false;\n  } else if (!equal(prevProps.getTableStatistic, currProps.getTableStatistic)) {\n    return false;\n  }\n  return true;\n};\n\nexport default memo(Cell, isCellEqual);\n"]},"metadata":{},"sourceType":"module"}