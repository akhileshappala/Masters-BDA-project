{"ast":null,"code":"import _slicedToArray from \"/Users/ssakhilesha/Documents/GitHub/Masters-BDA-project/website/covid19/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useForkRef as useForkRef, unstable_useId as useId, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport useButton from '../useButton';\nimport { SelectActionTypes } from './useSelect.types';\nimport useList from '../useList';\nimport defaultOptionStringifier from './defaultOptionStringifier';\nimport { useCompoundParent } from '../utils/useCompound';\nimport selectReducer from './selectReducer';\n/**\n *\n * Demos:\n *\n * - [Select](https://mui.com/base/react-select/#hooks)\n *\n * API:\n *\n * - [useSelect API](https://mui.com/base/react-select/hooks-api/#use-select)\n */\n\nfunction useSelect(props) {\n  var buttonRefProp = props.buttonRef,\n      _props$defaultOpen = props.defaultOpen,\n      defaultOpen = _props$defaultOpen === void 0 ? false : _props$defaultOpen,\n      defaultValueProp = props.defaultValue,\n      _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? false : _props$disabled,\n      listboxIdProp = props.listboxId,\n      listboxRefProp = props.listboxRef,\n      _props$multiple = props.multiple,\n      multiple = _props$multiple === void 0 ? false : _props$multiple,\n      onChange = props.onChange,\n      onHighlightChange = props.onHighlightChange,\n      onOpenChange = props.onOpenChange,\n      openProp = props.open,\n      optionsParam = props.options,\n      _props$optionStringif = props.optionStringifier,\n      optionStringifier = _props$optionStringif === void 0 ? defaultOptionStringifier : _props$optionStringif,\n      valueProp = props.value;\n  var buttonRef = React.useRef(null);\n  var handleButtonRef = useForkRef(buttonRefProp, buttonRef);\n  var listboxRef = React.useRef(null);\n  var listboxId = useId(listboxIdProp);\n  var defaultValue;\n\n  if (valueProp === undefined && defaultValueProp === undefined) {\n    defaultValue = [];\n  } else if (defaultValueProp !== undefined) {\n    defaultValue = multiple ? defaultValueProp : [defaultValueProp];\n  }\n\n  var value = React.useMemo(function () {\n    if (valueProp !== undefined) {\n      return multiple ? valueProp : [valueProp];\n    }\n\n    return undefined;\n  }, [valueProp, multiple]);\n\n  var _useCompoundParent = useCompoundParent(),\n      subitems = _useCompoundParent.subitems,\n      compoundComponentContextValue = _useCompoundParent.contextValue;\n\n  var options = React.useMemo(function () {\n    if (optionsParam != null) {\n      return new Map(optionsParam.map(function (option, index) {\n        return [option.value, {\n          value: option.value,\n          label: option.label,\n          disabled: option.disabled,\n          ref: /*#__PURE__*/React.createRef(),\n          id: \"\".concat(listboxId, \"_\").concat(index)\n        }];\n      }));\n    }\n\n    return subitems;\n  }, [optionsParam, subitems, listboxId]); // prevents closing the listbox on keyUp right after opening it\n\n  var ignoreEnterKeyUp = React.useRef(false); // prevents reopening the listbox when button is clicked\n  // (listbox closes on lost focus, then immediately reopens on click)\n\n  var ignoreClick = React.useRef(false); // Ensure the listbox is focused after opening\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      listboxFocusRequested = _React$useState2[0],\n      requestListboxFocus = _React$useState2[1];\n\n  var focusListboxIfRequested = React.useCallback(function () {\n    if (listboxFocusRequested && listboxRef.current != null) {\n      listboxRef.current.focus();\n      requestListboxFocus(false);\n    }\n  }, [listboxFocusRequested]);\n  var handleListboxRef = useForkRef(listboxRefProp, listboxRef, focusListboxIfRequested);\n\n  var _useButton = useButton({\n    disabled: disabled,\n    rootRef: handleButtonRef\n  }),\n      getButtonRootProps = _useButton.getRootProps,\n      buttonActive = _useButton.active,\n      buttonFocusVisible = _useButton.focusVisible,\n      mergedButtonRef = _useButton.rootRef;\n\n  var optionValues = React.useMemo(function () {\n    return Array.from(options.keys());\n  }, [options]);\n  var isItemDisabled = React.useCallback(function (valueToCheck) {\n    var _option$disabled;\n\n    var option = options.get(valueToCheck);\n    return (_option$disabled = option == null ? void 0 : option.disabled) != null ? _option$disabled : false;\n  }, [options]);\n  var stringifyOption = React.useCallback(function (valueToCheck) {\n    var option = options.get(valueToCheck);\n\n    if (!option) {\n      return '';\n    }\n\n    return optionStringifier(option);\n  }, [options, optionStringifier]);\n  var controlledState = React.useMemo(function () {\n    return {\n      selectedValues: value,\n      open: openProp\n    };\n  }, [value, openProp]);\n  var getItemId = React.useCallback(function (itemValue) {\n    var _options$get;\n\n    return (_options$get = options.get(itemValue)) == null ? void 0 : _options$get.id;\n  }, [options]);\n  var handleSelectionChange = React.useCallback(function (event, newValues) {\n    if (multiple) {\n      onChange == null ? void 0 : onChange(event, newValues);\n    } else {\n      var _newValues$;\n\n      onChange == null ? void 0 : onChange(event, (_newValues$ = newValues[0]) != null ? _newValues$ : null);\n    }\n  }, [multiple, onChange]);\n  var handleHighlightChange = React.useCallback(function (event, newValue) {\n    onHighlightChange == null ? void 0 : onHighlightChange(event, newValue != null ? newValue : null);\n  }, [onHighlightChange]);\n  var handleStateChange = React.useCallback(function (e, field, fieldValue) {\n    if (field === 'open') {\n      onOpenChange == null ? void 0 : onOpenChange(fieldValue);\n\n      if (fieldValue === false && (e == null ? void 0 : e.type) !== 'blur') {\n        var _buttonRef$current;\n\n        (_buttonRef$current = buttonRef.current) == null ? void 0 : _buttonRef$current.focus();\n      }\n    }\n  }, [onOpenChange]);\n  var useListParameters = {\n    getInitialState: function getInitialState() {\n      var _defaultValue;\n\n      return {\n        highlightedValue: null,\n        selectedValues: (_defaultValue = defaultValue) != null ? _defaultValue : [],\n        open: defaultOpen\n      };\n    },\n    getItemId: getItemId,\n    controlledProps: controlledState,\n    isItemDisabled: isItemDisabled,\n    rootRef: handleListboxRef,\n    onChange: handleSelectionChange,\n    onHighlightChange: handleHighlightChange,\n    onStateChange: handleStateChange,\n    reducerActionContext: React.useMemo(function () {\n      return {\n        multiple: multiple\n      };\n    }, [multiple]),\n    items: optionValues,\n    itemStringifier: stringifyOption,\n    selectionMode: multiple ? 'multiple' : 'single',\n    stateReducer: selectReducer\n  };\n\n  var _useList = useList(useListParameters),\n      dispatch = _useList.dispatch,\n      getListboxRootProps = _useList.getRootProps,\n      listContextValue = _useList.contextValue,\n      _useList$state = _useList.state,\n      open = _useList$state.open,\n      highlightedOption = _useList$state.highlightedValue,\n      selectedOptions = _useList$state.selectedValues,\n      mergedListboxRef = _useList.rootRef;\n\n  React.useEffect(function () {\n    focusListboxIfRequested();\n  }, [focusListboxIfRequested]);\n  React.useEffect(function () {\n    requestListboxFocus(open);\n  }, [open]);\n\n  var createHandleMouseDown = function createHandleMouseDown(otherHandlers) {\n    return function (event) {\n      var _otherHandlers$onMous;\n\n      otherHandlers == null ? void 0 : (_otherHandlers$onMous = otherHandlers.onMouseDown) == null ? void 0 : _otherHandlers$onMous.call(otherHandlers, event);\n\n      if (!event.defaultPrevented && open) {\n        ignoreClick.current = true;\n      }\n    };\n  };\n\n  var createHandleButtonClick = function createHandleButtonClick(otherHandlers) {\n    return function (event) {\n      var _otherHandlers$onClic;\n\n      otherHandlers == null ? void 0 : (_otherHandlers$onClic = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic.call(otherHandlers, event);\n\n      if (!event.defaultPrevented && !ignoreClick.current) {\n        var action = {\n          type: SelectActionTypes.buttonClick,\n          event: event\n        };\n        dispatch(action);\n      }\n\n      ignoreClick.current = false;\n    };\n  };\n\n  var createHandleButtonKeyDown = function createHandleButtonKeyDown(otherHandlers) {\n    return function (event) {\n      var _otherHandlers$onKeyD;\n\n      otherHandlers == null ? void 0 : (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null ? void 0 : _otherHandlers$onKeyD.call(otherHandlers, event);\n\n      if (event.defaultPrevented) {\n        return;\n      }\n\n      if (event.key === 'Enter') {\n        ignoreEnterKeyUp.current = true;\n      }\n\n      if (event.key === 'ArrowDown' || event.key === 'ArrowUp') {\n        event.preventDefault();\n        dispatch({\n          type: SelectActionTypes.buttonArrowKeyDown,\n          key: event.key,\n          event: event\n        });\n      }\n    };\n  };\n\n  var createHandleListboxKeyUp = function createHandleListboxKeyUp(otherHandlers) {\n    return function (event) {\n      var _otherHandlers$onKeyU;\n\n      otherHandlers == null ? void 0 : (_otherHandlers$onKeyU = otherHandlers.onKeyUp) == null ? void 0 : _otherHandlers$onKeyU.call(otherHandlers, event);\n\n      if (event.defaultPrevented) {\n        return;\n      }\n\n      var closingKeys = multiple ? ['Escape'] : ['Escape', 'Enter', ' '];\n\n      if (open && !ignoreEnterKeyUp.current && closingKeys.includes(event.key)) {\n        var _buttonRef$current2;\n\n        buttonRef == null ? void 0 : (_buttonRef$current2 = buttonRef.current) == null ? void 0 : _buttonRef$current2.focus();\n      }\n\n      ignoreEnterKeyUp.current = false;\n    };\n  };\n\n  useEnhancedEffect(function () {\n    // Scroll to the currently highlighted option.\n    if (highlightedOption != null) {\n      var _options$get2;\n\n      var optionRef = (_options$get2 = options.get(highlightedOption)) == null ? void 0 : _options$get2.ref;\n\n      if (!listboxRef.current || !(optionRef != null && optionRef.current)) {\n        return;\n      }\n\n      var listboxClientRect = listboxRef.current.getBoundingClientRect();\n      var optionClientRect = optionRef.current.getBoundingClientRect();\n\n      if (optionClientRect.top < listboxClientRect.top) {\n        listboxRef.current.scrollTop -= listboxClientRect.top - optionClientRect.top;\n      } else if (optionClientRect.bottom > listboxClientRect.bottom) {\n        listboxRef.current.scrollTop += optionClientRect.bottom - listboxClientRect.bottom;\n      }\n    }\n  }, [highlightedOption, options]);\n\n  var getButtonProps = function getButtonProps() {\n    var otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return _extends({}, getButtonRootProps(_extends({}, otherHandlers, {\n      onClick: createHandleButtonClick(otherHandlers),\n      onMouseDown: createHandleMouseDown(otherHandlers),\n      onKeyDown: createHandleButtonKeyDown(otherHandlers)\n    })), {\n      role: 'combobox',\n      'aria-expanded': open,\n      'aria-haspopup': 'listbox',\n      'aria-controls': listboxId\n    });\n  };\n\n  var getOptionMetadata = React.useCallback(function (optionValue) {\n    return options.get(optionValue);\n  }, [options]);\n\n  var getListboxProps = function getListboxProps() {\n    var otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return _extends({}, getListboxRootProps(_extends({}, otherHandlers, {\n      onKeyUp: createHandleListboxKeyUp(otherHandlers)\n    })), {\n      id: listboxId,\n      role: 'listbox',\n      'aria-multiselectable': multiple ? 'true' : undefined\n    });\n  };\n\n  React.useDebugValue({\n    selectedOptions: selectedOptions,\n    highlightedOption: highlightedOption,\n    open: open\n  });\n  var contextValue = React.useMemo(function () {\n    return _extends({}, listContextValue, compoundComponentContextValue);\n  }, [listContextValue, compoundComponentContextValue]);\n  var selectValue;\n\n  if (props.multiple) {\n    selectValue = selectedOptions;\n  } else {\n    selectValue = selectedOptions.length > 0 ? selectedOptions[0] : null;\n  }\n\n  return {\n    buttonActive: buttonActive,\n    buttonFocusVisible: buttonFocusVisible,\n    buttonRef: mergedButtonRef,\n    contextValue: contextValue,\n    disabled: disabled,\n    dispatch: dispatch,\n    getButtonProps: getButtonProps,\n    getListboxProps: getListboxProps,\n    getOptionMetadata: getOptionMetadata,\n    listboxRef: mergedListboxRef,\n    open: open,\n    options: optionValues,\n    value: selectValue,\n    highlightedOption: highlightedOption\n  };\n}\n\nexport default useSelect;","map":{"version":3,"sources":["/Users/ssakhilesha/Documents/GitHub/Masters-BDA-project/website/covid19/node_modules/@mui/base/useSelect/useSelect.js"],"names":["_extends","React","unstable_useForkRef","useForkRef","unstable_useId","useId","unstable_useEnhancedEffect","useEnhancedEffect","useButton","SelectActionTypes","useList","defaultOptionStringifier","useCompoundParent","selectReducer","useSelect","props","buttonRefProp","buttonRef","defaultOpen","defaultValueProp","defaultValue","disabled","listboxIdProp","listboxId","listboxRefProp","listboxRef","multiple","onChange","onHighlightChange","onOpenChange","openProp","open","optionsParam","options","optionStringifier","valueProp","value","useRef","handleButtonRef","undefined","useMemo","subitems","compoundComponentContextValue","contextValue","Map","map","option","index","label","ref","createRef","id","ignoreEnterKeyUp","ignoreClick","useState","listboxFocusRequested","requestListboxFocus","focusListboxIfRequested","useCallback","current","focus","handleListboxRef","rootRef","getButtonRootProps","getRootProps","buttonActive","active","buttonFocusVisible","focusVisible","mergedButtonRef","optionValues","Array","from","keys","isItemDisabled","valueToCheck","_option$disabled","get","stringifyOption","controlledState","selectedValues","getItemId","itemValue","_options$get","handleSelectionChange","event","newValues","_newValues$","handleHighlightChange","newValue","handleStateChange","e","field","fieldValue","type","_buttonRef$current","useListParameters","getInitialState","_defaultValue","highlightedValue","controlledProps","onStateChange","reducerActionContext","items","itemStringifier","selectionMode","stateReducer","dispatch","getListboxRootProps","listContextValue","state","highlightedOption","selectedOptions","mergedListboxRef","useEffect","createHandleMouseDown","otherHandlers","_otherHandlers$onMous","onMouseDown","call","defaultPrevented","createHandleButtonClick","_otherHandlers$onClic","onClick","action","buttonClick","createHandleButtonKeyDown","_otherHandlers$onKeyD","onKeyDown","key","preventDefault","buttonArrowKeyDown","createHandleListboxKeyUp","_otherHandlers$onKeyU","onKeyUp","closingKeys","includes","_buttonRef$current2","_options$get2","optionRef","listboxClientRect","getBoundingClientRect","optionClientRect","top","scrollTop","bottom","getButtonProps","role","getOptionMetadata","optionValue","getListboxProps","useDebugValue","selectValue","length"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useForkRef as useForkRef, unstable_useId as useId, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport useButton from '../useButton';\nimport { SelectActionTypes } from './useSelect.types';\nimport useList from '../useList';\nimport defaultOptionStringifier from './defaultOptionStringifier';\nimport { useCompoundParent } from '../utils/useCompound';\nimport selectReducer from './selectReducer';\n\n/**\n *\n * Demos:\n *\n * - [Select](https://mui.com/base/react-select/#hooks)\n *\n * API:\n *\n * - [useSelect API](https://mui.com/base/react-select/hooks-api/#use-select)\n */\nfunction useSelect(props) {\n  const {\n    buttonRef: buttonRefProp,\n    defaultOpen = false,\n    defaultValue: defaultValueProp,\n    disabled = false,\n    listboxId: listboxIdProp,\n    listboxRef: listboxRefProp,\n    multiple = false,\n    onChange,\n    onHighlightChange,\n    onOpenChange,\n    open: openProp,\n    options: optionsParam,\n    optionStringifier = defaultOptionStringifier,\n    value: valueProp\n  } = props;\n  const buttonRef = React.useRef(null);\n  const handleButtonRef = useForkRef(buttonRefProp, buttonRef);\n  const listboxRef = React.useRef(null);\n  const listboxId = useId(listboxIdProp);\n  let defaultValue;\n  if (valueProp === undefined && defaultValueProp === undefined) {\n    defaultValue = [];\n  } else if (defaultValueProp !== undefined) {\n    defaultValue = multiple ? defaultValueProp : [defaultValueProp];\n  }\n  const value = React.useMemo(() => {\n    if (valueProp !== undefined) {\n      return multiple ? valueProp : [valueProp];\n    }\n    return undefined;\n  }, [valueProp, multiple]);\n  const {\n    subitems,\n    contextValue: compoundComponentContextValue\n  } = useCompoundParent();\n  const options = React.useMemo(() => {\n    if (optionsParam != null) {\n      return new Map(optionsParam.map((option, index) => [option.value, {\n        value: option.value,\n        label: option.label,\n        disabled: option.disabled,\n        ref: /*#__PURE__*/React.createRef(),\n        id: `${listboxId}_${index}`\n      }]));\n    }\n    return subitems;\n  }, [optionsParam, subitems, listboxId]);\n\n  // prevents closing the listbox on keyUp right after opening it\n  const ignoreEnterKeyUp = React.useRef(false);\n\n  // prevents reopening the listbox when button is clicked\n  // (listbox closes on lost focus, then immediately reopens on click)\n  const ignoreClick = React.useRef(false);\n\n  // Ensure the listbox is focused after opening\n  const [listboxFocusRequested, requestListboxFocus] = React.useState(false);\n  const focusListboxIfRequested = React.useCallback(() => {\n    if (listboxFocusRequested && listboxRef.current != null) {\n      listboxRef.current.focus();\n      requestListboxFocus(false);\n    }\n  }, [listboxFocusRequested]);\n  const handleListboxRef = useForkRef(listboxRefProp, listboxRef, focusListboxIfRequested);\n  const {\n    getRootProps: getButtonRootProps,\n    active: buttonActive,\n    focusVisible: buttonFocusVisible,\n    rootRef: mergedButtonRef\n  } = useButton({\n    disabled,\n    rootRef: handleButtonRef\n  });\n  const optionValues = React.useMemo(() => Array.from(options.keys()), [options]);\n  const isItemDisabled = React.useCallback(valueToCheck => {\n    var _option$disabled;\n    const option = options.get(valueToCheck);\n    return (_option$disabled = option == null ? void 0 : option.disabled) != null ? _option$disabled : false;\n  }, [options]);\n  const stringifyOption = React.useCallback(valueToCheck => {\n    const option = options.get(valueToCheck);\n    if (!option) {\n      return '';\n    }\n    return optionStringifier(option);\n  }, [options, optionStringifier]);\n  const controlledState = React.useMemo(() => ({\n    selectedValues: value,\n    open: openProp\n  }), [value, openProp]);\n  const getItemId = React.useCallback(itemValue => {\n    var _options$get;\n    return (_options$get = options.get(itemValue)) == null ? void 0 : _options$get.id;\n  }, [options]);\n  const handleSelectionChange = React.useCallback((event, newValues) => {\n    if (multiple) {\n      onChange == null ? void 0 : onChange(event, newValues);\n    } else {\n      var _newValues$;\n      onChange == null ? void 0 : onChange(event, (_newValues$ = newValues[0]) != null ? _newValues$ : null);\n    }\n  }, [multiple, onChange]);\n  const handleHighlightChange = React.useCallback((event, newValue) => {\n    onHighlightChange == null ? void 0 : onHighlightChange(event, newValue != null ? newValue : null);\n  }, [onHighlightChange]);\n  const handleStateChange = React.useCallback((e, field, fieldValue) => {\n    if (field === 'open') {\n      onOpenChange == null ? void 0 : onOpenChange(fieldValue);\n      if (fieldValue === false && (e == null ? void 0 : e.type) !== 'blur') {\n        var _buttonRef$current;\n        (_buttonRef$current = buttonRef.current) == null ? void 0 : _buttonRef$current.focus();\n      }\n    }\n  }, [onOpenChange]);\n  const useListParameters = {\n    getInitialState: () => {\n      var _defaultValue;\n      return {\n        highlightedValue: null,\n        selectedValues: (_defaultValue = defaultValue) != null ? _defaultValue : [],\n        open: defaultOpen\n      };\n    },\n    getItemId,\n    controlledProps: controlledState,\n    isItemDisabled,\n    rootRef: handleListboxRef,\n    onChange: handleSelectionChange,\n    onHighlightChange: handleHighlightChange,\n    onStateChange: handleStateChange,\n    reducerActionContext: React.useMemo(() => ({\n      multiple\n    }), [multiple]),\n    items: optionValues,\n    itemStringifier: stringifyOption,\n    selectionMode: multiple ? 'multiple' : 'single',\n    stateReducer: selectReducer\n  };\n  const {\n    dispatch,\n    getRootProps: getListboxRootProps,\n    contextValue: listContextValue,\n    state: {\n      open,\n      highlightedValue: highlightedOption,\n      selectedValues: selectedOptions\n    },\n    rootRef: mergedListboxRef\n  } = useList(useListParameters);\n  React.useEffect(() => {\n    focusListboxIfRequested();\n  }, [focusListboxIfRequested]);\n  React.useEffect(() => {\n    requestListboxFocus(open);\n  }, [open]);\n  const createHandleMouseDown = otherHandlers => event => {\n    var _otherHandlers$onMous;\n    otherHandlers == null ? void 0 : (_otherHandlers$onMous = otherHandlers.onMouseDown) == null ? void 0 : _otherHandlers$onMous.call(otherHandlers, event);\n    if (!event.defaultPrevented && open) {\n      ignoreClick.current = true;\n    }\n  };\n  const createHandleButtonClick = otherHandlers => event => {\n    var _otherHandlers$onClic;\n    otherHandlers == null ? void 0 : (_otherHandlers$onClic = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic.call(otherHandlers, event);\n    if (!event.defaultPrevented && !ignoreClick.current) {\n      const action = {\n        type: SelectActionTypes.buttonClick,\n        event\n      };\n      dispatch(action);\n    }\n    ignoreClick.current = false;\n  };\n  const createHandleButtonKeyDown = otherHandlers => event => {\n    var _otherHandlers$onKeyD;\n    otherHandlers == null ? void 0 : (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null ? void 0 : _otherHandlers$onKeyD.call(otherHandlers, event);\n    if (event.defaultPrevented) {\n      return;\n    }\n    if (event.key === 'Enter') {\n      ignoreEnterKeyUp.current = true;\n    }\n    if (event.key === 'ArrowDown' || event.key === 'ArrowUp') {\n      event.preventDefault();\n      dispatch({\n        type: SelectActionTypes.buttonArrowKeyDown,\n        key: event.key,\n        event\n      });\n    }\n  };\n  const createHandleListboxKeyUp = otherHandlers => event => {\n    var _otherHandlers$onKeyU;\n    otherHandlers == null ? void 0 : (_otherHandlers$onKeyU = otherHandlers.onKeyUp) == null ? void 0 : _otherHandlers$onKeyU.call(otherHandlers, event);\n    if (event.defaultPrevented) {\n      return;\n    }\n    const closingKeys = multiple ? ['Escape'] : ['Escape', 'Enter', ' '];\n    if (open && !ignoreEnterKeyUp.current && closingKeys.includes(event.key)) {\n      var _buttonRef$current2;\n      buttonRef == null ? void 0 : (_buttonRef$current2 = buttonRef.current) == null ? void 0 : _buttonRef$current2.focus();\n    }\n    ignoreEnterKeyUp.current = false;\n  };\n  useEnhancedEffect(() => {\n    // Scroll to the currently highlighted option.\n    if (highlightedOption != null) {\n      var _options$get2;\n      const optionRef = (_options$get2 = options.get(highlightedOption)) == null ? void 0 : _options$get2.ref;\n      if (!listboxRef.current || !(optionRef != null && optionRef.current)) {\n        return;\n      }\n      const listboxClientRect = listboxRef.current.getBoundingClientRect();\n      const optionClientRect = optionRef.current.getBoundingClientRect();\n      if (optionClientRect.top < listboxClientRect.top) {\n        listboxRef.current.scrollTop -= listboxClientRect.top - optionClientRect.top;\n      } else if (optionClientRect.bottom > listboxClientRect.bottom) {\n        listboxRef.current.scrollTop += optionClientRect.bottom - listboxClientRect.bottom;\n      }\n    }\n  }, [highlightedOption, options]);\n  const getButtonProps = (otherHandlers = {}) => {\n    return _extends({}, getButtonRootProps(_extends({}, otherHandlers, {\n      onClick: createHandleButtonClick(otherHandlers),\n      onMouseDown: createHandleMouseDown(otherHandlers),\n      onKeyDown: createHandleButtonKeyDown(otherHandlers)\n    })), {\n      role: 'combobox',\n      'aria-expanded': open,\n      'aria-haspopup': 'listbox',\n      'aria-controls': listboxId\n    });\n  };\n  const getOptionMetadata = React.useCallback(optionValue => options.get(optionValue), [options]);\n  const getListboxProps = (otherHandlers = {}) => {\n    return _extends({}, getListboxRootProps(_extends({}, otherHandlers, {\n      onKeyUp: createHandleListboxKeyUp(otherHandlers)\n    })), {\n      id: listboxId,\n      role: 'listbox',\n      'aria-multiselectable': multiple ? 'true' : undefined\n    });\n  };\n  React.useDebugValue({\n    selectedOptions,\n    highlightedOption,\n    open\n  });\n  const contextValue = React.useMemo(() => _extends({}, listContextValue, compoundComponentContextValue), [listContextValue, compoundComponentContextValue]);\n  let selectValue;\n  if (props.multiple) {\n    selectValue = selectedOptions;\n  } else {\n    selectValue = selectedOptions.length > 0 ? selectedOptions[0] : null;\n  }\n  return {\n    buttonActive,\n    buttonFocusVisible,\n    buttonRef: mergedButtonRef,\n    contextValue,\n    disabled,\n    dispatch,\n    getButtonProps,\n    getListboxProps,\n    getOptionMetadata,\n    listboxRef: mergedListboxRef,\n    open,\n    options: optionValues,\n    value: selectValue,\n    highlightedOption\n  };\n}\nexport default useSelect;"]},"metadata":{},"sourceType":"module"}