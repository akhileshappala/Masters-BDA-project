"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.stateReducer = exports.getFlexColumnStyles = exports.getCellStyles = exports.checkBoxSelectionHook = exports.DATATABLE_DEFAULT_PAGE_SIZES = exports.DATATABLE_CHECKBOX_SELECTOR_ID = void 0;
var React = _interopRequireWildcard(require("react"));
var _IndeterminateCheckbox = _interopRequireDefault(require("./IndeterminateCheckbox"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/*!
  Modus React Bootstrap 
  A React-based component library developed as a common, open source platform for all of Trimbleâ€™s web applications built on React.
  Extends React-Bootstrap v1.6.5
  Copyright (c) 2022 Trimble Inc.
 */

// constants
const DATATABLE_CHECKBOX_SELECTOR_ID = 'selector';
exports.DATATABLE_CHECKBOX_SELECTOR_ID = DATATABLE_CHECKBOX_SELECTOR_ID;
const DATATABLE_DEFAULT_PAGE_SIZES = [10, 20, 30, 40, 50];

// components
exports.DATATABLE_DEFAULT_PAGE_SIZES = DATATABLE_DEFAULT_PAGE_SIZES;
const checkBoxSelectionHook = (hooks, tableId, multipleRowSelection) => {
  hooks.visibleColumns.push(columns => [{
    id: DATATABLE_CHECKBOX_SELECTOR_ID,
    disableResizing: true,
    disableGroupBy: true,
    Cell: ({
      row
    }) => /*#__PURE__*/(0, _jsxRuntime.jsx)(_IndeterminateCheckbox.default, {
      ...row.getToggleRowSelectedProps(),
      id: `${tableId}_${DATATABLE_CHECKBOX_SELECTOR_ID}_row"${row.id}`
    }),
    ...(multipleRowSelection && {
      Header: ({
        getToggleAllRowsSelectedProps
      }) => /*#__PURE__*/(0, _jsxRuntime.jsx)(_IndeterminateCheckbox.default, {
        ...getToggleAllRowsSelectedProps(),
        id: `${tableId}_${DATATABLE_CHECKBOX_SELECTOR_ID}_header`
      })
    })
  }, ...columns]);
};

// functions
exports.checkBoxSelectionHook = checkBoxSelectionHook;
const stateReducer = {
  stateReducer: (newState, action) => {
    if (action.type === 'toggleRowSelected') {
      newState.selectedRowIds = action.value && {
        [action.id]: true
      };
    }
    return newState;
  }
};
exports.stateReducer = stateReducer;
const getFlexColumnStyles = column => ({
  flex: column.width ? `${column.width} 0 auto` : undefined
});
exports.getFlexColumnStyles = getFlexColumnStyles;
const getCellStyles = (props, {
  cell
}) => [props, {
  style: getFlexColumnStyles(cell.column)
}];
exports.getCellStyles = getCellStyles;