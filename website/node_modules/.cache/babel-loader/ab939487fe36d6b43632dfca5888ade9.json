{"ast":null,"code":"import React, { useContext, useMemo } from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst ThemeContext = /*#__PURE__*/React.createContext({});\nconst {\n  Consumer,\n  Provider\n} = ThemeContext;\n\nfunction ThemeProvider({\n  prefixes,\n  children\n}) {\n  const copiedPrefixes = useMemo(() => ({ ...prefixes\n  }), [prefixes]);\n  return /*#__PURE__*/_jsx(Provider, {\n    value: copiedPrefixes,\n    children: children\n  });\n}\n\nexport function useBootstrapPrefix(prefix, defaultPrefix) {\n  const prefixes = useContext(ThemeContext);\n  return prefix || prefixes[defaultPrefix] || defaultPrefix;\n}\n\nfunction createBootstrapComponent(Component, opts) {\n  if (typeof opts === 'string') opts = {\n    prefix: opts\n  };\n  const isClassy = Component.prototype && Component.prototype.isReactComponent; // If it's a functional component make sure we don't break it with a ref\n\n  const {\n    prefix,\n    forwardRefAs = isClassy ? 'ref' : 'innerRef'\n  } = opts;\n  const Wrapped = /*#__PURE__*/React.forwardRef(({ ...props\n  }, ref) => {\n    props[forwardRefAs] = ref;\n    const bsPrefix = useBootstrapPrefix(props.bsPrefix, prefix);\n    return /*#__PURE__*/_jsx(Component, { ...props,\n      bsPrefix: bsPrefix\n    });\n  });\n  Wrapped.displayName = `Bootstrap(${Component.displayName || Component.name})`;\n  return Wrapped;\n}\n\nexport { createBootstrapComponent, Consumer as ThemeConsumer };\nexport default ThemeProvider;","map":{"version":3,"sources":["/Users/ssakhilesha/Documents/GitHub/Masters-BDA-project/website /covid19india-react-master/node_modules/@trimbleinc/modus-react-bootstrap/esm/ThemeProvider.js"],"names":["React","useContext","useMemo","jsx","_jsx","ThemeContext","createContext","Consumer","Provider","ThemeProvider","prefixes","children","copiedPrefixes","value","useBootstrapPrefix","prefix","defaultPrefix","createBootstrapComponent","Component","opts","isClassy","prototype","isReactComponent","forwardRefAs","Wrapped","forwardRef","props","ref","bsPrefix","displayName","name","ThemeConsumer"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,OAA5B,QAA2C,OAA3C;AACA,SAASC,GAAG,IAAIC,IAAhB,QAA4B,mBAA5B;AACA,MAAMC,YAAY,GAAG,aAAaL,KAAK,CAACM,aAAN,CAAoB,EAApB,CAAlC;AACA,MAAM;AACJC,EAAAA,QADI;AAEJC,EAAAA;AAFI,IAGFH,YAHJ;;AAIA,SAASI,aAAT,CAAuB;AACrBC,EAAAA,QADqB;AAErBC,EAAAA;AAFqB,CAAvB,EAGG;AACD,QAAMC,cAAc,GAAGV,OAAO,CAAC,OAAO,EACpC,GAAGQ;AADiC,GAAP,CAAD,EAE1B,CAACA,QAAD,CAF0B,CAA9B;AAGA,SAAO,aAAaN,IAAI,CAACI,QAAD,EAAW;AACjCK,IAAAA,KAAK,EAAED,cAD0B;AAEjCD,IAAAA,QAAQ,EAAEA;AAFuB,GAAX,CAAxB;AAID;;AACD,OAAO,SAASG,kBAAT,CAA4BC,MAA5B,EAAoCC,aAApC,EAAmD;AACxD,QAAMN,QAAQ,GAAGT,UAAU,CAACI,YAAD,CAA3B;AACA,SAAOU,MAAM,IAAIL,QAAQ,CAACM,aAAD,CAAlB,IAAqCA,aAA5C;AACD;;AACD,SAASC,wBAAT,CAAkCC,SAAlC,EAA6CC,IAA7C,EAAmD;AACjD,MAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8BA,IAAI,GAAG;AACnCJ,IAAAA,MAAM,EAAEI;AAD2B,GAAP;AAG9B,QAAMC,QAAQ,GAAGF,SAAS,CAACG,SAAV,IAAuBH,SAAS,CAACG,SAAV,CAAoBC,gBAA5D,CAJiD,CAKjD;;AACA,QAAM;AACJP,IAAAA,MADI;AAEJQ,IAAAA,YAAY,GAAGH,QAAQ,GAAG,KAAH,GAAW;AAF9B,MAGFD,IAHJ;AAIA,QAAMK,OAAO,GAAG,aAAaxB,KAAK,CAACyB,UAAN,CAAiB,CAAC,EAC7C,GAAGC;AAD0C,GAAD,EAE3CC,GAF2C,KAEnC;AACTD,IAAAA,KAAK,CAACH,YAAD,CAAL,GAAsBI,GAAtB;AACA,UAAMC,QAAQ,GAAGd,kBAAkB,CAACY,KAAK,CAACE,QAAP,EAAiBb,MAAjB,CAAnC;AACA,WAAO,aAAaX,IAAI,CAACc,SAAD,EAAY,EAClC,GAAGQ,KAD+B;AAElCE,MAAAA,QAAQ,EAAEA;AAFwB,KAAZ,CAAxB;AAID,GAT4B,CAA7B;AAUAJ,EAAAA,OAAO,CAACK,WAAR,GAAuB,aAAYX,SAAS,CAACW,WAAV,IAAyBX,SAAS,CAACY,IAAK,GAA3E;AACA,SAAON,OAAP;AACD;;AACD,SAASP,wBAAT,EAAmCV,QAAQ,IAAIwB,aAA/C;AACA,eAAetB,aAAf","sourcesContent":["import React, { useContext, useMemo } from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst ThemeContext = /*#__PURE__*/React.createContext({});\nconst {\n  Consumer,\n  Provider\n} = ThemeContext;\nfunction ThemeProvider({\n  prefixes,\n  children\n}) {\n  const copiedPrefixes = useMemo(() => ({\n    ...prefixes\n  }), [prefixes]);\n  return /*#__PURE__*/_jsx(Provider, {\n    value: copiedPrefixes,\n    children: children\n  });\n}\nexport function useBootstrapPrefix(prefix, defaultPrefix) {\n  const prefixes = useContext(ThemeContext);\n  return prefix || prefixes[defaultPrefix] || defaultPrefix;\n}\nfunction createBootstrapComponent(Component, opts) {\n  if (typeof opts === 'string') opts = {\n    prefix: opts\n  };\n  const isClassy = Component.prototype && Component.prototype.isReactComponent;\n  // If it's a functional component make sure we don't break it with a ref\n  const {\n    prefix,\n    forwardRefAs = isClassy ? 'ref' : 'innerRef'\n  } = opts;\n  const Wrapped = /*#__PURE__*/React.forwardRef(({\n    ...props\n  }, ref) => {\n    props[forwardRefAs] = ref;\n    const bsPrefix = useBootstrapPrefix(props.bsPrefix, prefix);\n    return /*#__PURE__*/_jsx(Component, {\n      ...props,\n      bsPrefix: bsPrefix\n    });\n  });\n  Wrapped.displayName = `Bootstrap(${Component.displayName || Component.name})`;\n  return Wrapped;\n}\nexport { createBootstrapComponent, Consumer as ThemeConsumer };\nexport default ThemeProvider;"]},"metadata":{},"sourceType":"module"}