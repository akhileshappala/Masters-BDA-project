{"ast":null,"code":"import { INDIA_ISO_SUFFIX, ISO_DATE_REGEX, LOCALE_SHORTHANDS, STATISTIC_CONFIGS, TESTED_EXPIRING_DAYS } from '../constants';\nimport { differenceInDays, format, formatDistance, formatISO, subDays } from 'date-fns';\nimport { utcToZonedTime } from 'date-fns-tz';\nimport i18n from 'i18next';\nlet locale = null;\nconst numberFormatter = new Intl.NumberFormat('en-IN', {\n  maximumFractionDigits: 1\n});\n\nconst getLocale = () => {\n  import('date-fns/locale/').then(localePackage => {\n    locale = localePackage[LOCALE_SHORTHANDS[i18n.language || window.localStorage.i18nextLng]];\n  });\n};\n\nexport const isDevelopmentOrTest = () => {\n  if (process.env.NODE_ENV === 'development' || process.env.NODE_ENV === 'test') return true;\n  return false;\n};\nexport const getIndiaDate = () => {\n  return utcToZonedTime(new Date(), 'Asia/Kolkata');\n};\nexport const getIndiaDateISO = () => {\n  return formatISO(getIndiaDate(), {\n    representation: 'date'\n  });\n};\nexport const getIndiaDateYesterday = () => {\n  return subDays(getIndiaDate(), 1);\n};\nexport const getIndiaDateYesterdayISO = () => {\n  return formatISO(getIndiaDateYesterday(), {\n    representation: 'date'\n  });\n};\nexport const formatLastUpdated = unformattedDate => {\n  getLocale();\n  return formatDistance(new Date(unformattedDate), new Date(), {\n    locale: locale\n  });\n};\nexport const parseIndiaDate = unformattedDate => {\n  if (!unformattedDate) {\n    return getIndiaDate();\n  }\n\n  if (typeof unformattedDate === 'string' && unformattedDate.match(ISO_DATE_REGEX)) {\n    unformattedDate += INDIA_ISO_SUFFIX;\n  }\n\n  return utcToZonedTime(new Date(unformattedDate), 'Asia/Kolkata');\n};\nexport const formatDate = (unformattedDate, formatString) => {\n  if (!unformattedDate) return '';\n  if (typeof unformattedDate === 'string' && unformattedDate.match(ISO_DATE_REGEX)) unformattedDate += INDIA_ISO_SUFFIX;\n  const date = utcToZonedTime(new Date(unformattedDate), 'Asia/Kolkata');\n  return format(date, formatString, {\n    locale: locale\n  });\n};\nexport const formatDateObjIndia = dateObj => {\n  return format(dateObj, \"yyyy-MM-dd'T'HH:mm:ss+05:30\", {\n    locale: locale\n  });\n};\nexport const abbreviateNumber = number => {\n  const numberCleaned = Math.round(Math.abs(number));\n  if (numberCleaned < 1e3) return numberFormatter.format(Math.floor(number));else if (numberCleaned >= 1e3 && numberCleaned < 1e5) return numberFormatter.format(number / 1e3) + 'K';else if (numberCleaned >= 1e5 && numberCleaned < 1e7) return numberFormatter.format(number / 1e5) + 'L';else if (numberCleaned >= 1e7 && numberCleaned < 1e10) return numberFormatter.format(number / 1e7) + 'Cr';else if (numberCleaned >= 1e10 && numberCleaned < 1e14) return numberFormatter.format(number / 1e10) + 'K Cr';else if (numberCleaned >= 1e14) return numberFormatter.format(number / 1e14) + 'L Cr';\n};\nexport const formatNumber = (value, option = '', statistic) => {\n  var _STATISTIC_CONFIGS$st;\n\n  if (isNaN(value) || statistic && ((_STATISTIC_CONFIGS$st = STATISTIC_CONFIGS[statistic]) === null || _STATISTIC_CONFIGS$st === void 0 ? void 0 : _STATISTIC_CONFIGS$st.hideZero) && value === 0) {\n    return '-';\n  } else if (option === 'long') {\n    return numberFormatter.format(Math.abs(value) < 1 ? value : Math.round(value));\n  } else if (option === 'short') {\n    return abbreviateNumber(value);\n  } else if (option === '%') {\n    return `${numberFormatter.format(value)}%`;\n  } else if (option === '') {\n    return numberFormatter.format(value);\n  }\n};\nexport const capitalize = s => {\n  if (typeof s !== 'string') return '';\n  return s.charAt(0).toUpperCase() + s.slice(1);\n};\nexport const toTitleCase = str => {\n  return str.replace(/\\w\\S*/g, function (txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  });\n};\nexport const getStatistic = (data, type, statistic, {\n  expiredDate = null,\n  normalizedByPopulationPer = null,\n  movingAverage = false,\n  canBeNaN = false\n} = {}) => {\n  // TODO: Replace delta with daily to remove ambiguity\n  //       Or add another type for daily/delta\n  if (expiredDate !== null) {\n    var _STATISTIC_CONFIGS$st2;\n\n    if (((_STATISTIC_CONFIGS$st2 = STATISTIC_CONFIGS[statistic]) === null || _STATISTIC_CONFIGS$st2 === void 0 ? void 0 : _STATISTIC_CONFIGS$st2.category) === 'tested') {\n      var _data$meta, _data$meta$tested;\n\n      if (!(data === null || data === void 0 ? void 0 : (_data$meta = data.meta) === null || _data$meta === void 0 ? void 0 : (_data$meta$tested = _data$meta.tested) === null || _data$meta$tested === void 0 ? void 0 : _data$meta$tested.date) || differenceInDays(parseIndiaDate(expiredDate), parseIndiaDate(data.meta.tested.date)) > TESTED_EXPIRING_DAYS) {\n        return 0;\n      }\n    }\n  }\n\n  let multiplyFactor = 1;\n\n  if (type === 'delta' && movingAverage) {\n    type = 'delta7';\n    multiplyFactor *= 1 / 7;\n  }\n\n  if (normalizedByPopulationPer === 'million') {\n    var _data$meta2;\n\n    multiplyFactor *= 1e6 / (data === null || data === void 0 ? void 0 : (_data$meta2 = data.meta) === null || _data$meta2 === void 0 ? void 0 : _data$meta2.population);\n  } else if (normalizedByPopulationPer === 'lakh') {\n    var _data$meta3;\n\n    multiplyFactor *= 1e5 / (data === null || data === void 0 ? void 0 : (_data$meta3 = data.meta) === null || _data$meta3 === void 0 ? void 0 : _data$meta3.population);\n  } else if (normalizedByPopulationPer === 'hundred') {\n    var _data$meta4;\n\n    multiplyFactor *= 1e2 / (data === null || data === void 0 ? void 0 : (_data$meta4 = data.meta) === null || _data$meta4 === void 0 ? void 0 : _data$meta4.population);\n  }\n\n  let val;\n\n  if (statistic === 'active' || statistic === 'activeRatio') {\n    var _data$type, _data$type2, _data$type3, _data$type4;\n\n    const confirmed = (data === null || data === void 0 ? void 0 : (_data$type = data[type]) === null || _data$type === void 0 ? void 0 : _data$type.confirmed) || 0;\n    const deceased = (data === null || data === void 0 ? void 0 : (_data$type2 = data[type]) === null || _data$type2 === void 0 ? void 0 : _data$type2.deceased) || 0;\n    const recovered = (data === null || data === void 0 ? void 0 : (_data$type3 = data[type]) === null || _data$type3 === void 0 ? void 0 : _data$type3.recovered) || 0;\n    const other = (data === null || data === void 0 ? void 0 : (_data$type4 = data[type]) === null || _data$type4 === void 0 ? void 0 : _data$type4.other) || 0;\n    const active = confirmed - deceased - recovered - other;\n\n    if (statistic === 'active') {\n      val = active;\n    } else if (statistic === 'activeRatio') {\n      val = 100 * (active / confirmed);\n    }\n  } else if (statistic === 'vaccinated') {\n    var _data$type5, _data$type6;\n\n    const dose1 = (data === null || data === void 0 ? void 0 : (_data$type5 = data[type]) === null || _data$type5 === void 0 ? void 0 : _data$type5.vaccinated1) || 0;\n    const dose2 = (data === null || data === void 0 ? void 0 : (_data$type6 = data[type]) === null || _data$type6 === void 0 ? void 0 : _data$type6.vaccinated2) || 0;\n    val = dose1 + dose2;\n  } else if (statistic === 'tpr') {\n    var _data$type7, _data$type8;\n\n    const confirmed = (data === null || data === void 0 ? void 0 : (_data$type7 = data[type]) === null || _data$type7 === void 0 ? void 0 : _data$type7.confirmed) || 0;\n    const tested = (data === null || data === void 0 ? void 0 : (_data$type8 = data[type]) === null || _data$type8 === void 0 ? void 0 : _data$type8.tested) || 0;\n    val = 100 * (confirmed / tested);\n  } else if (statistic === 'cfr') {\n    var _data$type9, _data$type10;\n\n    const deceased = (data === null || data === void 0 ? void 0 : (_data$type9 = data[type]) === null || _data$type9 === void 0 ? void 0 : _data$type9.deceased) || 0;\n    const confirmed = (data === null || data === void 0 ? void 0 : (_data$type10 = data[type]) === null || _data$type10 === void 0 ? void 0 : _data$type10.confirmed) || 0;\n    val = 100 * (deceased / confirmed);\n  } else if (statistic === 'recoveryRatio') {\n    var _data$type11, _data$type12;\n\n    const recovered = (data === null || data === void 0 ? void 0 : (_data$type11 = data[type]) === null || _data$type11 === void 0 ? void 0 : _data$type11.recovered) || 0;\n    const confirmed = (data === null || data === void 0 ? void 0 : (_data$type12 = data[type]) === null || _data$type12 === void 0 ? void 0 : _data$type12.confirmed) || 0;\n    val = 100 * (recovered / confirmed);\n  } else if (statistic === 'caseGrowth') {\n    var _data$delta, _data$delta21_;\n\n    const confirmedDeltaLastWeek = (data === null || data === void 0 ? void 0 : (_data$delta = data.delta7) === null || _data$delta === void 0 ? void 0 : _data$delta.confirmed) || 0;\n    const confirmedDeltaTwoWeeksAgo = (data === null || data === void 0 ? void 0 : (_data$delta21_ = data.delta21_14) === null || _data$delta21_ === void 0 ? void 0 : _data$delta21_.confirmed) || 0;\n    val = type === 'total' ? 100 * ((confirmedDeltaLastWeek - confirmedDeltaTwoWeeksAgo) / confirmedDeltaTwoWeeksAgo) : 0;\n  } else if (statistic === 'population') {\n    var _data$meta5;\n\n    val = type === 'total' ? data === null || data === void 0 ? void 0 : (_data$meta5 = data.meta) === null || _data$meta5 === void 0 ? void 0 : _data$meta5.population : 0;\n  } else {\n    var _data$type13;\n\n    val = data === null || data === void 0 ? void 0 : (_data$type13 = data[type]) === null || _data$type13 === void 0 ? void 0 : _data$type13[statistic];\n  }\n\n  const statisticConfig = STATISTIC_CONFIGS[statistic];\n  multiplyFactor = (statisticConfig === null || statisticConfig === void 0 ? void 0 : statisticConfig.nonLinear) && 1 || multiplyFactor;\n  let result = multiplyFactor * val;\n\n  if (!canBeNaN) {\n    result = !isNaN(result) && result || 0;\n  }\n\n  if (!(statisticConfig === null || statisticConfig === void 0 ? void 0 : statisticConfig.canBeInfinite)) {\n    result = (isNaN(result) || isFinite(result)) && result || 0;\n  }\n\n  return result;\n};\nexport const fetcher = url => {\n  return fetch(url).then(response => {\n    return response.json();\n  });\n};\nexport function retry(fn, retriesLeft = 5, interval = 1000) {\n  return new Promise((resolve, reject) => {\n    fn().then(resolve).catch(error => {\n      setTimeout(() => {\n        if (retriesLeft === 1) {\n          // reject('maximum retries exceeded');\n          reject(error);\n          return;\n        } // Passing on \"reject\" is the important part\n\n\n        retry(fn, retriesLeft - 1, interval).then(resolve, reject);\n      }, interval);\n    });\n  });\n}\nexport const spike = (length, width = 8) => `M${-width / 2},0L0,${-length}L${width / 2},0`;","map":{"version":3,"sources":["/Users/ssakhilesha/Documents/GitHub/Masters-BDA-project/website /covid19india-react-master/src/utils/commonFunctions.js"],"names":["INDIA_ISO_SUFFIX","ISO_DATE_REGEX","LOCALE_SHORTHANDS","STATISTIC_CONFIGS","TESTED_EXPIRING_DAYS","differenceInDays","format","formatDistance","formatISO","subDays","utcToZonedTime","i18n","locale","numberFormatter","Intl","NumberFormat","maximumFractionDigits","getLocale","then","localePackage","language","window","localStorage","i18nextLng","isDevelopmentOrTest","process","env","NODE_ENV","getIndiaDate","Date","getIndiaDateISO","representation","getIndiaDateYesterday","getIndiaDateYesterdayISO","formatLastUpdated","unformattedDate","parseIndiaDate","match","formatDate","formatString","date","formatDateObjIndia","dateObj","abbreviateNumber","number","numberCleaned","Math","round","abs","floor","formatNumber","value","option","statistic","isNaN","hideZero","capitalize","s","charAt","toUpperCase","slice","toTitleCase","str","replace","txt","substr","toLowerCase","getStatistic","data","type","expiredDate","normalizedByPopulationPer","movingAverage","canBeNaN","category","meta","tested","multiplyFactor","population","val","confirmed","deceased","recovered","other","active","dose1","vaccinated1","dose2","vaccinated2","confirmedDeltaLastWeek","delta7","confirmedDeltaTwoWeeksAgo","delta21_14","statisticConfig","nonLinear","result","canBeInfinite","isFinite","fetcher","url","fetch","response","json","retry","fn","retriesLeft","interval","Promise","resolve","reject","catch","error","setTimeout","spike","length","width"],"mappings":"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","sourcesContent":["import {\n  INDIA_ISO_SUFFIX,\n  ISO_DATE_REGEX,\n  LOCALE_SHORTHANDS,\n  STATISTIC_CONFIGS,\n  TESTED_EXPIRING_DAYS,\n} from '../constants';\n\nimport {\n  differenceInDays,\n  format,\n  formatDistance,\n  formatISO,\n  subDays,\n} from 'date-fns';\nimport {utcToZonedTime} from 'date-fns-tz';\nimport i18n from 'i18next';\n\nlet locale = null;\nconst numberFormatter = new Intl.NumberFormat('en-IN', {\n  maximumFractionDigits: 1,\n});\n\nconst getLocale = () => {\n  import('date-fns/locale/').then((localePackage) => {\n    locale =\n      localePackage[\n        LOCALE_SHORTHANDS[i18n.language || window.localStorage.i18nextLng]\n      ];\n  });\n};\n\nexport const isDevelopmentOrTest = () => {\n  if (process.env.NODE_ENV === 'development' || process.env.NODE_ENV === 'test')\n    return true;\n  return false;\n};\n\nexport const getIndiaDate = () => {\n  return utcToZonedTime(new Date(), 'Asia/Kolkata');\n};\n\nexport const getIndiaDateISO = () => {\n  return formatISO(getIndiaDate(), {representation: 'date'});\n};\n\nexport const getIndiaDateYesterday = () => {\n  return subDays(getIndiaDate(), 1);\n};\n\nexport const getIndiaDateYesterdayISO = () => {\n  return formatISO(getIndiaDateYesterday(), {representation: 'date'});\n};\n\nexport const formatLastUpdated = (unformattedDate) => {\n  getLocale();\n  return formatDistance(new Date(unformattedDate), new Date(), {\n    locale: locale,\n  });\n};\n\nexport const parseIndiaDate = (unformattedDate) => {\n  if (!unformattedDate) {\n    return getIndiaDate();\n  }\n  if (\n    typeof unformattedDate === 'string' &&\n    unformattedDate.match(ISO_DATE_REGEX)\n  ) {\n    unformattedDate += INDIA_ISO_SUFFIX;\n  }\n  return utcToZonedTime(new Date(unformattedDate), 'Asia/Kolkata');\n};\n\nexport const formatDate = (unformattedDate, formatString) => {\n  if (!unformattedDate) return '';\n  if (\n    typeof unformattedDate === 'string' &&\n    unformattedDate.match(ISO_DATE_REGEX)\n  )\n    unformattedDate += INDIA_ISO_SUFFIX;\n  const date = utcToZonedTime(new Date(unformattedDate), 'Asia/Kolkata');\n  return format(date, formatString, {\n    locale: locale,\n  });\n};\n\nexport const formatDateObjIndia = (dateObj) => {\n  return format(dateObj, \"yyyy-MM-dd'T'HH:mm:ss+05:30\", {\n    locale: locale,\n  });\n};\n\nexport const abbreviateNumber = (number) => {\n  const numberCleaned = Math.round(Math.abs(number));\n  if (numberCleaned < 1e3) return numberFormatter.format(Math.floor(number));\n  else if (numberCleaned >= 1e3 && numberCleaned < 1e5)\n    return numberFormatter.format(number / 1e3) + 'K';\n  else if (numberCleaned >= 1e5 && numberCleaned < 1e7)\n    return numberFormatter.format(number / 1e5) + 'L';\n  else if (numberCleaned >= 1e7 && numberCleaned < 1e10)\n    return numberFormatter.format(number / 1e7) + 'Cr';\n  else if (numberCleaned >= 1e10 && numberCleaned < 1e14)\n    return numberFormatter.format(number / 1e10) + 'K Cr';\n  else if (numberCleaned >= 1e14)\n    return numberFormatter.format(number / 1e14) + 'L Cr';\n};\n\nexport const formatNumber = (value, option = '', statistic) => {\n  if (\n    isNaN(value) ||\n    (statistic && STATISTIC_CONFIGS[statistic]?.hideZero && value === 0)\n  ) {\n    return '-';\n  } else if (option === 'long') {\n    return numberFormatter.format(\n      Math.abs(value) < 1 ? value : Math.round(value)\n    );\n  } else if (option === 'short') {\n    return abbreviateNumber(value);\n  } else if (option === '%') {\n    return `${numberFormatter.format(value)}%`;\n  } else if (option === '') {\n    return numberFormatter.format(value);\n  }\n};\n\nexport const capitalize = (s) => {\n  if (typeof s !== 'string') return '';\n  return s.charAt(0).toUpperCase() + s.slice(1);\n};\n\nexport const toTitleCase = (str) => {\n  return str.replace(/\\w\\S*/g, function (txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  });\n};\n\nexport const getStatistic = (\n  data,\n  type,\n  statistic,\n  {\n    expiredDate = null,\n    normalizedByPopulationPer = null,\n    movingAverage = false,\n    canBeNaN = false,\n  } = {}\n) => {\n  // TODO: Replace delta with daily to remove ambiguity\n  //       Or add another type for daily/delta\n\n  if (expiredDate !== null) {\n    if (STATISTIC_CONFIGS[statistic]?.category === 'tested') {\n      if (\n        !data?.meta?.tested?.date ||\n        differenceInDays(\n          parseIndiaDate(expiredDate),\n          parseIndiaDate(data.meta.tested.date)\n        ) > TESTED_EXPIRING_DAYS\n      ) {\n        return 0;\n      }\n    }\n  }\n\n  let multiplyFactor = 1;\n  if (type === 'delta' && movingAverage) {\n    type = 'delta7';\n    multiplyFactor *= 1 / 7;\n  }\n\n  if (normalizedByPopulationPer === 'million') {\n    multiplyFactor *= 1e6 / data?.meta?.population;\n  } else if (normalizedByPopulationPer === 'lakh') {\n    multiplyFactor *= 1e5 / data?.meta?.population;\n  } else if (normalizedByPopulationPer === 'hundred') {\n    multiplyFactor *= 1e2 / data?.meta?.population;\n  }\n\n  let val;\n  if (statistic === 'active' || statistic === 'activeRatio') {\n    const confirmed = data?.[type]?.confirmed || 0;\n    const deceased = data?.[type]?.deceased || 0;\n    const recovered = data?.[type]?.recovered || 0;\n    const other = data?.[type]?.other || 0;\n    const active = confirmed - deceased - recovered - other;\n    if (statistic === 'active') {\n      val = active;\n    } else if (statistic === 'activeRatio') {\n      val = 100 * (active / confirmed);\n    }\n  } else if (statistic === 'vaccinated') {\n    const dose1 = data?.[type]?.vaccinated1 || 0;\n    const dose2 = data?.[type]?.vaccinated2 || 0;\n    val = dose1 + dose2;\n  } else if (statistic === 'tpr') {\n    const confirmed = data?.[type]?.confirmed || 0;\n    const tested = data?.[type]?.tested || 0;\n    val = 100 * (confirmed / tested);\n  } else if (statistic === 'cfr') {\n    const deceased = data?.[type]?.deceased || 0;\n    const confirmed = data?.[type]?.confirmed || 0;\n    val = 100 * (deceased / confirmed);\n  } else if (statistic === 'recoveryRatio') {\n    const recovered = data?.[type]?.recovered || 0;\n    const confirmed = data?.[type]?.confirmed || 0;\n    val = 100 * (recovered / confirmed);\n  } else if (statistic === 'caseGrowth') {\n    const confirmedDeltaLastWeek = data?.delta7?.confirmed || 0;\n    const confirmedDeltaTwoWeeksAgo = data?.delta21_14?.confirmed || 0;\n    val =\n      type === 'total'\n        ? 100 *\n          ((confirmedDeltaLastWeek - confirmedDeltaTwoWeeksAgo) /\n            confirmedDeltaTwoWeeksAgo)\n        : 0;\n  } else if (statistic === 'population') {\n    val = type === 'total' ? data?.meta?.population : 0;\n  } else {\n    val = data?.[type]?.[statistic];\n  }\n\n  const statisticConfig = STATISTIC_CONFIGS[statistic];\n  multiplyFactor = (statisticConfig?.nonLinear && 1) || multiplyFactor;\n\n  let result = multiplyFactor * val;\n  if (!canBeNaN) {\n    result = (!isNaN(result) && result) || 0;\n  }\n  if (!statisticConfig?.canBeInfinite) {\n    result = ((isNaN(result) || isFinite(result)) && result) || 0;\n  }\n  return result;\n};\n\nexport const fetcher = (url) => {\n  return fetch(url).then((response) => {\n    return response.json();\n  });\n};\n\nexport function retry(fn, retriesLeft = 5, interval = 1000) {\n  return new Promise((resolve, reject) => {\n    fn()\n      .then(resolve)\n      .catch((error) => {\n        setTimeout(() => {\n          if (retriesLeft === 1) {\n            // reject('maximum retries exceeded');\n            reject(error);\n            return;\n          }\n\n          // Passing on \"reject\" is the important part\n          retry(fn, retriesLeft - 1, interval).then(resolve, reject);\n        }, interval);\n      });\n  });\n}\n\nexport const spike = (length, width = 8) =>\n  `M${-width / 2},0L0,${-length}L${width / 2},0`;\n"]},"metadata":{},"sourceType":"module"}