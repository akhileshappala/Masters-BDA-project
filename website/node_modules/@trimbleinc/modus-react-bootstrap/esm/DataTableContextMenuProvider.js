/*!
  Modus React Bootstrap 
  A React-based component library developed as a common, open source platform for all of Trimbleâ€™s web applications built on React.
  Extends React-Bootstrap v1.6.5
  Copyright (c) 2022 Trimble Inc.
 */

import React, { useCallback, useMemo, useState } from 'react';
import Form from './Form';
import renderUsingPortal from './renderUsingPortal';
import ContextMenu from './ContextMenu';
import { DATATABLE_CHECKBOX_SELECTOR_ID } from './DataTableHelpers';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
export const DataTableHeaderContextMenu = /*#__PURE__*/React.createContext(null);
export default function DataTableContextMenuProvider({
  children,
  size,
  allColumns,
  toggleHideColumn,
  toggleHideAllColumns
}) {
  const [contextMenu, setContextMenu] = useState(null);
  const handleHeaderContextMenu = useCallback((event, columnId) => {
    const columns = allColumns.filter(col => col.id !== DATATABLE_CHECKBOX_SELECTOR_ID);
    const menu = {
      positionX: event.clientX,
      positionY: event.clientY,
      items: [{
        title: 'Hide',
        onClick: () => {
          toggleHideColumn(columnId, true);
          setContextMenu(null);
        }
      }, {
        title: 'Show Columns',
        children: columns.map(column => ({
          title: /*#__PURE__*/_jsx(Form.Check, {
            label: column.render('Header'),
            custom: true,
            id: column.id,
            "data-indeterminate": "false",
            ...(column.isVisible && {
              defaultChecked: true
            }),
            onChange: () => toggleHideColumn(column.id, column.isVisible)
          })
        }))
      }, {
        title: 'Show All Columns',
        onClick: () => {
          toggleHideAllColumns(false);
          setContextMenu(null);
        }
      }]
    };
    setContextMenu(menu);
  }, [allColumns, toggleHideColumn, toggleHideAllColumns]);
  const handleContextMenuClose = useCallback(() => {
    setContextMenu(null);
  }, [setContextMenu]);
  const value = useMemo(() => ({
    onHeaderContextMenu: handleHeaderContextMenu
  }), [handleHeaderContextMenu]);
  return /*#__PURE__*/_jsxs(DataTableHeaderContextMenu.Provider, {
    value: value,
    children: [children, renderUsingPortal(contextMenu ? /*#__PURE__*/_jsx(ContextMenu, {
      size: size,
      menu: contextMenu.items,
      anchorPointX: contextMenu.positionX,
      anchorPointY: contextMenu.positionY,
      onClose: handleContextMenuClose
    }) : null, document.body)]
  });
}