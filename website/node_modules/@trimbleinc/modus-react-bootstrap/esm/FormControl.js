import classNames from 'classnames';
import all from 'prop-types-extra/lib/all';
import React, { useContext } from 'react';
import warning from 'warning';
import Feedback from './Feedback';
import FormContext from './FormContext';
import { useBootstrapPrefix } from './ThemeProvider';
import { jsx as _jsx } from "react/jsx-runtime";
const FormControl = /*#__PURE__*/React.forwardRef(({
  bsPrefix,
  bsCustomPrefix,
  type,
  size,
  htmlSize,
  id,
  className,
  isValid = false,
  isInvalid = false,
  plaintext,
  readOnly,
  custom,
  // Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
  as: Component = 'input',
  ...props
}, ref) => {
  const {
    controlId
  } = useContext(FormContext);
  const [prefix, defaultPrefix] = custom ? [bsCustomPrefix, 'custom'] : [bsPrefix, 'form-control'];
  bsPrefix = useBootstrapPrefix(prefix, defaultPrefix);
  let classes;
  if (plaintext) {
    classes = {
      [`${bsPrefix}-plaintext`]: true
    };
  } else if (type === 'file') {
    classes = {
      [`${bsPrefix}-file`]: true
    };
  } else if (type === 'range') {
    classes = {
      [`${bsPrefix}-range`]: true
    };
  } else if (Component === 'select' && custom) {
    classes = {
      [`${bsPrefix}-select`]: true,
      [`${bsPrefix}-select-${size}`]: size
    };
  } else {
    classes = {
      [bsPrefix]: true,
      [`${bsPrefix}-${size}`]: size
    };
  }
  process.env.NODE_ENV !== "production" ? warning(controlId == null || !id, '`controlId` is ignored on `<FormControl>` when `id` is specified.') : void 0;
  return /*#__PURE__*/_jsx(Component, {
    ...props,
    type: type,
    size: htmlSize,
    ref: ref,
    readOnly: readOnly,
    id: id || controlId,
    className: classNames(className, classes, isValid && `is-valid`, isInvalid && `is-invalid`)
  });
});
FormControl.displayName = 'FormControl';
export default Object.assign(FormControl, {
  Feedback
});