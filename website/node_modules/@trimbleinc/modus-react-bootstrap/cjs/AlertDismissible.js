"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.default = void 0;
var React = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _propTypesExtra = require("prop-types-extra");
var _useEventCallback = _interopRequireDefault(require("@restart/hooks/useEventCallback"));
var _Alert = _interopRequireDefault(require("./Alert"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/*!
  Modus React Bootstrap 
  A React-based component library developed as a common, open source platform for all of Trimbleâ€™s web applications built on React.
  Extends React-Bootstrap v1.6.5
  Copyright (c) 2022 Trimble Inc.
 */

const propTypes = {
  /**
   * @default 'alert'
   */
  bsPrefix: _propTypes.default.string,
  /**
   * The Alert visual variant
   *
   * @type {'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light'}
   */
  variant: _propTypes.default.string,
  /**
   * Controls the visual state of the Alert.
   *
   * @controllable onClose
   */
  show: _propTypes.default.bool,
  /**
   * Callback fired when alert is closed.
   *
   * @controllable show
   */
  onClose: _propTypes.default.func,
  /**
   * Sets the text for alert close button.
   */
  closeLabel: _propTypes.default.string,
  /**
   * Animate the alert dismissal. Defaults to using `<Fade>` animation or use
   * `false` to disable. A custom `react-transition-group` Transition can also
   * be provided.
   */
  transition: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypesExtra.elementType])
};
const AlertDismissible = /*#__PURE__*/(0, React.forwardRef)(({
  onClose: onCloseDismiss,
  ...props
}, ref) => {
  const [show, setShow] = (0, React.useState)(true);
  const handleClose = (0, _useEventCallback.default)((a, b) => {
    setShow(false);
    if (onCloseDismiss) {
      onCloseDismiss(a, b);
    }
  });
  const alert = /*#__PURE__*/(0, _jsxRuntime.jsx)(_Alert.default, {
    ...props,
    onClose: handleClose,
    ref: ref,
    dismissible: true,
    children: props.children
  });
  return show ? alert : null;
});
AlertDismissible.propTypes = propTypes;
AlertDismissible.displayName = 'AlertDismissible';
var _default = AlertDismissible;
exports.default = _default;
module.exports = exports.default;