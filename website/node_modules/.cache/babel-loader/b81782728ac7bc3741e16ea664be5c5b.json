{"ast":null,"code":"var _jsxFileName = \"/Users/ssakhilesha/Documents/GitHub/Masters-BDA-project/website /covid19india-react-master/src/components/DeltaBarGraph.js\",\n    _s = $RefreshSig$();\n\nimport { D3_TRANSITION_DURATION, STATISTIC_CONFIGS } from '../constants';\nimport { formatDate, formatNumber, getIndiaDateYesterdayISO, getStatistic } from '../utils/commonFunctions';\nimport { extent } from 'd3-array';\nimport { axisBottom } from 'd3-axis';\nimport { scaleBand, scaleLinear } from 'd3-scale';\nimport { select } from 'd3-selection';\nimport 'd3-transition';\nimport equal from 'fast-deep-equal';\nimport { memo, useCallback, useEffect, useRef } from 'react';\nimport { useMeasure } from 'react-use';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst margin = {\n  top: 50,\n  right: 0,\n  bottom: 50,\n  left: 0\n};\n\nfunction DeltaBarGraph({\n  timeseries,\n  statistic,\n  lookback\n}) {\n  _s();\n\n  const svgRef = useRef();\n  const [wrapperRef, {\n    width,\n    height\n  }] = useMeasure();\n  const pastDates = Object.keys(timeseries || {}).filter(date => date <= getIndiaDateYesterdayISO());\n  const dates = pastDates.slice(-lookback);\n  const getDeltaStatistic = useCallback((date, statistic) => {\n    return getStatistic(timeseries === null || timeseries === void 0 ? void 0 : timeseries[date], 'delta', statistic);\n  }, [timeseries]);\n  useEffect(() => {\n    if (!width) return;\n    const svg = select(svgRef.current);\n    const chartRight = width - margin.right;\n    const chartBottom = height - margin.bottom;\n    const r = 5; // const formatTime = timeFormat('%e %b');\n\n    const xScale = scaleBand().domain(dates).range([margin.left, chartRight]).paddingInner(width / 1000);\n    const [statisticMin, statisticMax] = extent(dates, date => getDeltaStatistic(date, statistic));\n    const yScale = scaleLinear().domain([Math.min(0, statisticMin || 0), Math.max(1, statisticMax || 0)]).range([chartBottom, margin.top]);\n    const xAxis = axisBottom(xScale).tickSize(0).tickFormat(date => formatDate(date, 'dd MMM'));\n    const t = svg.transition().duration(D3_TRANSITION_DURATION);\n    const statisticConfig = STATISTIC_CONFIGS[statistic];\n    svg.select('.x-axis').transition(t).style('transform', `translate3d(0, ${yScale(0)}px, 0)`).call(xAxis).on('start', () => svg.select('.domain').remove()).selectAll('text').attr('y', 0).attr('dy', (date, i) => getDeltaStatistic(date, statistic) < 0 ? '-1em' : '1.5em').style('text-anchor', 'middle').attr('fill', statisticConfig.color);\n    svg.selectAll('.bar').data(dates).join(enter => enter.append('path').attr('class', 'bar').attr('d', date => roundedBar(xScale(date), yScale(0), xScale.bandwidth(), 0, r))).transition(t).attr('d', date => roundedBar(xScale(date), yScale(0), xScale.bandwidth(), yScale(0) - yScale(getDeltaStatistic(date, statistic)), r)).attr('fill', (date, i) => {\n      return i < dates.length - 1 ? statisticConfig.color + '90' : statisticConfig.color;\n    });\n    const textSelection = svg.selectAll('.label').data(dates).join('text').attr('class', 'label').attr('x', date => xScale(date) + xScale.bandwidth() / 2).text(date => formatNumber(getDeltaStatistic(date, statistic), (statisticConfig === null || statisticConfig === void 0 ? void 0 : statisticConfig.showDelta) || (statisticConfig === null || statisticConfig === void 0 ? void 0 : statisticConfig.nonLinear) ? statisticConfig.format : 'short'));\n    textSelection.transition(t).attr('fill', statisticConfig.color).attr('y', date => {\n      const val = getDeltaStatistic(date, statistic);\n      return yScale(val) + (val < 0 ? 15 : -6);\n    });\n    textSelection.append('tspan').attr('dy', date => `${getDeltaStatistic(date, statistic) < 0 ? 1.2 : -1.2}em`).attr('x', date => xScale(date) + xScale.bandwidth() / 2).text((date, i) => {\n      if (i === 0) return '';\n      const prevVal = getDeltaStatistic(dates[i - 1], statistic);\n      if (!prevVal) return '';\n      const delta = getDeltaStatistic(date, statistic) - prevVal;\n      return `${delta > 0 ? '+' : ''}${formatNumber(100 * delta / Math.abs(prevVal), '%')}`;\n    }).transition(t).attr('fill', statisticConfig.color + '90');\n  }, [dates, height, statistic, width, getDeltaStatistic]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"DeltaBarGraph\",\n    ref: wrapperRef,\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef,\n      width: width,\n      height: 250,\n      viewBox: `0 0 ${width} ${height}`,\n      preserveAspectRatio: \"xMidYMid meet\",\n      children: [/*#__PURE__*/_jsxDEV(\"g\", {\n        className: \"x-axis\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n        className: \"y-axis\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 5\n  }, this);\n}\n\n_s(DeltaBarGraph, \"rN7RGN1LLB0CnZuaeg4Axghi/O4=\", false, function () {\n  return [useMeasure];\n});\n\n_c = DeltaBarGraph;\n\nconst isEqual = (prevProps, currProps) => {\n  if (currProps.forceRender) {\n    return false;\n  } else if (!currProps.timeseries && prevProps.timeseries) {\n    return true;\n  } else if (currProps.timeseries && !prevProps.timeseries) {\n    return false;\n  } else if (!equal(prevProps.stateCode, currProps.stateCode)) {\n    return false;\n  } else if (!equal(prevProps.lookback, currProps.lookback)) {\n    return false;\n  } else if (!equal(prevProps.statistic, currProps.statistic)) {\n    return false;\n  }\n\n  return true;\n};\n\nexport default _c2 = /*#__PURE__*/memo(DeltaBarGraph, isEqual);\n\nfunction roundedBar(x, y, w, h, r) {\n  r = Math.sign(h) * Math.min(Math.abs(h), r);\n  const paths = [`M ${x} ${y}`, `v ${-h + r}`, `q 0 ${-r} ${Math.abs(r)} ${-r}`, `h ${w - 2 * Math.abs(r)}`, `q ${Math.abs(r)} 0 ${Math.abs(r)} ${r}`, `v ${h - r}`, 'Z'];\n  return paths.join(' ');\n}\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"DeltaBarGraph\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/ssakhilesha/Documents/GitHub/Masters-BDA-project/website /covid19india-react-master/src/components/DeltaBarGraph.js"],"names":["D3_TRANSITION_DURATION","STATISTIC_CONFIGS","formatDate","formatNumber","getIndiaDateYesterdayISO","getStatistic","extent","axisBottom","scaleBand","scaleLinear","select","equal","memo","useCallback","useEffect","useRef","useMeasure","margin","top","right","bottom","left","DeltaBarGraph","timeseries","statistic","lookback","svgRef","wrapperRef","width","height","pastDates","Object","keys","filter","date","dates","slice","getDeltaStatistic","svg","current","chartRight","chartBottom","r","xScale","domain","range","paddingInner","statisticMin","statisticMax","yScale","Math","min","max","xAxis","tickSize","tickFormat","t","transition","duration","statisticConfig","style","call","on","remove","selectAll","attr","i","color","data","join","enter","append","roundedBar","bandwidth","length","textSelection","text","showDelta","nonLinear","format","val","prevVal","delta","abs","isEqual","prevProps","currProps","forceRender","stateCode","x","y","w","h","sign","paths"],"mappings":"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","sourcesContent":["import {D3_TRANSITION_DURATION, STATISTIC_CONFIGS} from '../constants';\nimport {\n  formatDate,\n  formatNumber,\n  getIndiaDateYesterdayISO,\n  getStatistic,\n} from '../utils/commonFunctions';\n\nimport {extent} from 'd3-array';\nimport {axisBottom} from 'd3-axis';\nimport {scaleBand, scaleLinear} from 'd3-scale';\nimport {select} from 'd3-selection';\nimport 'd3-transition';\nimport equal from 'fast-deep-equal';\nimport {memo, useCallback, useEffect, useRef} from 'react';\nimport {useMeasure} from 'react-use';\n\nconst margin = {top: 50, right: 0, bottom: 50, left: 0};\n\nfunction DeltaBarGraph({timeseries, statistic, lookback}) {\n  const svgRef = useRef();\n  const [wrapperRef, {width, height}] = useMeasure();\n\n  const pastDates = Object.keys(timeseries || {}).filter(\n    (date) => date <= getIndiaDateYesterdayISO()\n  );\n  const dates = pastDates.slice(-lookback);\n\n  const getDeltaStatistic = useCallback(\n    (date, statistic) => {\n      return getStatistic(timeseries?.[date], 'delta', statistic);\n    },\n    [timeseries]\n  );\n\n  useEffect(() => {\n    if (!width) return;\n    const svg = select(svgRef.current);\n\n    const chartRight = width - margin.right;\n    const chartBottom = height - margin.bottom;\n    const r = 5;\n\n    // const formatTime = timeFormat('%e %b');\n    const xScale = scaleBand()\n      .domain(dates)\n      .range([margin.left, chartRight])\n      .paddingInner(width / 1000);\n\n    const [statisticMin, statisticMax] = extent(dates, (date) =>\n      getDeltaStatistic(date, statistic)\n    );\n\n    const yScale = scaleLinear()\n      .domain([Math.min(0, statisticMin || 0), Math.max(1, statisticMax || 0)])\n      .range([chartBottom, margin.top]);\n\n    const xAxis = axisBottom(xScale)\n      .tickSize(0)\n      .tickFormat((date) => formatDate(date, 'dd MMM'));\n\n    const t = svg.transition().duration(D3_TRANSITION_DURATION);\n\n    const statisticConfig = STATISTIC_CONFIGS[statistic];\n\n    svg\n      .select('.x-axis')\n      .transition(t)\n      .style('transform', `translate3d(0, ${yScale(0)}px, 0)`)\n      .call(xAxis)\n      .on('start', () => svg.select('.domain').remove())\n      .selectAll('text')\n      .attr('y', 0)\n      .attr('dy', (date, i) =>\n        getDeltaStatistic(date, statistic) < 0 ? '-1em' : '1.5em'\n      )\n      .style('text-anchor', 'middle')\n      .attr('fill', statisticConfig.color);\n\n    svg\n      .selectAll('.bar')\n      .data(dates)\n      .join((enter) =>\n        enter\n          .append('path')\n          .attr('class', 'bar')\n          .attr('d', (date) =>\n            roundedBar(xScale(date), yScale(0), xScale.bandwidth(), 0, r)\n          )\n      )\n      .transition(t)\n      .attr('d', (date) =>\n        roundedBar(\n          xScale(date),\n          yScale(0),\n          xScale.bandwidth(),\n          yScale(0) - yScale(getDeltaStatistic(date, statistic)),\n          r\n        )\n      )\n      .attr('fill', (date, i) => {\n        return i < dates.length - 1\n          ? statisticConfig.color + '90'\n          : statisticConfig.color;\n      });\n\n    const textSelection = svg\n      .selectAll('.label')\n      .data(dates)\n      .join('text')\n      .attr('class', 'label')\n      .attr('x', (date) => xScale(date) + xScale.bandwidth() / 2)\n      .text((date) =>\n        formatNumber(\n          getDeltaStatistic(date, statistic),\n          statisticConfig?.showDelta || statisticConfig?.nonLinear\n            ? statisticConfig.format\n            : 'short'\n        )\n      );\n\n    textSelection\n      .transition(t)\n      .attr('fill', statisticConfig.color)\n      .attr('y', (date) => {\n        const val = getDeltaStatistic(date, statistic);\n        return yScale(val) + (val < 0 ? 15 : -6);\n      });\n\n    textSelection\n      .append('tspan')\n      .attr(\n        'dy',\n        (date) => `${getDeltaStatistic(date, statistic) < 0 ? 1.2 : -1.2}em`\n      )\n      .attr('x', (date) => xScale(date) + xScale.bandwidth() / 2)\n      .text((date, i) => {\n        if (i === 0) return '';\n        const prevVal = getDeltaStatistic(dates[i - 1], statistic);\n        if (!prevVal) return '';\n        const delta = getDeltaStatistic(date, statistic) - prevVal;\n        return `${delta > 0 ? '+' : ''}${formatNumber(\n          (100 * delta) / Math.abs(prevVal),\n          '%'\n        )}`;\n      })\n      .transition(t)\n      .attr('fill', statisticConfig.color + '90');\n  }, [dates, height, statistic, width, getDeltaStatistic]);\n\n  return (\n    <div className=\"DeltaBarGraph\" ref={wrapperRef}>\n      <svg\n        ref={svgRef}\n        width={width}\n        height={250}\n        viewBox={`0 0 ${width} ${height}`}\n        preserveAspectRatio=\"xMidYMid meet\"\n      >\n        <g className=\"x-axis\" />\n        <g className=\"y-axis\" />\n      </svg>\n    </div>\n  );\n}\n\nconst isEqual = (prevProps, currProps) => {\n  if (currProps.forceRender) {\n    return false;\n  } else if (!currProps.timeseries && prevProps.timeseries) {\n    return true;\n  } else if (currProps.timeseries && !prevProps.timeseries) {\n    return false;\n  } else if (!equal(prevProps.stateCode, currProps.stateCode)) {\n    return false;\n  } else if (!equal(prevProps.lookback, currProps.lookback)) {\n    return false;\n  } else if (!equal(prevProps.statistic, currProps.statistic)) {\n    return false;\n  }\n  return true;\n};\n\nexport default memo(DeltaBarGraph, isEqual);\n\nfunction roundedBar(x, y, w, h, r) {\n  r = Math.sign(h) * Math.min(Math.abs(h), r);\n  const paths = [\n    `M ${x} ${y}`,\n    `v ${-h + r}`,\n    `q 0 ${-r} ${Math.abs(r)} ${-r}`,\n    `h ${w - 2 * Math.abs(r)}`,\n    `q ${Math.abs(r)} 0 ${Math.abs(r)} ${r}`,\n    `v ${h - r}`,\n    'Z',\n  ];\n  return paths.join(' ');\n}\n"]},"metadata":{},"sourceType":"module"}