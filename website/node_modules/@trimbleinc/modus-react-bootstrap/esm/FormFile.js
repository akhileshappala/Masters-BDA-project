import classNames from 'classnames';
import React, { useContext, useMemo } from 'react';
import all from 'prop-types-extra/lib/all';
import Feedback from './Feedback';
import FormFileInput from './FormFileInput';
import FormFileLabel from './FormFileLabel';
import FormContext from './FormContext';
import { useBootstrapPrefix } from './ThemeProvider';
import { jsx as _jsx } from "react/jsx-runtime";
import { Fragment as _Fragment } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
const FormFile = /*#__PURE__*/React.forwardRef(({
  id,
  bsPrefix,
  bsCustomPrefix,
  disabled = false,
  isValid = false,
  isInvalid = false,
  feedbackTooltip = false,
  feedback,
  className,
  style,
  label,
  children,
  custom,
  lang,
  'data-browse': dataBrowse,
  // Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
  as: Component = 'div',
  inputAs = 'input',
  ...props
}, ref) => {
  const [prefix, defaultPrefix] = custom ? [bsCustomPrefix, 'custom'] : [bsPrefix, 'form-file'];
  bsPrefix = useBootstrapPrefix(prefix, defaultPrefix);
  const type = 'file';
  const {
    controlId
  } = useContext(FormContext);
  const innerFormContext = useMemo(() => ({
    controlId: id || controlId,
    custom
  }), [controlId, custom, id]);
  const hasLabel = label != null && label !== false && !children;
  const input = /*#__PURE__*/_jsx(FormFileInput, {
    ...props,
    ref: ref,
    isValid: isValid,
    isInvalid: isInvalid,
    disabled: disabled,
    as: inputAs,
    lang: lang
  });
  return /*#__PURE__*/_jsx(FormContext.Provider, {
    value: innerFormContext,
    children: /*#__PURE__*/_jsx(Component, {
      style: style,
      className: classNames(className, bsPrefix, custom && `custom-${type}`),
      children: children || /*#__PURE__*/_jsxs(_Fragment, {
        children: [custom ? /*#__PURE__*/_jsxs(_Fragment, {
          children: [input, hasLabel && /*#__PURE__*/_jsx(FormFileLabel, {
            "data-browse": dataBrowse,
            children: label
          })]
        }) : /*#__PURE__*/_jsxs(_Fragment, {
          children: [hasLabel && /*#__PURE__*/_jsx(FormFileLabel, {
            children: label
          }), input]
        }), (isValid || isInvalid) && /*#__PURE__*/_jsx(Feedback, {
          type: isValid ? 'valid' : 'invalid',
          tooltip: feedbackTooltip,
          children: feedback
        })]
      })
    })
  });
});
FormFile.displayName = 'FormFile';
FormFile.Input = FormFileInput;
FormFile.Label = FormFileLabel;
export default FormFile;