"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _Dropdown = _interopRequireDefault(require("./Dropdown"));
var _Form = _interopRequireDefault(require("./Form"));
var _NavItem = _interopRequireDefault(require("./NavItem"));
var _NavLink = _interopRequireDefault(require("./NavLink"));
var _Pagination = _interopRequireDefault(require("./Pagination"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/*!
  Modus React Bootstrap 
  A React-based component library developed as a common, open source platform for all of Trimbleâ€™s web applications built on React.
  Extends React-Bootstrap v1.6.5
  Copyright (c) 2022 Trimble Inc.
 */

const getRange = (start, end) => {
  /* generate a range : [start, start+1, ..., end-1, end] */
  const len = end - start + 1;
  const a = new Array(len);
  for (let i = 0; i < len; i++) a[i] = start + i;
  return a;
};
const getPaginationGroup = (currentPage, totalPages, pageLimit = 5) => {
  const start = Math.floor((currentPage - 1) / pageLimit) * pageLimit;
  const len = totalPages < Math.ceil(currentPage / pageLimit) * pageLimit ? totalPages % pageLimit : pageLimit;
  return new Array(len).fill(0).map((_, idx) => start + idx + 1);
};
const PagesDropdown = ({
  pages,
  onPageSelection,
  ...props
}) => /*#__PURE__*/(0, _jsxRuntime.jsxs)(_Dropdown.default, {
  as: _NavItem.default,
  ...props,
  children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_Dropdown.default.Toggle, {
    as: _NavLink.default,
    variant: "text-primary",
    bsPrefix: "",
    children: /*#__PURE__*/(0, _jsxRuntime.jsx)("i", {
      className: "modus-icons",
      children: "more_horizontal"
    })
  }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_Dropdown.default.Menu, {
    className: "dropdown-menu-sm",
    style: {
      minWidth: '5rem'
    },
    children: pages.map(item => /*#__PURE__*/(0, _jsxRuntime.jsx)(_Dropdown.default.Item, {
      onClick: () => {
        onPageSelection(item);
      },
      children: item
    }, item))
  })]
});
const TablePagination = /*#__PURE__*/_react.default.forwardRef(({
  count,
  pageIndex,
  onPageChange,
  pageSize,
  pageSizeOptions,
  onPageSizeChange,
  pageLimit = 5,
  className,
  size,
  ...props
}, ref) => {
  const totalPages = Math.ceil(count / pageSize);
  const paginationGroup = getPaginationGroup(pageIndex + 1, totalPages || 1, pageLimit);
  const firstPage = paginationGroup[0];
  const lastPage = paginationGroup[paginationGroup.length - 1];
  const morePagesLeft = firstPage > 1 && getRange(1, firstPage - 1);
  const morePagesRight = totalPages > 0 && lastPage !== totalPages && getRange(lastPage + 1, totalPages);
  const handlePreviousPage = (0, _react.useCallback)(() => {
    onPageChange(pageIndex - 1);
  }, [pageIndex, onPageChange]);
  const handleNextPage = (0, _react.useCallback)(() => {
    onPageChange(pageIndex + 1);
  }, [pageIndex, onPageChange]);
  const handleGotoPage = (0, _react.useCallback)(page => {
    onPageChange(page - 1);
  }, [onPageChange]);
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
    className: (0, _classnames.default)(className, 'mrb-table-pagination d-flex justify-content-end  w-100'),
    ...props,
    ref: ref,
    "aria-label": "Table pagination",
    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      className: "mr-2",
      "aria-label": "Page size options",
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Form.default, {
        inline: true,
        children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(_Form.default.Group, {
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_Form.default.Label, {
            className: (0, _classnames.default)('mr-2', size === 'sm' ? 'label-sm' : 'label-lg'),
            children: "Page Size:"
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_Form.default.Control, {
            size: size,
            as: "select",
            custom: true,
            value: pageSize,
            onChange: e => {
              onPageSizeChange(Number(e.target.value));
            },
            "aria-label": "Select Page size",
            children: pageSizeOptions.map(option => /*#__PURE__*/(0, _jsxRuntime.jsx)("option", {
              value: option,
              children: option
            }, option))
          })]
        })
      })
    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)("nav", {
        "aria-label": "Pagination",
        children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(_Pagination.default, {
          className: "mb-0",
          size: size,
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_Pagination.default.Item, {
            disabled: pageIndex === 0,
            onClick: handlePreviousPage,
            "aria-label": "Previous",
            role: "button",
            children: /*#__PURE__*/(0, _jsxRuntime.jsx)("i", {
              className: "modus-icons",
              children: "chevron_left"
            })
          }), morePagesLeft && /*#__PURE__*/(0, _jsxRuntime.jsx)(_Pagination.default.Item, {
            as: "div",
            className: "p-0",
            "aria-label": "Go to previous pages",
            role: "button",
            children: /*#__PURE__*/(0, _jsxRuntime.jsx)(PagesDropdown, {
              pages: morePagesLeft,
              onPageSelection: handleGotoPage
            })
          }), paginationGroup.map(item => {
            const isActivePage = item === pageIndex + 1;
            return /*#__PURE__*/(0, _jsxRuntime.jsx)(_Pagination.default.Item, {
              active: isActivePage,
              "aria-current": isActivePage ? 'page' : undefined,
              onClick: () => {
                handleGotoPage(item);
              },
              "aria-label": `Page number ${pageIndex + 1}`,
              role: "button",
              children: item
            }, item);
          }), morePagesRight && /*#__PURE__*/(0, _jsxRuntime.jsx)(_Pagination.default.Item, {
            as: "div",
            className: "p-0",
            "aria-label": "Go to next pages",
            role: "button",
            children: /*#__PURE__*/(0, _jsxRuntime.jsx)(PagesDropdown, {
              pages: morePagesRight,
              onPageSelection: handleGotoPage
            })
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_Pagination.default.Item, {
            disabled: pageIndex + 1 === totalPages,
            onClick: handleNextPage,
            "aria-label": "Next",
            role: "button",
            children: /*#__PURE__*/(0, _jsxRuntime.jsx)("i", {
              className: "modus-icons",
              children: "chevron_right"
            })
          })]
        })
      })
    })]
  });
});
TablePagination.displayName = 'TablePagination';
var _default = TablePagination;
exports.default = _default;
module.exports = exports.default;