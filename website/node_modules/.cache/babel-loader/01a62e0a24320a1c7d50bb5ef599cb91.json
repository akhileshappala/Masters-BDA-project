{"ast":null,"code":"import _slicedToArray from\"/Users/ssakhilesha/Documents/GitHub/Masters-BDA-project/website/covid19/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useState,useEffect}from'react';var OPTIONS={root:null,rootMargin:'0px 0px 0px 0px',threshold:0};var useIsVisible=function useIsVisible(elementRef){var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isVisible=_useState2[0],setIsVisible=_useState2[1];useEffect(function(){if(elementRef.current){var observer=new IntersectionObserver(function(entries,observer){entries.forEach(function(entry){if(entry.isIntersecting){setIsVisible(true);observer.unobserve(elementRef.current);}});},OPTIONS);observer.observe(elementRef.current);}},[elementRef]);return isVisible;};export default useIsVisible;","map":{"version":3,"sources":["/Users/ssakhilesha/Documents/GitHub/Masters-BDA-project/website/covid19/src/hooks/useIsVisible.js"],"names":["useState","useEffect","OPTIONS","root","rootMargin","threshold","useIsVisible","elementRef","isVisible","setIsVisible","current","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","unobserve","observe"],"mappings":"8LAAA,OAAQA,QAAR,CAAkBC,SAAlB,KAAkC,OAAlC,CAEA,GAAMC,CAAAA,OAAO,CAAG,CACdC,IAAI,CAAE,IADQ,CAEdC,UAAU,CAAE,iBAFE,CAGdC,SAAS,CAAE,CAHG,CAAhB,CAMA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,UAAD,CAAgB,CACnC,cAAkCP,QAAQ,CAAC,KAAD,CAA1C,wCAAOQ,SAAP,eAAkBC,YAAlB,eAEAR,SAAS,CAAC,UAAM,CACd,GAAIM,UAAU,CAACG,OAAf,CAAwB,CACtB,GAAMC,CAAAA,QAAQ,CAAG,GAAIC,CAAAA,oBAAJ,CAAyB,SAACC,OAAD,CAAUF,QAAV,CAAuB,CAC/DE,OAAO,CAACC,OAAR,CAAgB,SAACC,KAAD,CAAW,CACzB,GAAIA,KAAK,CAACC,cAAV,CAA0B,CACxBP,YAAY,CAAC,IAAD,CAAZ,CACAE,QAAQ,CAACM,SAAT,CAAmBV,UAAU,CAACG,OAA9B,EACD,CACF,CALD,EAMD,CAPgB,CAOdR,OAPc,CAAjB,CAQAS,QAAQ,CAACO,OAAT,CAAiBX,UAAU,CAACG,OAA5B,EACD,CACF,CAZQ,CAYN,CAACH,UAAD,CAZM,CAAT,CAcA,MAAOC,CAAAA,SAAP,CACD,CAlBD,CAoBA,cAAeF,CAAAA,YAAf","sourcesContent":["import {useState, useEffect} from 'react';\n\nconst OPTIONS = {\n  root: null,\n  rootMargin: '0px 0px 0px 0px',\n  threshold: 0,\n};\n\nconst useIsVisible = (elementRef) => {\n  const [isVisible, setIsVisible] = useState(false);\n\n  useEffect(() => {\n    if (elementRef.current) {\n      const observer = new IntersectionObserver((entries, observer) => {\n        entries.forEach((entry) => {\n          if (entry.isIntersecting) {\n            setIsVisible(true);\n            observer.unobserve(elementRef.current);\n          }\n        });\n      }, OPTIONS);\n      observer.observe(elementRef.current);\n    }\n  }, [elementRef]);\n\n  return isVisible;\n};\n\nexport default useIsVisible;\n"]},"metadata":{},"sourceType":"module"}