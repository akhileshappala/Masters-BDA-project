{"ast":null,"code":"var _jsxFileName = \"/Users/ssakhilesha/Documents/GitHub/Masters-BDA-project/website /covid19india-react-master/src/components/StateMeta.js\",\n    _s = $RefreshSig$();\n\nimport StateMetaCard from './StateMetaCard';\nimport { STATE_NAMES } from '../constants';\nimport { formatDate, formatNumber, formatLastUpdated, getStatistic, getIndiaDateYesterdayISO, parseIndiaDate } from '../utils/commonFunctions';\nimport { formatISO, subDays } from 'date-fns';\nimport { memo } from 'react';\nimport { Compass } from 'react-feather';\nimport { useTranslation } from 'react-i18next';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Fraction({\n  numerator,\n  denominator\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"frac\",\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      children: numerator\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"bottom\",\n      children: denominator\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n}\n\n_c = Fraction;\n\nfunction StateMeta({\n  stateCode,\n  data,\n  timeseries\n}) {\n  _s();\n\n  var _data$stateCode, _data$stateCode$meta, _data$stateCode2, _data$stateCode2$meta, _data$stateCode2$meta2;\n\n  const {\n    t\n  } = useTranslation();\n  const confirmedPerLakh = getStatistic(data[stateCode], 'total', 'confirmed', {\n    normalizedByPopulationPer: 'lakh'\n  });\n  const testPerLakh = getStatistic(data[stateCode], 'total', 'tested', {\n    normalizedByPopulationPer: 'lakh'\n  });\n  const totalConfirmedPerLakh = getStatistic(data['TT'], 'total', 'confirmed', {\n    normalizedByPopulationPer: 'lakh'\n  });\n  const activePercent = getStatistic(data[stateCode], 'total', 'activeRatio');\n  const recoveryPercent = getStatistic(data[stateCode], 'total', 'recoveryRatio');\n  const deathPercent = getStatistic(data[stateCode], 'total', 'cfr'); // Show TPR for week preceeding last updated date\n\n  const pastDates = Object.keys(timeseries || {}).filter(date => date <= getIndiaDateYesterdayISO());\n  const lastDate = pastDates[pastDates.length - 1];\n  const prevWeekDate = formatISO(subDays(parseIndiaDate(lastDate), 6));\n  const tprWeek = getStatistic(timeseries === null || timeseries === void 0 ? void 0 : timeseries[lastDate], 'delta', 'tpr', {\n    movingAverage: true\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"StateMeta population\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"meta-item population\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: t('Population')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: formatNumber((_data$stateCode = data[stateCode]) === null || _data$stateCode === void 0 ? void 0 : (_data$stateCode$meta = _data$stateCode.meta) === null || _data$stateCode$meta === void 0 ? void 0 : _data$stateCode$meta.population)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"alert\",\n        children: [/*#__PURE__*/_jsxDEV(Compass, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"alert-right\",\n          children: [t('Based on 2019 population projection by NCP'), /*#__PURE__*/_jsxDEV(\"a\", {\n            href: \"https://nhm.gov.in/New_Updates_2018/Report_Population_Projection_2019.pdf\",\n            target: \"_noblank\",\n            children: \"report\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"StateMeta\",\n      children: [/*#__PURE__*/_jsxDEV(StateMetaCard, {\n        className: \"confirmed\",\n        title: t('Confirmed Per Lakh'),\n        statistic: formatNumber(confirmedPerLakh),\n        total: formatNumber(totalConfirmedPerLakh),\n        formula: /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [`${1e5} x `, /*#__PURE__*/_jsxDEV(Fraction, {\n            numerator: t('Total confirmed cases'),\n            denominator: t('Total population')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true),\n        description: `\n            ~${formatNumber(confirmedPerLakh, 'long')} ${t('out of every lakh people in')} ${STATE_NAMES[stateCode]} ${t('have tested positive for the virus.')}\n            `\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StateMetaCard, {\n        className: \"active\",\n        title: t('Active Ratio'),\n        statistic: `${formatNumber(activePercent, '%')}`,\n        formula: /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: ['100 x ', /*#__PURE__*/_jsxDEV(Fraction, {\n            numerator: t('Total active cases right now'),\n            denominator: t('Total confirmed cases')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true),\n        description: activePercent > 0 ? `${t('For every 100 confirmed cases')}, ~${formatNumber(activePercent, 'long')} ${t('are currently infected.')}` : t('Currently, there are no active cases in this state.')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StateMetaCard, {\n        className: \"recovery\",\n        title: t('Recovery Ratio'),\n        statistic: `${formatNumber(recoveryPercent, '%')}`,\n        formula: /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: ['100 x ', /*#__PURE__*/_jsxDEV(Fraction, {\n            numerator: t('Total recovered cases'),\n            denominator: t('Total confirmed cases')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true),\n        description: recoveryPercent > 0 ? `${t('For every 100 confirmed cases')}, ~${formatNumber(recoveryPercent, 'long')} ${t('have recovered from the virus.')}` : t('Unfortunately, there are no recoveries in this state yet.')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StateMetaCard, {\n        className: \"mortality\",\n        title: t('Case Fatality Ratio'),\n        statistic: `${formatNumber(deathPercent, '%')}`,\n        formula: /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: ['100 x ', /*#__PURE__*/_jsxDEV(Fraction, {\n            numerator: t('Total deaths'),\n            denominator: t('Total confirmed cases')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true),\n        description: deathPercent > 0 ? `${t('For every 100 confirmed cases')}, ~${formatNumber(deathPercent, 'long')} ${t('have unfortunately passed away from the virus.')}` : t('Fortunately, no one has passed away from the virus in this state.')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StateMetaCard, {\n        className: \"tpr\",\n        title: t('Test Positivity Ratio'),\n        statistic: tprWeek > 0 ? `${formatNumber(tprWeek, '%')}` : '-',\n        formula: /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: ['100 x ', /*#__PURE__*/_jsxDEV(Fraction, {\n            numerator: t('Confirmed cases last week'),\n            denominator: t('Samples tested last week')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true),\n        date: `${formatDate(prevWeekDate, 'dd MMM')} - ${formatDate(lastDate, 'dd MMM')}`,\n        description: tprWeek > 0 ? `${t('In the last one week,')} ${formatNumber(tprWeek, '%')}\n              ${t('of samples tested came back positive.')}` : t('No tested sample came back positive in last one week.')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StateMetaCard, {\n        className: \"tpl\",\n        title: t('Tests Per Lakh'),\n        statistic: `${formatNumber(testPerLakh)}`,\n        formula: /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [`${1e5} x `, /*#__PURE__*/_jsxDEV(Fraction, {\n            numerator: t('Total samples tested'),\n            denominator: t('Total population')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true),\n        date: testPerLakh && ((_data$stateCode2 = data[stateCode]) === null || _data$stateCode2 === void 0 ? void 0 : (_data$stateCode2$meta = _data$stateCode2.meta) === null || _data$stateCode2$meta === void 0 ? void 0 : (_data$stateCode2$meta2 = _data$stateCode2$meta.tested) === null || _data$stateCode2$meta2 === void 0 ? void 0 : _data$stateCode2$meta2.date) ? `${t('As of')} ${formatLastUpdated(data[stateCode].meta.tested.date)} ${t('ago')}` : '',\n        description: testPerLakh > 0 ? `${t('For every lakh people in')} ${STATE_NAMES[stateCode]},\n                ~${formatNumber(testPerLakh, 'long')} ${t('samples were tested.')}` : t('No tests have been conducted in this state yet.')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(StateMeta, \"gd9tD1Fko1+/JEDsx4Y3zF0xCps=\", false, function () {\n  return [useTranslation];\n});\n\n_c2 = StateMeta;\n\nconst isEqual = (prevProps, currProps) => {\n  if (currProps.timeseries && !prevProps.timeseries) {\n    return false;\n  } else if (prevProps.stateCode !== currProps.stateCode) {\n    return false;\n  }\n\n  return true;\n};\n\nexport default _c3 = /*#__PURE__*/memo(StateMeta, isEqual);\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Fraction\");\n$RefreshReg$(_c2, \"StateMeta\");\n$RefreshReg$(_c3, \"%default%\");","map":{"version":3,"sources":["/Users/ssakhilesha/Documents/GitHub/Masters-BDA-project/website /covid19india-react-master/src/components/StateMeta.js"],"names":["StateMetaCard","STATE_NAMES","formatDate","formatNumber","formatLastUpdated","getStatistic","getIndiaDateYesterdayISO","parseIndiaDate","formatISO","subDays","memo","Compass","useTranslation","Fraction","numerator","denominator","StateMeta","stateCode","data","timeseries","t","confirmedPerLakh","normalizedByPopulationPer","testPerLakh","totalConfirmedPerLakh","activePercent","recoveryPercent","deathPercent","pastDates","Object","keys","filter","date","lastDate","length","prevWeekDate","tprWeek","movingAverage","meta","population","tested","isEqual","prevProps","currProps"],"mappings":"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","sourcesContent":["import StateMetaCard from './StateMetaCard';\n\nimport {STATE_NAMES} from '../constants';\nimport {\n  formatDate,\n  formatNumber,\n  formatLastUpdated,\n  getStatistic,\n  getIndiaDateYesterdayISO,\n  parseIndiaDate,\n} from '../utils/commonFunctions';\n\nimport {formatISO, subDays} from 'date-fns';\nimport {memo} from 'react';\nimport {Compass} from 'react-feather';\nimport {useTranslation} from 'react-i18next';\n\nfunction Fraction({numerator, denominator}) {\n  return (\n    <div className=\"frac\">\n      <span>{numerator}</span>\n      <span className=\"bottom\">{denominator}</span>\n    </div>\n  );\n}\n\nfunction StateMeta({stateCode, data, timeseries}) {\n  const {t} = useTranslation();\n\n  const confirmedPerLakh = getStatistic(data[stateCode], 'total', 'confirmed', {\n    normalizedByPopulationPer: 'lakh',\n  });\n  const testPerLakh = getStatistic(data[stateCode], 'total', 'tested', {\n    normalizedByPopulationPer: 'lakh',\n  });\n  const totalConfirmedPerLakh = getStatistic(data['TT'], 'total', 'confirmed', {\n    normalizedByPopulationPer: 'lakh',\n  });\n\n  const activePercent = getStatistic(data[stateCode], 'total', 'activeRatio');\n  const recoveryPercent = getStatistic(\n    data[stateCode],\n    'total',\n    'recoveryRatio'\n  );\n  const deathPercent = getStatistic(data[stateCode], 'total', 'cfr');\n\n  // Show TPR for week preceeding last updated date\n  const pastDates = Object.keys(timeseries || {}).filter(\n    (date) => date <= getIndiaDateYesterdayISO()\n  );\n  const lastDate = pastDates[pastDates.length - 1];\n  const prevWeekDate = formatISO(subDays(parseIndiaDate(lastDate), 6));\n\n  const tprWeek = getStatistic(timeseries?.[lastDate], 'delta', 'tpr', {\n    movingAverage: true,\n  });\n\n  return (\n    <>\n      <div className=\"StateMeta population\">\n        <div className=\"meta-item population\">\n          <h3>{t('Population')}</h3>\n          <h1>{formatNumber(data[stateCode]?.meta?.population)}</h1>\n        </div>\n        <div className=\"alert\">\n          <Compass />\n          <div className=\"alert-right\">\n            {t('Based on 2019 population projection by NCP')}\n            <a\n              href=\"https://nhm.gov.in/New_Updates_2018/Report_Population_Projection_2019.pdf\"\n              target=\"_noblank\"\n            >\n              report\n            </a>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"StateMeta\">\n        <StateMetaCard\n          className=\"confirmed\"\n          title={t('Confirmed Per Lakh')}\n          statistic={formatNumber(confirmedPerLakh)}\n          total={formatNumber(totalConfirmedPerLakh)}\n          formula={\n            <>\n              {`${1e5} x `}\n              <Fraction\n                numerator={t('Total confirmed cases')}\n                denominator={t('Total population')}\n              />\n            </>\n          }\n          description={`\n            ~${formatNumber(confirmedPerLakh, 'long')} ${t(\n            'out of every lakh people in'\n          )} ${STATE_NAMES[stateCode]} ${t(\n            'have tested positive for the virus.'\n          )}\n            `}\n        />\n\n        <StateMetaCard\n          className=\"active\"\n          title={t('Active Ratio')}\n          statistic={`${formatNumber(activePercent, '%')}`}\n          formula={\n            <>\n              {'100 x '}\n              <Fraction\n                numerator={t('Total active cases right now')}\n                denominator={t('Total confirmed cases')}\n              />\n            </>\n          }\n          description={\n            activePercent > 0\n              ? `${t('For every 100 confirmed cases')}, ~${formatNumber(\n                  activePercent,\n                  'long'\n                )} ${t('are currently infected.')}`\n              : t('Currently, there are no active cases in this state.')\n          }\n        />\n\n        <StateMetaCard\n          className=\"recovery\"\n          title={t('Recovery Ratio')}\n          statistic={`${formatNumber(recoveryPercent, '%')}`}\n          formula={\n            <>\n              {'100 x '}\n              <Fraction\n                numerator={t('Total recovered cases')}\n                denominator={t('Total confirmed cases')}\n              />\n            </>\n          }\n          description={\n            recoveryPercent > 0\n              ? `${t('For every 100 confirmed cases')}, ~${formatNumber(\n                  recoveryPercent,\n                  'long'\n                )} ${t('have recovered from the virus.')}`\n              : t('Unfortunately, there are no recoveries in this state yet.')\n          }\n        />\n\n        <StateMetaCard\n          className=\"mortality\"\n          title={t('Case Fatality Ratio')}\n          statistic={`${formatNumber(deathPercent, '%')}`}\n          formula={\n            <>\n              {'100 x '}\n              <Fraction\n                numerator={t('Total deaths')}\n                denominator={t('Total confirmed cases')}\n              />\n            </>\n          }\n          description={\n            deathPercent > 0\n              ? `${t('For every 100 confirmed cases')}, ~${formatNumber(\n                  deathPercent,\n                  'long'\n                )} ${t('have unfortunately passed away from the virus.')}`\n              : t(\n                  'Fortunately, no one has passed away from the virus in this state.'\n                )\n          }\n        />\n\n        <StateMetaCard\n          className=\"tpr\"\n          title={t('Test Positivity Ratio')}\n          statistic={tprWeek > 0 ? `${formatNumber(tprWeek, '%')}` : '-'}\n          formula={\n            <>\n              {'100 x '}\n              <Fraction\n                numerator={t('Confirmed cases last week')}\n                denominator={t('Samples tested last week')}\n              />\n            </>\n          }\n          date={`${formatDate(prevWeekDate, 'dd MMM')} - ${formatDate(\n            lastDate,\n            'dd MMM'\n          )}`}\n          description={\n            tprWeek > 0\n              ? `${t('In the last one week,')} ${formatNumber(tprWeek, '%')}\n              ${t('of samples tested came back positive.')}`\n              : t('No tested sample came back positive in last one week.')\n          }\n        />\n\n        <StateMetaCard\n          className=\"tpl\"\n          title={t('Tests Per Lakh')}\n          statistic={`${formatNumber(testPerLakh)}`}\n          formula={\n            <>\n              {`${1e5} x `}\n              <Fraction\n                numerator={t('Total samples tested')}\n                denominator={t('Total population')}\n              />\n            </>\n          }\n          date={\n            testPerLakh && data[stateCode]?.meta?.tested?.date\n              ? `${t('As of')} ${formatLastUpdated(\n                  data[stateCode].meta.tested.date\n                )} ${t('ago')}`\n              : ''\n          }\n          description={\n            testPerLakh > 0\n              ? `${t('For every lakh people in')} ${STATE_NAMES[stateCode]},\n                ~${formatNumber(testPerLakh, 'long')} ${t(\n                  'samples were tested.'\n                )}`\n              : t('No tests have been conducted in this state yet.')\n          }\n        />\n      </div>\n    </>\n  );\n}\n\nconst isEqual = (prevProps, currProps) => {\n  if (currProps.timeseries && !prevProps.timeseries) {\n    return false;\n  } else if (prevProps.stateCode !== currProps.stateCode) {\n    return false;\n  }\n  return true;\n};\n\nexport default memo(StateMeta, isEqual);\n"]},"metadata":{},"sourceType":"module"}