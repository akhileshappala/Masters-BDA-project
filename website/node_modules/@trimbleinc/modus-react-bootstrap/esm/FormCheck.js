import classNames from 'classnames';
import all from 'prop-types-extra/lib/all';
import React, { useContext, useMemo } from 'react';
import Feedback from './Feedback';
import FormCheckInput from './FormCheckInput';
import FormCheckLabel from './FormCheckLabel';
import FormContext from './FormContext';
import { useBootstrapPrefix } from './ThemeProvider';
import { jsx as _jsx } from "react/jsx-runtime";
import { Fragment as _Fragment } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
const FormCheck = /*#__PURE__*/React.forwardRef(({
  id,
  bsPrefix,
  bsCustomPrefix,
  inline = false,
  disabled = false,
  isValid = false,
  isInvalid = false,
  feedbackTooltip = false,
  feedback,
  className,
  style,
  title = '',
  type = 'checkbox',
  label,
  children,
  custom: propCustom,
  // Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
  as = 'input',
  ...props
}, ref) => {
  const custom = type === 'switch' ? true : propCustom;
  const [prefix, defaultPrefix] = custom ? [bsCustomPrefix, 'custom-control'] : [bsPrefix, 'form-check'];
  bsPrefix = useBootstrapPrefix(prefix, defaultPrefix);
  const {
    controlId
  } = useContext(FormContext);
  const innerFormContext = useMemo(() => ({
    controlId: id || controlId,
    custom
  }), [controlId, custom, id]);
  const hasLabel = custom || label != null && label !== false && !children;
  const input = /*#__PURE__*/_jsx(FormCheckInput, {
    ...props,
    type: type === 'switch' ? 'checkbox' : type,
    ref: ref,
    isValid: isValid,
    isInvalid: isInvalid,
    isStatic: !hasLabel,
    disabled: disabled,
    as: as
  });
  return /*#__PURE__*/_jsx(FormContext.Provider, {
    value: innerFormContext,
    children: /*#__PURE__*/_jsx("div", {
      style: style,
      className: classNames(className, bsPrefix, custom && `custom-${type}`, inline && `${bsPrefix}-inline`),
      children: children || /*#__PURE__*/_jsxs(_Fragment, {
        children: [input, hasLabel && /*#__PURE__*/_jsx(FormCheckLabel, {
          title: title,
          children: label
        }), (isValid || isInvalid) && /*#__PURE__*/_jsx(Feedback, {
          type: isValid ? 'valid' : 'invalid',
          tooltip: feedbackTooltip,
          children: feedback
        })]
      })
    })
  });
});
FormCheck.displayName = 'FormCheck';
FormCheck.Input = FormCheckInput;
FormCheck.Label = FormCheckLabel;
export default FormCheck;