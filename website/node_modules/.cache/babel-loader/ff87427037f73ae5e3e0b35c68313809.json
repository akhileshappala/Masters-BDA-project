{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useForkRef as useForkRef, unstable_useId as useId, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport useButton from '../useButton';\nimport { SelectActionTypes } from './useSelect.types';\nimport useList from '../useList';\nimport defaultOptionStringifier from './defaultOptionStringifier';\nimport { useCompoundParent } from '../utils/useCompound';\nimport selectReducer from './selectReducer';\n/**\n *\n * Demos:\n *\n * - [Select](https://mui.com/base/react-select/#hooks)\n *\n * API:\n *\n * - [useSelect API](https://mui.com/base/react-select/hooks-api/#use-select)\n */\n\nfunction useSelect(props) {\n  const {\n    buttonRef: buttonRefProp,\n    defaultOpen = false,\n    defaultValue: defaultValueProp,\n    disabled = false,\n    listboxId: listboxIdProp,\n    listboxRef: listboxRefProp,\n    multiple = false,\n    onChange,\n    onHighlightChange,\n    onOpenChange,\n    open: openProp,\n    options: optionsParam,\n    optionStringifier = defaultOptionStringifier,\n    value: valueProp\n  } = props;\n  const buttonRef = React.useRef(null);\n  const handleButtonRef = useForkRef(buttonRefProp, buttonRef);\n  const listboxRef = React.useRef(null);\n  const listboxId = useId(listboxIdProp);\n  let defaultValue;\n\n  if (valueProp === undefined && defaultValueProp === undefined) {\n    defaultValue = [];\n  } else if (defaultValueProp !== undefined) {\n    defaultValue = multiple ? defaultValueProp : [defaultValueProp];\n  }\n\n  const value = React.useMemo(() => {\n    if (valueProp !== undefined) {\n      return multiple ? valueProp : [valueProp];\n    }\n\n    return undefined;\n  }, [valueProp, multiple]);\n  const {\n    subitems,\n    contextValue: compoundComponentContextValue\n  } = useCompoundParent();\n  const options = React.useMemo(() => {\n    if (optionsParam != null) {\n      return new Map(optionsParam.map((option, index) => [option.value, {\n        value: option.value,\n        label: option.label,\n        disabled: option.disabled,\n        ref: /*#__PURE__*/React.createRef(),\n        id: `${listboxId}_${index}`\n      }]));\n    }\n\n    return subitems;\n  }, [optionsParam, subitems, listboxId]); // prevents closing the listbox on keyUp right after opening it\n\n  const ignoreEnterKeyUp = React.useRef(false); // prevents reopening the listbox when button is clicked\n  // (listbox closes on lost focus, then immediately reopens on click)\n\n  const ignoreClick = React.useRef(false); // Ensure the listbox is focused after opening\n\n  const [listboxFocusRequested, requestListboxFocus] = React.useState(false);\n  const focusListboxIfRequested = React.useCallback(() => {\n    if (listboxFocusRequested && listboxRef.current != null) {\n      listboxRef.current.focus();\n      requestListboxFocus(false);\n    }\n  }, [listboxFocusRequested]);\n  const handleListboxRef = useForkRef(listboxRefProp, listboxRef, focusListboxIfRequested);\n  const {\n    getRootProps: getButtonRootProps,\n    active: buttonActive,\n    focusVisible: buttonFocusVisible,\n    rootRef: mergedButtonRef\n  } = useButton({\n    disabled,\n    rootRef: handleButtonRef\n  });\n  const optionValues = React.useMemo(() => Array.from(options.keys()), [options]);\n  const isItemDisabled = React.useCallback(valueToCheck => {\n    var _option$disabled;\n\n    const option = options.get(valueToCheck);\n    return (_option$disabled = option == null ? void 0 : option.disabled) != null ? _option$disabled : false;\n  }, [options]);\n  const stringifyOption = React.useCallback(valueToCheck => {\n    const option = options.get(valueToCheck);\n\n    if (!option) {\n      return '';\n    }\n\n    return optionStringifier(option);\n  }, [options, optionStringifier]);\n  const controlledState = React.useMemo(() => ({\n    selectedValues: value,\n    open: openProp\n  }), [value, openProp]);\n  const getItemId = React.useCallback(itemValue => {\n    var _options$get;\n\n    return (_options$get = options.get(itemValue)) == null ? void 0 : _options$get.id;\n  }, [options]);\n  const handleSelectionChange = React.useCallback((event, newValues) => {\n    if (multiple) {\n      onChange == null ? void 0 : onChange(event, newValues);\n    } else {\n      var _newValues$;\n\n      onChange == null ? void 0 : onChange(event, (_newValues$ = newValues[0]) != null ? _newValues$ : null);\n    }\n  }, [multiple, onChange]);\n  const handleHighlightChange = React.useCallback((event, newValue) => {\n    onHighlightChange == null ? void 0 : onHighlightChange(event, newValue != null ? newValue : null);\n  }, [onHighlightChange]);\n  const handleStateChange = React.useCallback((e, field, fieldValue) => {\n    if (field === 'open') {\n      onOpenChange == null ? void 0 : onOpenChange(fieldValue);\n\n      if (fieldValue === false && (e == null ? void 0 : e.type) !== 'blur') {\n        var _buttonRef$current;\n\n        (_buttonRef$current = buttonRef.current) == null ? void 0 : _buttonRef$current.focus();\n      }\n    }\n  }, [onOpenChange]);\n  const useListParameters = {\n    getInitialState: () => {\n      var _defaultValue;\n\n      return {\n        highlightedValue: null,\n        selectedValues: (_defaultValue = defaultValue) != null ? _defaultValue : [],\n        open: defaultOpen\n      };\n    },\n    getItemId,\n    controlledProps: controlledState,\n    isItemDisabled,\n    rootRef: handleListboxRef,\n    onChange: handleSelectionChange,\n    onHighlightChange: handleHighlightChange,\n    onStateChange: handleStateChange,\n    reducerActionContext: React.useMemo(() => ({\n      multiple\n    }), [multiple]),\n    items: optionValues,\n    itemStringifier: stringifyOption,\n    selectionMode: multiple ? 'multiple' : 'single',\n    stateReducer: selectReducer\n  };\n  const {\n    dispatch,\n    getRootProps: getListboxRootProps,\n    contextValue: listContextValue,\n    state: {\n      open,\n      highlightedValue: highlightedOption,\n      selectedValues: selectedOptions\n    },\n    rootRef: mergedListboxRef\n  } = useList(useListParameters);\n  React.useEffect(() => {\n    focusListboxIfRequested();\n  }, [focusListboxIfRequested]);\n  React.useEffect(() => {\n    requestListboxFocus(open);\n  }, [open]);\n\n  const createHandleMouseDown = otherHandlers => event => {\n    var _otherHandlers$onMous;\n\n    otherHandlers == null ? void 0 : (_otherHandlers$onMous = otherHandlers.onMouseDown) == null ? void 0 : _otherHandlers$onMous.call(otherHandlers, event);\n\n    if (!event.defaultPrevented && open) {\n      ignoreClick.current = true;\n    }\n  };\n\n  const createHandleButtonClick = otherHandlers => event => {\n    var _otherHandlers$onClic;\n\n    otherHandlers == null ? void 0 : (_otherHandlers$onClic = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic.call(otherHandlers, event);\n\n    if (!event.defaultPrevented && !ignoreClick.current) {\n      const action = {\n        type: SelectActionTypes.buttonClick,\n        event\n      };\n      dispatch(action);\n    }\n\n    ignoreClick.current = false;\n  };\n\n  const createHandleButtonKeyDown = otherHandlers => event => {\n    var _otherHandlers$onKeyD;\n\n    otherHandlers == null ? void 0 : (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null ? void 0 : _otherHandlers$onKeyD.call(otherHandlers, event);\n\n    if (event.defaultPrevented) {\n      return;\n    }\n\n    if (event.key === 'Enter') {\n      ignoreEnterKeyUp.current = true;\n    }\n\n    if (event.key === 'ArrowDown' || event.key === 'ArrowUp') {\n      event.preventDefault();\n      dispatch({\n        type: SelectActionTypes.buttonArrowKeyDown,\n        key: event.key,\n        event\n      });\n    }\n  };\n\n  const createHandleListboxKeyUp = otherHandlers => event => {\n    var _otherHandlers$onKeyU;\n\n    otherHandlers == null ? void 0 : (_otherHandlers$onKeyU = otherHandlers.onKeyUp) == null ? void 0 : _otherHandlers$onKeyU.call(otherHandlers, event);\n\n    if (event.defaultPrevented) {\n      return;\n    }\n\n    const closingKeys = multiple ? ['Escape'] : ['Escape', 'Enter', ' '];\n\n    if (open && !ignoreEnterKeyUp.current && closingKeys.includes(event.key)) {\n      var _buttonRef$current2;\n\n      buttonRef == null ? void 0 : (_buttonRef$current2 = buttonRef.current) == null ? void 0 : _buttonRef$current2.focus();\n    }\n\n    ignoreEnterKeyUp.current = false;\n  };\n\n  useEnhancedEffect(() => {\n    // Scroll to the currently highlighted option.\n    if (highlightedOption != null) {\n      var _options$get2;\n\n      const optionRef = (_options$get2 = options.get(highlightedOption)) == null ? void 0 : _options$get2.ref;\n\n      if (!listboxRef.current || !(optionRef != null && optionRef.current)) {\n        return;\n      }\n\n      const listboxClientRect = listboxRef.current.getBoundingClientRect();\n      const optionClientRect = optionRef.current.getBoundingClientRect();\n\n      if (optionClientRect.top < listboxClientRect.top) {\n        listboxRef.current.scrollTop -= listboxClientRect.top - optionClientRect.top;\n      } else if (optionClientRect.bottom > listboxClientRect.bottom) {\n        listboxRef.current.scrollTop += optionClientRect.bottom - listboxClientRect.bottom;\n      }\n    }\n  }, [highlightedOption, options]);\n\n  const getButtonProps = (otherHandlers = {}) => {\n    return _extends({}, getButtonRootProps(_extends({}, otherHandlers, {\n      onClick: createHandleButtonClick(otherHandlers),\n      onMouseDown: createHandleMouseDown(otherHandlers),\n      onKeyDown: createHandleButtonKeyDown(otherHandlers)\n    })), {\n      role: 'combobox',\n      'aria-expanded': open,\n      'aria-haspopup': 'listbox',\n      'aria-controls': listboxId\n    });\n  };\n\n  const getOptionMetadata = React.useCallback(optionValue => options.get(optionValue), [options]);\n\n  const getListboxProps = (otherHandlers = {}) => {\n    return _extends({}, getListboxRootProps(_extends({}, otherHandlers, {\n      onKeyUp: createHandleListboxKeyUp(otherHandlers)\n    })), {\n      id: listboxId,\n      role: 'listbox',\n      'aria-multiselectable': multiple ? 'true' : undefined\n    });\n  };\n\n  React.useDebugValue({\n    selectedOptions,\n    highlightedOption,\n    open\n  });\n  const contextValue = React.useMemo(() => _extends({}, listContextValue, compoundComponentContextValue), [listContextValue, compoundComponentContextValue]);\n  let selectValue;\n\n  if (props.multiple) {\n    selectValue = selectedOptions;\n  } else {\n    selectValue = selectedOptions.length > 0 ? selectedOptions[0] : null;\n  }\n\n  return {\n    buttonActive,\n    buttonFocusVisible,\n    buttonRef: mergedButtonRef,\n    contextValue,\n    disabled,\n    dispatch,\n    getButtonProps,\n    getListboxProps,\n    getOptionMetadata,\n    listboxRef: mergedListboxRef,\n    open,\n    options: optionValues,\n    value: selectValue,\n    highlightedOption\n  };\n}\n\nexport default useSelect;","map":{"version":3,"sources":["/Users/ssakhilesha/Documents/GitHub/Masters-BDA-project/website /covid19india-react-master/node_modules/@mui/base/useSelect/useSelect.js"],"names":["_extends","React","unstable_useForkRef","useForkRef","unstable_useId","useId","unstable_useEnhancedEffect","useEnhancedEffect","useButton","SelectActionTypes","useList","defaultOptionStringifier","useCompoundParent","selectReducer","useSelect","props","buttonRef","buttonRefProp","defaultOpen","defaultValue","defaultValueProp","disabled","listboxId","listboxIdProp","listboxRef","listboxRefProp","multiple","onChange","onHighlightChange","onOpenChange","open","openProp","options","optionsParam","optionStringifier","value","valueProp","useRef","handleButtonRef","undefined","useMemo","subitems","contextValue","compoundComponentContextValue","Map","map","option","index","label","ref","createRef","id","ignoreEnterKeyUp","ignoreClick","listboxFocusRequested","requestListboxFocus","useState","focusListboxIfRequested","useCallback","current","focus","handleListboxRef","getRootProps","getButtonRootProps","active","buttonActive","focusVisible","buttonFocusVisible","rootRef","mergedButtonRef","optionValues","Array","from","keys","isItemDisabled","valueToCheck","_option$disabled","get","stringifyOption","controlledState","selectedValues","getItemId","itemValue","_options$get","handleSelectionChange","event","newValues","_newValues$","handleHighlightChange","newValue","handleStateChange","e","field","fieldValue","type","_buttonRef$current","useListParameters","getInitialState","_defaultValue","highlightedValue","controlledProps","onStateChange","reducerActionContext","items","itemStringifier","selectionMode","stateReducer","dispatch","getListboxRootProps","listContextValue","state","highlightedOption","selectedOptions","mergedListboxRef","useEffect","createHandleMouseDown","otherHandlers","_otherHandlers$onMous","onMouseDown","call","defaultPrevented","createHandleButtonClick","_otherHandlers$onClic","onClick","action","buttonClick","createHandleButtonKeyDown","_otherHandlers$onKeyD","onKeyDown","key","preventDefault","buttonArrowKeyDown","createHandleListboxKeyUp","_otherHandlers$onKeyU","onKeyUp","closingKeys","includes","_buttonRef$current2","_options$get2","optionRef","listboxClientRect","getBoundingClientRect","optionClientRect","top","scrollTop","bottom","getButtonProps","role","getOptionMetadata","optionValue","getListboxProps","useDebugValue","selectValue","length"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useForkRef as useForkRef, unstable_useId as useId, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport useButton from '../useButton';\nimport { SelectActionTypes } from './useSelect.types';\nimport useList from '../useList';\nimport defaultOptionStringifier from './defaultOptionStringifier';\nimport { useCompoundParent } from '../utils/useCompound';\nimport selectReducer from './selectReducer';\n\n/**\n *\n * Demos:\n *\n * - [Select](https://mui.com/base/react-select/#hooks)\n *\n * API:\n *\n * - [useSelect API](https://mui.com/base/react-select/hooks-api/#use-select)\n */\nfunction useSelect(props) {\n  const {\n    buttonRef: buttonRefProp,\n    defaultOpen = false,\n    defaultValue: defaultValueProp,\n    disabled = false,\n    listboxId: listboxIdProp,\n    listboxRef: listboxRefProp,\n    multiple = false,\n    onChange,\n    onHighlightChange,\n    onOpenChange,\n    open: openProp,\n    options: optionsParam,\n    optionStringifier = defaultOptionStringifier,\n    value: valueProp\n  } = props;\n  const buttonRef = React.useRef(null);\n  const handleButtonRef = useForkRef(buttonRefProp, buttonRef);\n  const listboxRef = React.useRef(null);\n  const listboxId = useId(listboxIdProp);\n  let defaultValue;\n  if (valueProp === undefined && defaultValueProp === undefined) {\n    defaultValue = [];\n  } else if (defaultValueProp !== undefined) {\n    defaultValue = multiple ? defaultValueProp : [defaultValueProp];\n  }\n  const value = React.useMemo(() => {\n    if (valueProp !== undefined) {\n      return multiple ? valueProp : [valueProp];\n    }\n    return undefined;\n  }, [valueProp, multiple]);\n  const {\n    subitems,\n    contextValue: compoundComponentContextValue\n  } = useCompoundParent();\n  const options = React.useMemo(() => {\n    if (optionsParam != null) {\n      return new Map(optionsParam.map((option, index) => [option.value, {\n        value: option.value,\n        label: option.label,\n        disabled: option.disabled,\n        ref: /*#__PURE__*/React.createRef(),\n        id: `${listboxId}_${index}`\n      }]));\n    }\n    return subitems;\n  }, [optionsParam, subitems, listboxId]);\n\n  // prevents closing the listbox on keyUp right after opening it\n  const ignoreEnterKeyUp = React.useRef(false);\n\n  // prevents reopening the listbox when button is clicked\n  // (listbox closes on lost focus, then immediately reopens on click)\n  const ignoreClick = React.useRef(false);\n\n  // Ensure the listbox is focused after opening\n  const [listboxFocusRequested, requestListboxFocus] = React.useState(false);\n  const focusListboxIfRequested = React.useCallback(() => {\n    if (listboxFocusRequested && listboxRef.current != null) {\n      listboxRef.current.focus();\n      requestListboxFocus(false);\n    }\n  }, [listboxFocusRequested]);\n  const handleListboxRef = useForkRef(listboxRefProp, listboxRef, focusListboxIfRequested);\n  const {\n    getRootProps: getButtonRootProps,\n    active: buttonActive,\n    focusVisible: buttonFocusVisible,\n    rootRef: mergedButtonRef\n  } = useButton({\n    disabled,\n    rootRef: handleButtonRef\n  });\n  const optionValues = React.useMemo(() => Array.from(options.keys()), [options]);\n  const isItemDisabled = React.useCallback(valueToCheck => {\n    var _option$disabled;\n    const option = options.get(valueToCheck);\n    return (_option$disabled = option == null ? void 0 : option.disabled) != null ? _option$disabled : false;\n  }, [options]);\n  const stringifyOption = React.useCallback(valueToCheck => {\n    const option = options.get(valueToCheck);\n    if (!option) {\n      return '';\n    }\n    return optionStringifier(option);\n  }, [options, optionStringifier]);\n  const controlledState = React.useMemo(() => ({\n    selectedValues: value,\n    open: openProp\n  }), [value, openProp]);\n  const getItemId = React.useCallback(itemValue => {\n    var _options$get;\n    return (_options$get = options.get(itemValue)) == null ? void 0 : _options$get.id;\n  }, [options]);\n  const handleSelectionChange = React.useCallback((event, newValues) => {\n    if (multiple) {\n      onChange == null ? void 0 : onChange(event, newValues);\n    } else {\n      var _newValues$;\n      onChange == null ? void 0 : onChange(event, (_newValues$ = newValues[0]) != null ? _newValues$ : null);\n    }\n  }, [multiple, onChange]);\n  const handleHighlightChange = React.useCallback((event, newValue) => {\n    onHighlightChange == null ? void 0 : onHighlightChange(event, newValue != null ? newValue : null);\n  }, [onHighlightChange]);\n  const handleStateChange = React.useCallback((e, field, fieldValue) => {\n    if (field === 'open') {\n      onOpenChange == null ? void 0 : onOpenChange(fieldValue);\n      if (fieldValue === false && (e == null ? void 0 : e.type) !== 'blur') {\n        var _buttonRef$current;\n        (_buttonRef$current = buttonRef.current) == null ? void 0 : _buttonRef$current.focus();\n      }\n    }\n  }, [onOpenChange]);\n  const useListParameters = {\n    getInitialState: () => {\n      var _defaultValue;\n      return {\n        highlightedValue: null,\n        selectedValues: (_defaultValue = defaultValue) != null ? _defaultValue : [],\n        open: defaultOpen\n      };\n    },\n    getItemId,\n    controlledProps: controlledState,\n    isItemDisabled,\n    rootRef: handleListboxRef,\n    onChange: handleSelectionChange,\n    onHighlightChange: handleHighlightChange,\n    onStateChange: handleStateChange,\n    reducerActionContext: React.useMemo(() => ({\n      multiple\n    }), [multiple]),\n    items: optionValues,\n    itemStringifier: stringifyOption,\n    selectionMode: multiple ? 'multiple' : 'single',\n    stateReducer: selectReducer\n  };\n  const {\n    dispatch,\n    getRootProps: getListboxRootProps,\n    contextValue: listContextValue,\n    state: {\n      open,\n      highlightedValue: highlightedOption,\n      selectedValues: selectedOptions\n    },\n    rootRef: mergedListboxRef\n  } = useList(useListParameters);\n  React.useEffect(() => {\n    focusListboxIfRequested();\n  }, [focusListboxIfRequested]);\n  React.useEffect(() => {\n    requestListboxFocus(open);\n  }, [open]);\n  const createHandleMouseDown = otherHandlers => event => {\n    var _otherHandlers$onMous;\n    otherHandlers == null ? void 0 : (_otherHandlers$onMous = otherHandlers.onMouseDown) == null ? void 0 : _otherHandlers$onMous.call(otherHandlers, event);\n    if (!event.defaultPrevented && open) {\n      ignoreClick.current = true;\n    }\n  };\n  const createHandleButtonClick = otherHandlers => event => {\n    var _otherHandlers$onClic;\n    otherHandlers == null ? void 0 : (_otherHandlers$onClic = otherHandlers.onClick) == null ? void 0 : _otherHandlers$onClic.call(otherHandlers, event);\n    if (!event.defaultPrevented && !ignoreClick.current) {\n      const action = {\n        type: SelectActionTypes.buttonClick,\n        event\n      };\n      dispatch(action);\n    }\n    ignoreClick.current = false;\n  };\n  const createHandleButtonKeyDown = otherHandlers => event => {\n    var _otherHandlers$onKeyD;\n    otherHandlers == null ? void 0 : (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null ? void 0 : _otherHandlers$onKeyD.call(otherHandlers, event);\n    if (event.defaultPrevented) {\n      return;\n    }\n    if (event.key === 'Enter') {\n      ignoreEnterKeyUp.current = true;\n    }\n    if (event.key === 'ArrowDown' || event.key === 'ArrowUp') {\n      event.preventDefault();\n      dispatch({\n        type: SelectActionTypes.buttonArrowKeyDown,\n        key: event.key,\n        event\n      });\n    }\n  };\n  const createHandleListboxKeyUp = otherHandlers => event => {\n    var _otherHandlers$onKeyU;\n    otherHandlers == null ? void 0 : (_otherHandlers$onKeyU = otherHandlers.onKeyUp) == null ? void 0 : _otherHandlers$onKeyU.call(otherHandlers, event);\n    if (event.defaultPrevented) {\n      return;\n    }\n    const closingKeys = multiple ? ['Escape'] : ['Escape', 'Enter', ' '];\n    if (open && !ignoreEnterKeyUp.current && closingKeys.includes(event.key)) {\n      var _buttonRef$current2;\n      buttonRef == null ? void 0 : (_buttonRef$current2 = buttonRef.current) == null ? void 0 : _buttonRef$current2.focus();\n    }\n    ignoreEnterKeyUp.current = false;\n  };\n  useEnhancedEffect(() => {\n    // Scroll to the currently highlighted option.\n    if (highlightedOption != null) {\n      var _options$get2;\n      const optionRef = (_options$get2 = options.get(highlightedOption)) == null ? void 0 : _options$get2.ref;\n      if (!listboxRef.current || !(optionRef != null && optionRef.current)) {\n        return;\n      }\n      const listboxClientRect = listboxRef.current.getBoundingClientRect();\n      const optionClientRect = optionRef.current.getBoundingClientRect();\n      if (optionClientRect.top < listboxClientRect.top) {\n        listboxRef.current.scrollTop -= listboxClientRect.top - optionClientRect.top;\n      } else if (optionClientRect.bottom > listboxClientRect.bottom) {\n        listboxRef.current.scrollTop += optionClientRect.bottom - listboxClientRect.bottom;\n      }\n    }\n  }, [highlightedOption, options]);\n  const getButtonProps = (otherHandlers = {}) => {\n    return _extends({}, getButtonRootProps(_extends({}, otherHandlers, {\n      onClick: createHandleButtonClick(otherHandlers),\n      onMouseDown: createHandleMouseDown(otherHandlers),\n      onKeyDown: createHandleButtonKeyDown(otherHandlers)\n    })), {\n      role: 'combobox',\n      'aria-expanded': open,\n      'aria-haspopup': 'listbox',\n      'aria-controls': listboxId\n    });\n  };\n  const getOptionMetadata = React.useCallback(optionValue => options.get(optionValue), [options]);\n  const getListboxProps = (otherHandlers = {}) => {\n    return _extends({}, getListboxRootProps(_extends({}, otherHandlers, {\n      onKeyUp: createHandleListboxKeyUp(otherHandlers)\n    })), {\n      id: listboxId,\n      role: 'listbox',\n      'aria-multiselectable': multiple ? 'true' : undefined\n    });\n  };\n  React.useDebugValue({\n    selectedOptions,\n    highlightedOption,\n    open\n  });\n  const contextValue = React.useMemo(() => _extends({}, listContextValue, compoundComponentContextValue), [listContextValue, compoundComponentContextValue]);\n  let selectValue;\n  if (props.multiple) {\n    selectValue = selectedOptions;\n  } else {\n    selectValue = selectedOptions.length > 0 ? selectedOptions[0] : null;\n  }\n  return {\n    buttonActive,\n    buttonFocusVisible,\n    buttonRef: mergedButtonRef,\n    contextValue,\n    disabled,\n    dispatch,\n    getButtonProps,\n    getListboxProps,\n    getOptionMetadata,\n    listboxRef: mergedListboxRef,\n    open,\n    options: optionValues,\n    value: selectValue,\n    highlightedOption\n  };\n}\nexport default useSelect;"]},"metadata":{},"sourceType":"module"}