"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactTable = require("react-table");
var _classnames = _interopRequireDefault(require("classnames"));
var _DataTableHelpers = require("./DataTableHelpers");
var _Table = _interopRequireDefault(require("./Table"));
var _TablePagination = _interopRequireDefault(require("./TablePagination"));
var _DataTableHeaderCell = _interopRequireDefault(require("./DataTableHeaderCell"));
var _DataTableDragdropProvider = _interopRequireDefault(require("./DataTableDragdropProvider"));
var _DataTableContextMenuProvider = _interopRequireDefault(require("./DataTableContextMenuProvider"));
var _useDataTableInstance = _interopRequireDefault(require("./useDataTableInstance"));
var _DataTable = require("./DataTable.props");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/*!
  Modus React Bootstrap 
  A React-based component library developed as a common, open source platform for all of Trimbleâ€™s web applications built on React.
  Extends React-Bootstrap v1.6.5
  Copyright (c) 2022 Trimble Inc.
 */

function RenderFilterPanel(props, tableInstance) {
  const {
    filterPanel,
    disableFiltering
  } = props;
  const {
    filterColumns,
    resetFilter,
    resetAllFilters,
    setGlobalFilter,
    state: {
      filters: activeFilters,
      globalFilter
    }
  } = tableInstance;
  return filterPanel && !disableFiltering ? filterPanel({
    filterColumns,
    activeFilters,
    resetFilter,
    resetAllFilters,
    globalFilter,
    setGlobalFilter
  }) : null;
}
function RenderPagination(props, tableInstance) {
  const {
    data,
    disablePagination,
    pageSizeOptions,
    size
  } = props;
  const {
    gotoPage,
    setPageSize,
    state: {
      pageIndex,
      pageSize
    }
  } = tableInstance;
  return !disablePagination ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_TablePagination.default, {
    count: data.length,
    pageIndex: pageIndex,
    pageSize: pageSize,
    onPageChange: gotoPage,
    pageSizeOptions: pageSizeOptions || _DataTableHelpers.DATATABLE_DEFAULT_PAGE_SIZES,
    onPageSizeChange: setPageSize,
    size: size
  }) : null;
}
function RenderTableHeader(props, tableInstance) {
  const {
    size,
    dragTemplate
  } = props;
  const {
    headerGroups,
    allColumns,
    visibleColumns,
    getAllHeadersInAGroup,
    toggleHideColumn,
    toggleHideAllColumns,
    setColumnOrder
  } = tableInstance;
  return /*#__PURE__*/(0, _jsxRuntime.jsx)("thead", {
    className: "bg-gray-light",
    children: headerGroups.map(headerGroup => /*#__PURE__*/(0, _jsxRuntime.jsx)("tr", {
      ...headerGroup.getHeaderGroupProps(),
      role: "row",
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_DataTableContextMenuProvider.default, {
        size: size,
        allColumns: allColumns,
        toggleHideAllColumns: toggleHideAllColumns,
        toggleHideColumn: toggleHideColumn,
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_DataTableDragdropProvider.default, {
          visibleColumns: visibleColumns,
          setColumnOrder: setColumnOrder,
          dragItemTemplate: dragTemplate,
          children: getAllHeadersInAGroup(headerGroup.headers, headerGroup.id).map((column, index) => /*#__PURE__*/(0, _jsxRuntime.jsx)(_DataTableHeaderCell.default, {
            header: column,
            onToggleHideColumn: toggleHideColumn,
            role: "columnheader",
            "aria-sort": column.isSorted && (column.isSortedDesc ? 'descending' : 'ascending') || 'none',
            className: "bg-gray-light sticky-top",
            "aria-colindex": index + 1,
            children: column.render('Header')
          }, column.id))
        })
      })
    }))
  });
}
function RenderTableBody(props, tableInstance, handleRowClickFn) {
  const {
    checkBoxRowSelection,
    disablePagination
  } = props;
  const {
    rows,
    page,
    prepareRow,
    getTableBodyProps
  } = tableInstance;
  return /*#__PURE__*/(0, _jsxRuntime.jsx)("tbody", {
    ...getTableBodyProps(),
    children: (disablePagination ? rows : page).map(row => {
      prepareRow(row);
      return /*#__PURE__*/(0, _jsxRuntime.jsx)("tr", {
        ...row.getRowProps(),
        onClick: () => handleRowClickFn(row),
        className: (0, _classnames.default)(row.isSelected && 'selected'),
        role: "row",
        children: row.cells.map((cell, index) => /*#__PURE__*/(0, _jsxRuntime.jsx)("td", {
          ...cell.getCellProps(_DataTableHelpers.getCellStyles),
          className: (0, _classnames.default)(index === 0 && `${checkBoxRowSelection && 'icon-only checkbox-selector-cell'}`),
          role: "cell",
          "aria-rowindex": index + 1,
          children: cell.render('Cell')
        }))
      });
    })
  });
}
function RenderTable(props, tableInstance, handleRowClickFn) {
  const {
    data,
    striped,
    stickyFirstColumn,
    bordered,
    borderless,
    hover,
    size,
    variant,
    responsive
  } = props;
  const {
    allColumns,
    isResizing,
    getTableProps
  } = tableInstance;
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_Table.default, {
    striped: striped,
    bordered: bordered,
    borderless: borderless,
    hover: hover,
    size: size,
    variant: variant,
    responsive: responsive,
    ...getTableProps(),
    role: "table",
    "aria-colcount": allColumns.length,
    "aria-rowcount": data.length,
    className: (0, _classnames.default)(stickyFirstColumn && 'table-sticky-first-column', isResizing && 'resizing'),
    children: [RenderTableHeader(props, tableInstance), RenderTableBody(props, tableInstance, handleRowClickFn)]
  });
}
function DataTable(props) {
  /* eslint-disable */
  const {
    id,
    columns,
    pageSize: pageSizeProp,
    pageSizeOptions,
    data,
    resizeColumns,
    checkBoxRowSelection,
    multipleRowSelection,
    disableRowSelectionOnClick,
    disablePagination,
    disableSorting,
    disableFiltering,
    disableDragging,
    striped,
    stickyFirstColumn,
    bordered,
    borderless,
    hover,
    size,
    variant,
    responsive,
    onRowSelectionChange,
    ref,
    className,
    filterPanel,
    dragTemplate,
    ...htmlProps
  } = props;
  /* eslint-enable */

  const resolvedRef = (0, _react.useRef)(null) || ref;
  const enableRowSelection = !disableRowSelectionOnClick || checkBoxRowSelection;
  const disableMouseClickRowSelection = disableRowSelectionOnClick || checkBoxRowSelection;

  // Conditional Table Hooks Array for react-table
  const conditionalHooks = [_reactTable.useFlexLayout];
  if (filterPanel && !disableFiltering) conditionalHooks.push(_reactTable.useFilters, _reactTable.useGlobalFilter);
  if (!disableSorting) conditionalHooks.push(_reactTable.useSortBy);
  if (!disablePagination) conditionalHooks.push(_reactTable.usePagination);
  if (resizeColumns) conditionalHooks.push(_reactTable.useResizeColumns);
  if (enableRowSelection) conditionalHooks.push(_reactTable.useRowSelect);
  if (!disableDragging) conditionalHooks.push(_reactTable.useColumnOrder);
  if (checkBoxRowSelection && !columns.find(col => col.accessor === 'selector')) {
    conditionalHooks.push(hooks => (0, _DataTableHelpers.checkBoxSelectionHook)(hooks, id, multipleRowSelection));
  }
  const tableOptions = {
    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions
    initialState: {
      pageIndex: 0,
      pageSize: pageSizeProp || 10
    },
    ...(!multipleRowSelection && _DataTableHelpers.stateReducer)
  };
  const tableInstance = (0, _useDataTableInstance.default)(columns, data, tableOptions, conditionalHooks);
  const {
    selectedFlatRows
  } = tableInstance;

  // Callback APIs
  (0, _react.useEffect)(() => {
    if (onRowSelectionChange) onRowSelectionChange(selectedFlatRows.map(d => d.original));
  }, [selectedFlatRows, onRowSelectionChange]);
  const handleRowClick = (0, _react.useCallback)(row => {
    if (!disableMouseClickRowSelection) {
      row.toggleRowSelected(!row.isSelected);
    }
  }, [disableMouseClickRowSelection]);
  return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
    ref: resolvedRef,
    className: (0, _classnames.default)('mrb-data-table', bordered && 'mrb-data-table-bordered', className),
    ...htmlProps,
    children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      className: (0, _classnames.default)('d-flex flex-column overflow-hidden'),
      children: [RenderFilterPanel(props, tableInstance), /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
        className: (0, _classnames.default)('mrb-data-table-container d-flex flex-column overflow-hidden'),
        children: [
        /*#__PURE__*/
        // eslint-disable-next-line jsx-a11y/no-noninteractive-tabindex
        (0, _jsxRuntime.jsx)("div", {
          className: (0, _classnames.default)('scrollable'),
          tabIndex: 0,
          children: RenderTable(props, tableInstance, handleRowClick)
        }), RenderPagination(props, tableInstance)]
      })]
    })
  });
}
var _default = DataTable;
exports.default = _default;
module.exports = exports.default;