{"ast":null,"code":"var _jsxFileName = \"/Users/ssakhilesha/Documents/GitHub/Masters-BDA-project/website /covid19india-react-master/src/components/Calendar.js\",\n    _s = $RefreshSig$();\n\nimport { parseIndiaDate } from '../utils/commonFunctions';\nimport { add, formatISO, startOfMonth, startOfYear, endOfMonth, endOfYear } from 'date-fns';\nimport equal from 'fast-deep-equal';\nimport { memo, useState } from 'react';\nimport ReactCalendar from 'react-calendar';\nimport { ChevronLeft, ChevronsLeft, ChevronRight, ChevronsRight } from 'react-feather';\nimport { useSwipeable } from 'react-swipeable';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Calendar({\n  date,\n  dates,\n  slider\n}) {\n  _s();\n\n  const [view, setView] = useState('month');\n  const [activeStartDate, setActiveStartDate] = useState(parseIndiaDate(date));\n  const minDate = parseIndiaDate(dates[0]);\n  const maxDate = parseIndiaDate(dates[dates.length - 1]);\n\n  const isDateDisabled = ({\n    date,\n    view\n  }) => {\n    return view === 'month' && !dates.includes(formatISO(date, {\n      representation: 'date'\n    }));\n  };\n\n  const handleCalendarClick = value => {\n    const clickedDate = formatISO(value, {\n      representation: 'date'\n    });\n    slider.moveToSlide(dates.indexOf(clickedDate));\n  };\n\n  const handleViewButton = ({\n    view\n  }) => {\n    setView(view);\n  };\n\n  const handleNavigationButton = ({\n    activeStartDate\n  }) => {\n    setActiveStartDate(activeStartDate);\n  };\n\n  const handleNavigation = direction => {\n    const newDate = add(activeStartDate, view === 'month' ? {\n      months: direction\n    } : {\n      years: direction\n    });\n    const lower = view === 'month' ? startOfMonth(minDate) : startOfYear(minDate);\n    const upper = view === 'month' ? endOfMonth(maxDate) : endOfYear(maxDate);\n\n    if (lower <= newDate && newDate <= upper) {\n      setActiveStartDate(newDate);\n    }\n  };\n\n  const swipeHandlers = useSwipeable({\n    onSwipedRight: handleNavigation.bind(this, -1),\n    onSwipedLeft: handleNavigation.bind(this, 1)\n  });\n\n  const handleWheel = event => {\n    if (event.deltaX !== 0) {\n      handleNavigation(Math.sign(event.deltaX));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Calendar\",\n    onWheel: handleWheel,\n    ...swipeHandlers,\n    children: /*#__PURE__*/_jsxDEV(ReactCalendar, {\n      value: parseIndiaDate(date),\n      tileDisabled: isDateDisabled,\n      minDate,\n      maxDate,\n      activeStartDate,\n      view,\n      onActiveStartDateChange: handleNavigationButton,\n      onViewChange: handleViewButton,\n      minDetail: \"year\",\n      showFixedNumberOfWeeks: true,\n      onChange: handleCalendarClick,\n      prevLabel: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(ChevronLeft, {\n          size: 18\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this),\n      nextLabel: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(ChevronRight, {\n          size: 18\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }, this),\n      prev2Label: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(ChevronsLeft, {\n          size: 18\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this),\n      next2Label: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(ChevronsRight, {\n          size: 18\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Calendar, \"ampNHW021f/yMEN9Au6gkfdSakE=\", false, function () {\n  return [useSwipeable];\n});\n\n_c = Calendar;\n\nconst isEqual = (prevProps, currProps) => {\n  if (!equal(currProps.date, prevProps.date)) {\n    return false;\n  } else if (!equal(currProps.dates, prevProps.dates)) {\n    return false;\n  }\n\n  return true;\n};\n\nexport default _c2 = /*#__PURE__*/memo(Calendar, isEqual);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Calendar\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/ssakhilesha/Documents/GitHub/Masters-BDA-project/website /covid19india-react-master/src/components/Calendar.js"],"names":["parseIndiaDate","add","formatISO","startOfMonth","startOfYear","endOfMonth","endOfYear","equal","memo","useState","ReactCalendar","ChevronLeft","ChevronsLeft","ChevronRight","ChevronsRight","useSwipeable","Calendar","date","dates","slider","view","setView","activeStartDate","setActiveStartDate","minDate","maxDate","length","isDateDisabled","includes","representation","handleCalendarClick","value","clickedDate","moveToSlide","indexOf","handleViewButton","handleNavigationButton","handleNavigation","direction","newDate","months","years","lower","upper","swipeHandlers","onSwipedRight","bind","onSwipedLeft","handleWheel","event","deltaX","Math","sign","isEqual","prevProps","currProps"],"mappings":"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","sourcesContent":["import {parseIndiaDate} from '../utils/commonFunctions';\n\nimport {\n  add,\n  formatISO,\n  startOfMonth,\n  startOfYear,\n  endOfMonth,\n  endOfYear,\n} from 'date-fns';\nimport equal from 'fast-deep-equal';\nimport {memo, useState} from 'react';\nimport ReactCalendar from 'react-calendar';\nimport {\n  ChevronLeft,\n  ChevronsLeft,\n  ChevronRight,\n  ChevronsRight,\n} from 'react-feather';\nimport {useSwipeable} from 'react-swipeable';\n\nfunction Calendar({date, dates, slider}) {\n  const [view, setView] = useState('month');\n  const [activeStartDate, setActiveStartDate] = useState(parseIndiaDate(date));\n\n  const minDate = parseIndiaDate(dates[0]);\n  const maxDate = parseIndiaDate(dates[dates.length - 1]);\n\n  const isDateDisabled = ({date, view}) => {\n    return (\n      view === 'month' &&\n      !dates.includes(formatISO(date, {representation: 'date'}))\n    );\n  };\n\n  const handleCalendarClick = (value) => {\n    const clickedDate = formatISO(value, {representation: 'date'});\n    slider.moveToSlide(dates.indexOf(clickedDate));\n  };\n\n  const handleViewButton = ({view}) => {\n    setView(view);\n  };\n\n  const handleNavigationButton = ({activeStartDate}) => {\n    setActiveStartDate(activeStartDate);\n  };\n\n  const handleNavigation = (direction) => {\n    const newDate = add(\n      activeStartDate,\n      view === 'month' ? {months: direction} : {years: direction}\n    );\n    const lower =\n      view === 'month' ? startOfMonth(minDate) : startOfYear(minDate);\n    const upper = view === 'month' ? endOfMonth(maxDate) : endOfYear(maxDate);\n    if (lower <= newDate && newDate <= upper) {\n      setActiveStartDate(newDate);\n    }\n  };\n\n  const swipeHandlers = useSwipeable({\n    onSwipedRight: handleNavigation.bind(this, -1),\n    onSwipedLeft: handleNavigation.bind(this, 1),\n  });\n\n  const handleWheel = (event) => {\n    if (event.deltaX !== 0) {\n      handleNavigation(Math.sign(event.deltaX));\n    }\n  };\n\n  return (\n    <div className=\"Calendar\" onWheel={handleWheel} {...swipeHandlers}>\n      <ReactCalendar\n        value={parseIndiaDate(date)}\n        tileDisabled={isDateDisabled}\n        {...{minDate, maxDate, activeStartDate, view}}\n        onActiveStartDateChange={handleNavigationButton}\n        onViewChange={handleViewButton}\n        minDetail=\"year\"\n        showFixedNumberOfWeeks\n        onChange={handleCalendarClick}\n        prevLabel={\n          <div>\n            <ChevronLeft size={18} />\n          </div>\n        }\n        nextLabel={\n          <div>\n            <ChevronRight size={18} />\n          </div>\n        }\n        prev2Label={\n          <div>\n            <ChevronsLeft size={18} />\n          </div>\n        }\n        next2Label={\n          <div>\n            <ChevronsRight size={18} />\n          </div>\n        }\n      />\n    </div>\n  );\n}\n\nconst isEqual = (prevProps, currProps) => {\n  if (!equal(currProps.date, prevProps.date)) {\n    return false;\n  } else if (!equal(currProps.dates, prevProps.dates)) {\n    return false;\n  }\n  return true;\n};\n\nexport default memo(Calendar, isEqual);\n"]},"metadata":{},"sourceType":"module"}