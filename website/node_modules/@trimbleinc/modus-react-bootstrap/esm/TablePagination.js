/*!
  Modus React Bootstrap 
  A React-based component library developed as a common, open source platform for all of Trimbleâ€™s web applications built on React.
  Extends React-Bootstrap v1.6.5
  Copyright (c) 2022 Trimble Inc.
 */

import React, { useCallback } from 'react';
import classNames from 'classnames';
import Dropdown from './Dropdown';
import Form from './Form';
import NavItem from './NavItem';
import NavLink from './NavLink';
import Pagination from './Pagination';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
const getRange = (start, end) => {
  /* generate a range : [start, start+1, ..., end-1, end] */
  const len = end - start + 1;
  const a = new Array(len);
  for (let i = 0; i < len; i++) a[i] = start + i;
  return a;
};
const getPaginationGroup = (currentPage, totalPages, pageLimit = 5) => {
  const start = Math.floor((currentPage - 1) / pageLimit) * pageLimit;
  const len = totalPages < Math.ceil(currentPage / pageLimit) * pageLimit ? totalPages % pageLimit : pageLimit;
  return new Array(len).fill(0).map((_, idx) => start + idx + 1);
};
const PagesDropdown = ({
  pages,
  onPageSelection,
  ...props
}) => /*#__PURE__*/_jsxs(Dropdown, {
  as: NavItem,
  ...props,
  children: [/*#__PURE__*/_jsx(Dropdown.Toggle, {
    as: NavLink,
    variant: "text-primary",
    bsPrefix: "",
    children: /*#__PURE__*/_jsx("i", {
      className: "modus-icons",
      children: "more_horizontal"
    })
  }), /*#__PURE__*/_jsx(Dropdown.Menu, {
    className: "dropdown-menu-sm",
    style: {
      minWidth: '5rem'
    },
    children: pages.map(item => /*#__PURE__*/_jsx(Dropdown.Item, {
      onClick: () => {
        onPageSelection(item);
      },
      children: item
    }, item))
  })]
});
const TablePagination = /*#__PURE__*/React.forwardRef(({
  count,
  pageIndex,
  onPageChange,
  pageSize,
  pageSizeOptions,
  onPageSizeChange,
  pageLimit = 5,
  className,
  size,
  ...props
}, ref) => {
  const totalPages = Math.ceil(count / pageSize);
  const paginationGroup = getPaginationGroup(pageIndex + 1, totalPages || 1, pageLimit);
  const firstPage = paginationGroup[0];
  const lastPage = paginationGroup[paginationGroup.length - 1];
  const morePagesLeft = firstPage > 1 && getRange(1, firstPage - 1);
  const morePagesRight = totalPages > 0 && lastPage !== totalPages && getRange(lastPage + 1, totalPages);
  const handlePreviousPage = useCallback(() => {
    onPageChange(pageIndex - 1);
  }, [pageIndex, onPageChange]);
  const handleNextPage = useCallback(() => {
    onPageChange(pageIndex + 1);
  }, [pageIndex, onPageChange]);
  const handleGotoPage = useCallback(page => {
    onPageChange(page - 1);
  }, [onPageChange]);
  return /*#__PURE__*/_jsxs("div", {
    className: classNames(className, 'mrb-table-pagination d-flex justify-content-end  w-100'),
    ...props,
    ref: ref,
    "aria-label": "Table pagination",
    children: [/*#__PURE__*/_jsx("div", {
      className: "mr-2",
      "aria-label": "Page size options",
      children: /*#__PURE__*/_jsx(Form, {
        inline: true,
        children: /*#__PURE__*/_jsxs(Form.Group, {
          children: [/*#__PURE__*/_jsx(Form.Label, {
            className: classNames('mr-2', size === 'sm' ? 'label-sm' : 'label-lg'),
            children: "Page Size:"
          }), /*#__PURE__*/_jsx(Form.Control, {
            size: size,
            as: "select",
            custom: true,
            value: pageSize,
            onChange: e => {
              onPageSizeChange(Number(e.target.value));
            },
            "aria-label": "Select Page size",
            children: pageSizeOptions.map(option => /*#__PURE__*/_jsx("option", {
              value: option,
              children: option
            }, option))
          })]
        })
      })
    }), /*#__PURE__*/_jsx("div", {
      children: /*#__PURE__*/_jsx("nav", {
        "aria-label": "Pagination",
        children: /*#__PURE__*/_jsxs(Pagination, {
          className: "mb-0",
          size: size,
          children: [/*#__PURE__*/_jsx(Pagination.Item, {
            disabled: pageIndex === 0,
            onClick: handlePreviousPage,
            "aria-label": "Previous",
            role: "button",
            children: /*#__PURE__*/_jsx("i", {
              className: "modus-icons",
              children: "chevron_left"
            })
          }), morePagesLeft && /*#__PURE__*/_jsx(Pagination.Item, {
            as: "div",
            className: "p-0",
            "aria-label": "Go to previous pages",
            role: "button",
            children: /*#__PURE__*/_jsx(PagesDropdown, {
              pages: morePagesLeft,
              onPageSelection: handleGotoPage
            })
          }), paginationGroup.map(item => {
            const isActivePage = item === pageIndex + 1;
            return /*#__PURE__*/_jsx(Pagination.Item, {
              active: isActivePage,
              "aria-current": isActivePage ? 'page' : undefined,
              onClick: () => {
                handleGotoPage(item);
              },
              "aria-label": `Page number ${pageIndex + 1}`,
              role: "button",
              children: item
            }, item);
          }), morePagesRight && /*#__PURE__*/_jsx(Pagination.Item, {
            as: "div",
            className: "p-0",
            "aria-label": "Go to next pages",
            role: "button",
            children: /*#__PURE__*/_jsx(PagesDropdown, {
              pages: morePagesRight,
              onPageSelection: handleGotoPage
            })
          }), /*#__PURE__*/_jsx(Pagination.Item, {
            disabled: pageIndex + 1 === totalPages,
            onClick: handleNextPage,
            "aria-label": "Next",
            role: "button",
            children: /*#__PURE__*/_jsx("i", {
              className: "modus-icons",
              children: "chevron_right"
            })
          })]
        })
      })
    })]
  });
});
TablePagination.displayName = 'TablePagination';
export default TablePagination;