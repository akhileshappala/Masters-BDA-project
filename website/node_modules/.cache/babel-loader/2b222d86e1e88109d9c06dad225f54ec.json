{"ast":null,"code":"var _jsxFileName = \"/Users/ssakhilesha/Documents/GitHub/Masters-BDA-project/website /covid19india-react-master/src/components/TimeseriesBrush.js\",\n    _s = $RefreshSig$();\n\nimport { BRUSH_STATISTICS, D3_TRANSITION_DURATION, STATISTIC_CONFIGS } from '../constants';\nimport { getStatistic, parseIndiaDate } from '../utils/commonFunctions';\nimport classnames from 'classnames';\nimport { min, max } from 'd3-array';\nimport { axisBottom } from 'd3-axis';\nimport { brushX, brushSelection } from 'd3-brush';\nimport { interpolatePath } from 'd3-interpolate-path';\nimport { scaleTime, scaleLinear } from 'd3-scale';\nimport { select, pointers } from 'd3-selection';\nimport { area, curveMonotoneX, stack } from 'd3-shape';\nimport 'd3-transition';\nimport { addDays, differenceInDays, formatISO } from 'date-fns';\nimport equal from 'fast-deep-equal';\nimport { memo, useCallback, useMemo, useEffect, useRef } from 'react';\nimport ReactDOM from 'react-dom';\nimport { useMeasure } from 'react-use'; // Chart margins\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst margin = {\n  top: 0,\n  right: 35,\n  bottom: 20,\n  left: 25\n};\nconst yBufferTop = 1.2;\n\nconst numTicksX = width => width < 480 ? 4 : 6;\n\nconst brushWheelDelta = 10;\n\nfunction TimeseriesBrush({\n  timeseries,\n  dates,\n  currentBrushSelection,\n  endDate,\n  lookback,\n  setBrushSelectionEnd,\n  setLookback,\n  animationIndex\n}) {\n  _s();\n\n  const chartRef = useRef();\n  const [wrapperRef, {\n    width,\n    height\n  }] = useMeasure();\n  const endDateMin = lookback !== null ? min([formatISO(addDays(parseIndiaDate(dates[0]), lookback), {\n    representation: 'date'\n  }), endDate]) : endDate;\n  const xScale = useMemo(() => {\n    const T = dates.length; // Chart extremes\n\n    const chartRight = width - margin.right;\n    return scaleTime().clamp(true).domain([parseIndiaDate(dates[0] || endDate), parseIndiaDate(dates[T - 1] || endDate)]).range([margin.left, chartRight]);\n  }, [width, endDate, dates]);\n  useEffect(() => {\n    if (!width || !height) return; // Chart extremes\n\n    const chartBottom = height - margin.bottom;\n\n    const xAxis = g => g.attr('class', 'x-axis').call(axisBottom(xScale).ticks(numTicksX(width))); // Switched to daily confirmed instead of cumulative ARD\n\n\n    const timeseriesStacked = stack().keys(BRUSH_STATISTICS).value((date, statistic) => Math.max(0, getStatistic(timeseries[date], 'delta', statistic)))(dates);\n    const yScale = scaleLinear().clamp(true).domain([0, max(timeseriesStacked[timeseriesStacked.length - 1], ([, y1]) => yBufferTop * y1)]).range([chartBottom, margin.top]);\n    const svg = select(chartRef.current);\n    const t = svg.transition().duration(D3_TRANSITION_DURATION);\n    svg.select('.x-axis').attr('pointer-events', 'none').style('transform', `translate3d(0, ${chartBottom}px, 0)`).transition(t).call(xAxis);\n    const areaPath = area().curve(curveMonotoneX).x(d => xScale(parseIndiaDate(d.data))).y0(d => yScale(d[0])).y1(d => yScale(d[1]));\n    svg.select('.trend-areas').selectAll('.trend-area').data(timeseriesStacked).join(enter => enter.append('path').attr('class', 'trend-area').attr('fill', ({\n      key\n    }) => STATISTIC_CONFIGS[key].color).attr('fill-opacity', 0.4).attr('stroke', ({\n      key\n    }) => STATISTIC_CONFIGS[key].color).attr('d', areaPath).attr('pointer-events', 'none'), update => update.transition(t).attrTween('d', function (date) {\n      const previous = select(this).attr('d');\n      const current = areaPath(date);\n      return interpolatePath(previous, current);\n    }).selection());\n  }, [dates, width, height, xScale, timeseries]);\n  const defaultSelection = currentBrushSelection.map(date => xScale(parseIndiaDate(date)));\n  const brush = useMemo(() => {\n    if (!width || !height) return; // Chart extremes\n\n    const chartRight = width - margin.right;\n    const chartBottom = height - margin.bottom;\n    const brush = brushX().extent([[margin.left, margin.top], [chartRight, chartBottom]]).handleSize(20);\n    return brush;\n  }, [width, height]);\n  const brushed = useCallback(({\n    sourceEvent,\n    selection\n  }) => {\n    if (!sourceEvent) return;\n    const [brushStartDate, brushEndDate] = selection.map(xScale.invert);\n    ReactDOM.unstable_batchedUpdates(() => {\n      setBrushSelectionEnd(formatISO(brushEndDate, {\n        representation: 'date'\n      }));\n      setLookback(differenceInDays(brushEndDate, brushStartDate));\n    });\n  }, [xScale, setBrushSelectionEnd, setLookback]);\n  const beforebrushstarted = useCallback(event => {\n    const svg = select(chartRef.current);\n    const selection = brushSelection(svg.select('.brush').node());\n    if (!selection) return;\n    const dx = selection[1] - selection[0];\n    const [[cx]] = pointers(event);\n    const [x0, x1] = [cx - dx / 2, cx + dx / 2];\n    const [X0, X1] = xScale.range();\n    svg.select('.brush').call(brush.move, x1 > X1 ? [X1 - dx, X1] : x0 < X0 ? [X0, X0 + dx] : [x0, x1]);\n  }, [brush, xScale]);\n  const brushended = useCallback(({\n    sourceEvent,\n    selection\n  }) => {\n    if (!sourceEvent || !selection) return;\n    const domain = selection.map(xScale.invert).map(date => formatISO(date, {\n      representation: 'date'\n    }));\n    const svg = select(chartRef.current);\n    svg.select('.brush').call(brush.move, domain.map(date => xScale(parseIndiaDate(date)))).call(g => g.select('.overlay').attr('cursor', 'pointer'));\n  }, [brush, xScale]);\n  useEffect(() => {\n    if (!brush) return;\n    brush.on('start brush', brushed).on('end', brushended);\n    const svg = select(chartRef.current);\n    svg.select('.brush').call(brush).call(g => g.select('.overlay').attr('cursor', 'pointer').datum({\n      type: 'selection'\n    }).on('mousedown touchstart', beforebrushstarted));\n  }, [brush, brushed, brushended, beforebrushstarted]);\n  useEffect(() => {\n    if (!brush) return;\n    const svg = select(chartRef.current);\n    svg.select('.brush').call(brush.move, defaultSelection);\n  }, [brush, defaultSelection]);\n\n  const handleWheel = event => {\n    if (event.deltaX) {\n      setBrushSelectionEnd(max([endDateMin, dates[Math.max(0, Math.min(dates.length - 1, dates.indexOf(currentBrushSelection[1]) + Math.sign(event.deltaX) * brushWheelDelta))]]));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Timeseries\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classnames('svg-parent is-brush fadeInUp'),\n      ref: wrapperRef,\n      onWheel: handleWheel,\n      style: {\n        animationDelay: `${animationIndex * 250}ms`\n      },\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        ref: chartRef,\n        preserveAspectRatio: \"xMidYMid meet\",\n        children: [/*#__PURE__*/_jsxDEV(\"defs\", {\n          children: [/*#__PURE__*/_jsxDEV(\"clipPath\", {\n            id: \"clipPath\",\n            children: /*#__PURE__*/_jsxDEV(\"rect\", {\n              x: 0,\n              y: `${margin.top}`,\n              width: width,\n              height: `${Math.max(0, height - margin.bottom)}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 264,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"mask\", {\n            id: \"mask\",\n            children: [/*#__PURE__*/_jsxDEV(\"rect\", {\n              x: 0,\n              y: `${margin.top}`,\n              width: width,\n              height: `${Math.max(0, height - margin.bottom)}`,\n              fill: \"hsl(0, 0%, 40%)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 272,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"use\", {\n              href: \"#selection\",\n              fill: \"white\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 279,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n          className: \"brush\",\n          clipPath: \"url(#clipPath)\",\n          children: /*#__PURE__*/_jsxDEV(\"g\", {\n            mask: \"url(#mask)\",\n            children: [/*#__PURE__*/_jsxDEV(\"rect\", {\n              className: \"overlay\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 285,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n              className: \"trend-areas\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 286,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"rect\", {\n              className: \"selection\",\n              id: \"selection\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 287,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n          className: \"x-axis\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 254,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TimeseriesBrush, \"MfCwrF415n6H4C8tV02Ck8kVv2I=\", false, function () {\n  return [useMeasure];\n});\n\n_c = TimeseriesBrush;\n\nconst isEqual = (prevProps, currProps) => {\n  if (!equal(currProps.currentBrushSelection, prevProps.currentBrushSelection)) {\n    return false;\n  } else if (!equal(currProps.regionHighlighted.stateCode, prevProps.regionHighlighted.stateCode)) {\n    return false;\n  } else if (!equal(currProps.regionHighlighted.districtName, prevProps.regionHighlighted.districtName)) {\n    return false;\n  } else if (!equal(currProps.endDate, prevProps.endDate)) {\n    return false;\n  } else if (!equal(currProps.lookback, prevProps.lookback)) {\n    return false;\n  } else if (!equal(currProps.animationIndex, prevProps.animationIndex)) {\n    return false;\n  } else if (!equal(currProps.dates, prevProps.dates)) {\n    return false;\n  }\n\n  return true;\n};\n\nexport default _c2 = /*#__PURE__*/memo(TimeseriesBrush, isEqual);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TimeseriesBrush\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/ssakhilesha/Documents/GitHub/Masters-BDA-project/website /covid19india-react-master/src/components/TimeseriesBrush.js"],"names":["BRUSH_STATISTICS","D3_TRANSITION_DURATION","STATISTIC_CONFIGS","getStatistic","parseIndiaDate","classnames","min","max","axisBottom","brushX","brushSelection","interpolatePath","scaleTime","scaleLinear","select","pointers","area","curveMonotoneX","stack","addDays","differenceInDays","formatISO","equal","memo","useCallback","useMemo","useEffect","useRef","ReactDOM","useMeasure","margin","top","right","bottom","left","yBufferTop","numTicksX","width","brushWheelDelta","TimeseriesBrush","timeseries","dates","currentBrushSelection","endDate","lookback","setBrushSelectionEnd","setLookback","animationIndex","chartRef","wrapperRef","height","endDateMin","representation","xScale","T","length","chartRight","clamp","domain","range","chartBottom","xAxis","g","attr","call","ticks","timeseriesStacked","keys","value","date","statistic","Math","yScale","y1","svg","current","t","transition","duration","style","areaPath","curve","x","d","data","y0","selectAll","join","enter","append","key","color","update","attrTween","previous","selection","defaultSelection","map","brush","extent","handleSize","brushed","sourceEvent","brushStartDate","brushEndDate","invert","unstable_batchedUpdates","beforebrushstarted","event","node","dx","cx","x0","x1","X0","X1","move","brushended","on","datum","type","handleWheel","deltaX","indexOf","sign","animationDelay","isEqual","prevProps","currProps","regionHighlighted","stateCode","districtName"],"mappings":";;;AAAA,SACEA,gBADF,EAEEC,sBAFF,EAGEC,iBAHF,QAIO,cAJP;AAKA,SAAQC,YAAR,EAAsBC,cAAtB,QAA2C,0BAA3C;AAEA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAAQC,GAAR,EAAaC,GAAb,QAAuB,UAAvB;AACA,SAAQC,UAAR,QAAyB,SAAzB;AACA,SAAQC,MAAR,EAAgBC,cAAhB,QAAqC,UAArC;AACA,SAAQC,eAAR,QAA8B,qBAA9B;AACA,SAAQC,SAAR,EAAmBC,WAAnB,QAAqC,UAArC;AACA,SAAQC,MAAR,EAAgBC,QAAhB,QAA+B,cAA/B;AACA,SAAQC,IAAR,EAAcC,cAAd,EAA8BC,KAA9B,QAA0C,UAA1C;AACA,OAAO,eAAP;AACA,SAAQC,OAAR,EAAiBC,gBAAjB,EAAmCC,SAAnC,QAAmD,UAAnD;AACA,OAAOC,KAAP,MAAkB,iBAAlB;AACA,SAAQC,IAAR,EAAcC,WAAd,EAA2BC,OAA3B,EAAoCC,SAApC,EAA+CC,MAA/C,QAA4D,OAA5D;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAAQC,UAAR,QAAyB,WAAzB,C,CAEA;;;AACA,MAAMC,MAAM,GAAG;AAACC,EAAAA,GAAG,EAAE,CAAN;AAASC,EAAAA,KAAK,EAAE,EAAhB;AAAoBC,EAAAA,MAAM,EAAE,EAA5B;AAAgCC,EAAAA,IAAI,EAAE;AAAtC,CAAf;AACA,MAAMC,UAAU,GAAG,GAAnB;;AACA,MAAMC,SAAS,GAAIC,KAAD,IAAYA,KAAK,GAAG,GAAR,GAAc,CAAd,GAAkB,CAAhD;;AACA,MAAMC,eAAe,GAAG,EAAxB;;AAEA,SAASC,eAAT,CAAyB;AACvBC,EAAAA,UADuB;AAEvBC,EAAAA,KAFuB;AAGvBC,EAAAA,qBAHuB;AAIvBC,EAAAA,OAJuB;AAKvBC,EAAAA,QALuB;AAMvBC,EAAAA,oBANuB;AAOvBC,EAAAA,WAPuB;AAQvBC,EAAAA;AARuB,CAAzB,EASG;AAAA;;AACD,QAAMC,QAAQ,GAAGrB,MAAM,EAAvB;AACA,QAAM,CAACsB,UAAD,EAAa;AAACZ,IAAAA,KAAD;AAAQa,IAAAA;AAAR,GAAb,IAAgCrB,UAAU,EAAhD;AAEA,QAAMsB,UAAU,GACdP,QAAQ,KAAK,IAAb,GACItC,GAAG,CAAC,CACFe,SAAS,CAACF,OAAO,CAACf,cAAc,CAACqC,KAAK,CAAC,CAAD,CAAN,CAAf,EAA2BG,QAA3B,CAAR,EAA8C;AACrDQ,IAAAA,cAAc,EAAE;AADqC,GAA9C,CADP,EAIFT,OAJE,CAAD,CADP,GAOIA,OARN;AAUA,QAAMU,MAAM,GAAG5B,OAAO,CAAC,MAAM;AAC3B,UAAM6B,CAAC,GAAGb,KAAK,CAACc,MAAhB,CAD2B,CAG3B;;AACA,UAAMC,UAAU,GAAGnB,KAAK,GAAGP,MAAM,CAACE,KAAlC;AAEA,WAAOpB,SAAS,GACb6C,KADI,CACE,IADF,EAEJC,MAFI,CAEG,CACNtD,cAAc,CAACqC,KAAK,CAAC,CAAD,CAAL,IAAYE,OAAb,CADR,EAENvC,cAAc,CAACqC,KAAK,CAACa,CAAC,GAAG,CAAL,CAAL,IAAgBX,OAAjB,CAFR,CAFH,EAMJgB,KANI,CAME,CAAC7B,MAAM,CAACI,IAAR,EAAcsB,UAAd,CANF,CAAP;AAOD,GAbqB,EAanB,CAACnB,KAAD,EAAQM,OAAR,EAAiBF,KAAjB,CAbmB,CAAtB;AAeAf,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACW,KAAD,IAAU,CAACa,MAAf,EAAuB,OADT,CAGd;;AACA,UAAMU,WAAW,GAAGV,MAAM,GAAGpB,MAAM,CAACG,MAApC;;AAEA,UAAM4B,KAAK,GAAIC,CAAD,IACZA,CAAC,CACEC,IADH,CACQ,OADR,EACiB,QADjB,EAEGC,IAFH,CAEQxD,UAAU,CAAC6C,MAAD,CAAV,CAAmBY,KAAnB,CAAyB7B,SAAS,CAACC,KAAD,CAAlC,CAFR,CADF,CANc,CAWd;;;AACA,UAAM6B,iBAAiB,GAAGhD,KAAK,GAC5BiD,IADuB,CAClBnE,gBADkB,EAEvBoE,KAFuB,CAEjB,CAACC,IAAD,EAAOC,SAAP,KACLC,IAAI,CAAChE,GAAL,CAAS,CAAT,EAAYJ,YAAY,CAACqC,UAAU,CAAC6B,IAAD,CAAX,EAAmB,OAAnB,EAA4BC,SAA5B,CAAxB,CAHsB,EAItB7B,KAJsB,CAA1B;AAMA,UAAM+B,MAAM,GAAG3D,WAAW,GACvB4C,KADY,CACN,IADM,EAEZC,MAFY,CAEL,CACN,CADM,EAENnD,GAAG,CACD2D,iBAAiB,CAACA,iBAAiB,CAACX,MAAlB,GAA2B,CAA5B,CADhB,EAED,CAAC,GAAGkB,EAAH,CAAD,KAAYtC,UAAU,GAAGsC,EAFxB,CAFG,CAFK,EASZd,KATY,CASN,CAACC,WAAD,EAAc9B,MAAM,CAACC,GAArB,CATM,CAAf;AAWA,UAAM2C,GAAG,GAAG5D,MAAM,CAACkC,QAAQ,CAAC2B,OAAV,CAAlB;AAEA,UAAMC,CAAC,GAAGF,GAAG,CAACG,UAAJ,GAAiBC,QAAjB,CAA0B7E,sBAA1B,CAAV;AAEAyE,IAAAA,GAAG,CACA5D,MADH,CACU,SADV,EAEGiD,IAFH,CAEQ,gBAFR,EAE0B,MAF1B,EAGGgB,KAHH,CAGS,WAHT,EAGuB,kBAAiBnB,WAAY,QAHpD,EAIGiB,UAJH,CAIcD,CAJd,EAKGZ,IALH,CAKQH,KALR;AAOA,UAAMmB,QAAQ,GAAGhE,IAAI,GAClBiE,KADc,CACRhE,cADQ,EAEdiE,CAFc,CAEXC,CAAD,IAAO9B,MAAM,CAACjD,cAAc,CAAC+E,CAAC,CAACC,IAAH,CAAf,CAFD,EAGdC,EAHc,CAGVF,CAAD,IAAOX,MAAM,CAACW,CAAC,CAAC,CAAD,CAAF,CAHF,EAIdV,EAJc,CAIVU,CAAD,IAAOX,MAAM,CAACW,CAAC,CAAC,CAAD,CAAF,CAJF,CAAjB;AAMAT,IAAAA,GAAG,CACA5D,MADH,CACU,cADV,EAEGwE,SAFH,CAEa,aAFb,EAGGF,IAHH,CAGQlB,iBAHR,EAIGqB,IAJH,CAKKC,KAAD,IACEA,KAAK,CACFC,MADH,CACU,MADV,EAEG1B,IAFH,CAEQ,OAFR,EAEiB,YAFjB,EAGGA,IAHH,CAGQ,MAHR,EAGgB,CAAC;AAAC2B,MAAAA;AAAD,KAAD,KAAWxF,iBAAiB,CAACwF,GAAD,CAAjB,CAAuBC,KAHlD,EAIG5B,IAJH,CAIQ,cAJR,EAIwB,GAJxB,EAKGA,IALH,CAKQ,QALR,EAKkB,CAAC;AAAC2B,MAAAA;AAAD,KAAD,KAAWxF,iBAAiB,CAACwF,GAAD,CAAjB,CAAuBC,KALpD,EAMG5B,IANH,CAMQ,GANR,EAMaiB,QANb,EAOGjB,IAPH,CAOQ,gBAPR,EAO0B,MAP1B,CANN,EAcK6B,MAAD,IACEA,MAAM,CACHf,UADH,CACcD,CADd,EAEGiB,SAFH,CAEa,GAFb,EAEkB,UAAUxB,IAAV,EAAgB;AAC9B,YAAMyB,QAAQ,GAAGhF,MAAM,CAAC,IAAD,CAAN,CAAaiD,IAAb,CAAkB,GAAlB,CAAjB;AACA,YAAMY,OAAO,GAAGK,QAAQ,CAACX,IAAD,CAAxB;AACA,aAAO1D,eAAe,CAACmF,QAAD,EAAWnB,OAAX,CAAtB;AACD,KANH,EAOGoB,SAPH,EAfN;AAwBD,GAtEQ,EAsEN,CAACtD,KAAD,EAAQJ,KAAR,EAAea,MAAf,EAAuBG,MAAvB,EAA+Bb,UAA/B,CAtEM,CAAT;AAwEA,QAAMwD,gBAAgB,GAAGtD,qBAAqB,CAACuD,GAAtB,CAA2B5B,IAAD,IACjDhB,MAAM,CAACjD,cAAc,CAACiE,IAAD,CAAf,CADiB,CAAzB;AAIA,QAAM6B,KAAK,GAAGzE,OAAO,CAAC,MAAM;AAC1B,QAAI,CAACY,KAAD,IAAU,CAACa,MAAf,EAAuB,OADG,CAE1B;;AACA,UAAMM,UAAU,GAAGnB,KAAK,GAAGP,MAAM,CAACE,KAAlC;AACA,UAAM4B,WAAW,GAAGV,MAAM,GAAGpB,MAAM,CAACG,MAApC;AAEA,UAAMiE,KAAK,GAAGzF,MAAM,GACjB0F,MADW,CACJ,CACN,CAACrE,MAAM,CAACI,IAAR,EAAcJ,MAAM,CAACC,GAArB,CADM,EAEN,CAACyB,UAAD,EAAaI,WAAb,CAFM,CADI,EAKXwC,UALW,CAKA,EALA,CAAd;AAMA,WAAOF,KAAP;AACD,GAboB,EAalB,CAAC7D,KAAD,EAAQa,MAAR,CAbkB,CAArB;AAeA,QAAMmD,OAAO,GAAG7E,WAAW,CACzB,CAAC;AAAC8E,IAAAA,WAAD;AAAcP,IAAAA;AAAd,GAAD,KAA8B;AAC5B,QAAI,CAACO,WAAL,EAAkB;AAClB,UAAM,CAACC,cAAD,EAAiBC,YAAjB,IAAiCT,SAAS,CAACE,GAAV,CAAc5C,MAAM,CAACoD,MAArB,CAAvC;AAEA7E,IAAAA,QAAQ,CAAC8E,uBAAT,CAAiC,MAAM;AACrC7D,MAAAA,oBAAoB,CAACxB,SAAS,CAACmF,YAAD,EAAe;AAACpD,QAAAA,cAAc,EAAE;AAAjB,OAAf,CAAV,CAApB;AACAN,MAAAA,WAAW,CAAC1B,gBAAgB,CAACoF,YAAD,EAAeD,cAAf,CAAjB,CAAX;AACD,KAHD;AAID,GATwB,EAUzB,CAAClD,MAAD,EAASR,oBAAT,EAA+BC,WAA/B,CAVyB,CAA3B;AAaA,QAAM6D,kBAAkB,GAAGnF,WAAW,CACnCoF,KAAD,IAAW;AACT,UAAMlC,GAAG,GAAG5D,MAAM,CAACkC,QAAQ,CAAC2B,OAAV,CAAlB;AACA,UAAMoB,SAAS,GAAGrF,cAAc,CAACgE,GAAG,CAAC5D,MAAJ,CAAW,QAAX,EAAqB+F,IAArB,EAAD,CAAhC;AAEA,QAAI,CAACd,SAAL,EAAgB;AAEhB,UAAMe,EAAE,GAAGf,SAAS,CAAC,CAAD,CAAT,GAAeA,SAAS,CAAC,CAAD,CAAnC;AACA,UAAM,CAAC,CAACgB,EAAD,CAAD,IAAShG,QAAQ,CAAC6F,KAAD,CAAvB;AACA,UAAM,CAACI,EAAD,EAAKC,EAAL,IAAW,CAACF,EAAE,GAAGD,EAAE,GAAG,CAAX,EAAcC,EAAE,GAAGD,EAAE,GAAG,CAAxB,CAAjB;AACA,UAAM,CAACI,EAAD,EAAKC,EAAL,IAAW9D,MAAM,CAACM,KAAP,EAAjB;AACAe,IAAAA,GAAG,CACA5D,MADH,CACU,QADV,EAEGkD,IAFH,CAGIkC,KAAK,CAACkB,IAHV,EAIIH,EAAE,GAAGE,EAAL,GAAU,CAACA,EAAE,GAAGL,EAAN,EAAUK,EAAV,CAAV,GAA0BH,EAAE,GAAGE,EAAL,GAAU,CAACA,EAAD,EAAKA,EAAE,GAAGJ,EAAV,CAAV,GAA0B,CAACE,EAAD,EAAKC,EAAL,CAJxD;AAMD,GAjBmC,EAkBpC,CAACf,KAAD,EAAQ7C,MAAR,CAlBoC,CAAtC;AAqBA,QAAMgE,UAAU,GAAG7F,WAAW,CAC5B,CAAC;AAAC8E,IAAAA,WAAD;AAAcP,IAAAA;AAAd,GAAD,KAA8B;AAC5B,QAAI,CAACO,WAAD,IAAgB,CAACP,SAArB,EAAgC;AAChC,UAAMrC,MAAM,GAAGqC,SAAS,CACrBE,GADY,CACR5C,MAAM,CAACoD,MADC,EAEZR,GAFY,CAEP5B,IAAD,IAAUhD,SAAS,CAACgD,IAAD,EAAO;AAACjB,MAAAA,cAAc,EAAE;AAAjB,KAAP,CAFX,CAAf;AAIA,UAAMsB,GAAG,GAAG5D,MAAM,CAACkC,QAAQ,CAAC2B,OAAV,CAAlB;AACAD,IAAAA,GAAG,CACA5D,MADH,CACU,QADV,EAEGkD,IAFH,CAGIkC,KAAK,CAACkB,IAHV,EAII1D,MAAM,CAACuC,GAAP,CAAY5B,IAAD,IAAUhB,MAAM,CAACjD,cAAc,CAACiE,IAAD,CAAf,CAA3B,CAJJ,EAMGL,IANH,CAMSF,CAAD,IAAOA,CAAC,CAAChD,MAAF,CAAS,UAAT,EAAqBiD,IAArB,CAA0B,QAA1B,EAAoC,SAApC,CANf;AAOD,GAf2B,EAgB5B,CAACmC,KAAD,EAAQ7C,MAAR,CAhB4B,CAA9B;AAmBA3B,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACwE,KAAL,EAAY;AACZA,IAAAA,KAAK,CAACoB,EAAN,CAAS,aAAT,EAAwBjB,OAAxB,EAAiCiB,EAAjC,CAAoC,KAApC,EAA2CD,UAA3C;AACA,UAAM3C,GAAG,GAAG5D,MAAM,CAACkC,QAAQ,CAAC2B,OAAV,CAAlB;AACAD,IAAAA,GAAG,CACA5D,MADH,CACU,QADV,EAEGkD,IAFH,CAEQkC,KAFR,EAGGlC,IAHH,CAGSF,CAAD,IACJA,CAAC,CACEhD,MADH,CACU,UADV,EAEGiD,IAFH,CAEQ,QAFR,EAEkB,SAFlB,EAGGwD,KAHH,CAGS;AAACC,MAAAA,IAAI,EAAE;AAAP,KAHT,EAIGF,EAJH,CAIM,sBAJN,EAI8BX,kBAJ9B,CAJJ;AAUD,GAdQ,EAcN,CAACT,KAAD,EAAQG,OAAR,EAAiBgB,UAAjB,EAA6BV,kBAA7B,CAdM,CAAT;AAgBAjF,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACwE,KAAL,EAAY;AACZ,UAAMxB,GAAG,GAAG5D,MAAM,CAACkC,QAAQ,CAAC2B,OAAV,CAAlB;AACAD,IAAAA,GAAG,CAAC5D,MAAJ,CAAW,QAAX,EAAqBkD,IAArB,CAA0BkC,KAAK,CAACkB,IAAhC,EAAsCpB,gBAAtC;AACD,GAJQ,EAIN,CAACE,KAAD,EAAQF,gBAAR,CAJM,CAAT;;AAMA,QAAMyB,WAAW,GAAIb,KAAD,IAAW;AAC7B,QAAIA,KAAK,CAACc,MAAV,EAAkB;AAChB7E,MAAAA,oBAAoB,CAClBtC,GAAG,CAAC,CACF4C,UADE,EAEFV,KAAK,CACH8B,IAAI,CAAChE,GAAL,CACE,CADF,EAEEgE,IAAI,CAACjE,GAAL,CACEmC,KAAK,CAACc,MAAN,GAAe,CADjB,EAEEd,KAAK,CAACkF,OAAN,CAAcjF,qBAAqB,CAAC,CAAD,CAAnC,IACE6B,IAAI,CAACqD,IAAL,CAAUhB,KAAK,CAACc,MAAhB,IAA0BpF,eAH9B,CAFF,CADG,CAFH,CAAD,CADe,CAApB;AAeD;AACF,GAlBD;;AAoBA,sBACE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA,2BACE;AACE,MAAA,SAAS,EAAEjC,UAAU,CAAC,8BAAD,CADvB;AAEE,MAAA,GAAG,EAAE4C,UAFP;AAGE,MAAA,OAAO,EAAEwE,WAHX;AAIE,MAAA,KAAK,EAAE;AAACI,QAAAA,cAAc,EAAG,GAAE9E,cAAc,GAAG,GAAI;AAAzC,OAJT;AAAA,6BAME;AAAK,QAAA,GAAG,EAAEC,QAAV;AAAoB,QAAA,mBAAmB,EAAC,eAAxC;AAAA,gCACE;AAAA,kCACE;AAAU,YAAA,EAAE,EAAC,UAAb;AAAA,mCACE;AACE,cAAA,CAAC,EAAE,CADL;AAEE,cAAA,CAAC,EAAG,GAAElB,MAAM,CAACC,GAAI,EAFnB;AAGE,cAAA,KAAK,EAAEM,KAHT;AAIE,cAAA,MAAM,EAAG,GAAEkC,IAAI,CAAChE,GAAL,CAAS,CAAT,EAAY2C,MAAM,GAAGpB,MAAM,CAACG,MAA5B,CAAoC;AAJjD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBADF,eASE;AAAM,YAAA,EAAE,EAAC,MAAT;AAAA,oCACE;AACE,cAAA,CAAC,EAAE,CADL;AAEE,cAAA,CAAC,EAAG,GAAEH,MAAM,CAACC,GAAI,EAFnB;AAGE,cAAA,KAAK,EAAEM,KAHT;AAIE,cAAA,MAAM,EAAG,GAAEkC,IAAI,CAAChE,GAAL,CAAS,CAAT,EAAY2C,MAAM,GAAGpB,MAAM,CAACG,MAA5B,CAAoC,EAJjD;AAKE,cAAA,IAAI,EAAC;AALP;AAAA;AAAA;AAAA;AAAA,oBADF,eAQE;AAAK,cAAA,IAAI,EAAC,YAAV;AAAuB,cAAA,IAAI,EAAC;AAA5B;AAAA;AAAA;AAAA;AAAA,oBARF;AAAA;AAAA;AAAA;AAAA;AAAA,kBATF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAsBE;AAAG,UAAA,SAAS,EAAC,OAAb;AAAqB,UAAA,QAAQ,EAAC,gBAA9B;AAAA,iCACE;AAAG,YAAA,IAAI,EAAC,YAAR;AAAA,oCACE;AAAM,cAAA,SAAS,EAAC;AAAhB;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE;AAAG,cAAA,SAAS,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,oBAFF,eAGE;AAAM,cAAA,SAAS,EAAC,WAAhB;AAA4B,cAAA,EAAE,EAAC;AAA/B;AAAA;AAAA;AAAA;AAAA,oBAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAtBF,eA6BE;AAAG,UAAA,SAAS,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,gBA7BF;AAAA;AAAA;AAAA;AAAA;AAAA;AANF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AA0CD;;GA1QQM,e;UAW+BV,U;;;KAX/BU,e;;AA4QT,MAAMuF,OAAO,GAAG,CAACC,SAAD,EAAYC,SAAZ,KAA0B;AACxC,MACE,CAAC1G,KAAK,CAAC0G,SAAS,CAACtF,qBAAX,EAAkCqF,SAAS,CAACrF,qBAA5C,CADR,EAEE;AACA,WAAO,KAAP;AACD,GAJD,MAIO,IACL,CAACpB,KAAK,CACJ0G,SAAS,CAACC,iBAAV,CAA4BC,SADxB,EAEJH,SAAS,CAACE,iBAAV,CAA4BC,SAFxB,CADD,EAKL;AACA,WAAO,KAAP;AACD,GAPM,MAOA,IACL,CAAC5G,KAAK,CACJ0G,SAAS,CAACC,iBAAV,CAA4BE,YADxB,EAEJJ,SAAS,CAACE,iBAAV,CAA4BE,YAFxB,CADD,EAKL;AACA,WAAO,KAAP;AACD,GAPM,MAOA,IAAI,CAAC7G,KAAK,CAAC0G,SAAS,CAACrF,OAAX,EAAoBoF,SAAS,CAACpF,OAA9B,CAAV,EAAkD;AACvD,WAAO,KAAP;AACD,GAFM,MAEA,IAAI,CAACrB,KAAK,CAAC0G,SAAS,CAACpF,QAAX,EAAqBmF,SAAS,CAACnF,QAA/B,CAAV,EAAoD;AACzD,WAAO,KAAP;AACD,GAFM,MAEA,IAAI,CAACtB,KAAK,CAAC0G,SAAS,CAACjF,cAAX,EAA2BgF,SAAS,CAAChF,cAArC,CAAV,EAAgE;AACrE,WAAO,KAAP;AACD,GAFM,MAEA,IAAI,CAACzB,KAAK,CAAC0G,SAAS,CAACvF,KAAX,EAAkBsF,SAAS,CAACtF,KAA5B,CAAV,EAA8C;AACnD,WAAO,KAAP;AACD;;AACD,SAAO,IAAP;AACD,CA7BD;;AA+BA,kCAAelB,IAAI,CAACgB,eAAD,EAAkBuF,OAAlB,CAAnB","sourcesContent":["import {\n  BRUSH_STATISTICS,\n  D3_TRANSITION_DURATION,\n  STATISTIC_CONFIGS,\n} from '../constants';\nimport {getStatistic, parseIndiaDate} from '../utils/commonFunctions';\n\nimport classnames from 'classnames';\nimport {min, max} from 'd3-array';\nimport {axisBottom} from 'd3-axis';\nimport {brushX, brushSelection} from 'd3-brush';\nimport {interpolatePath} from 'd3-interpolate-path';\nimport {scaleTime, scaleLinear} from 'd3-scale';\nimport {select, pointers} from 'd3-selection';\nimport {area, curveMonotoneX, stack} from 'd3-shape';\nimport 'd3-transition';\nimport {addDays, differenceInDays, formatISO} from 'date-fns';\nimport equal from 'fast-deep-equal';\nimport {memo, useCallback, useMemo, useEffect, useRef} from 'react';\nimport ReactDOM from 'react-dom';\nimport {useMeasure} from 'react-use';\n\n// Chart margins\nconst margin = {top: 0, right: 35, bottom: 20, left: 25};\nconst yBufferTop = 1.2;\nconst numTicksX = (width) => (width < 480 ? 4 : 6);\nconst brushWheelDelta = 10;\n\nfunction TimeseriesBrush({\n  timeseries,\n  dates,\n  currentBrushSelection,\n  endDate,\n  lookback,\n  setBrushSelectionEnd,\n  setLookback,\n  animationIndex,\n}) {\n  const chartRef = useRef();\n  const [wrapperRef, {width, height}] = useMeasure();\n\n  const endDateMin =\n    lookback !== null\n      ? min([\n          formatISO(addDays(parseIndiaDate(dates[0]), lookback), {\n            representation: 'date',\n          }),\n          endDate,\n        ])\n      : endDate;\n\n  const xScale = useMemo(() => {\n    const T = dates.length;\n\n    // Chart extremes\n    const chartRight = width - margin.right;\n\n    return scaleTime()\n      .clamp(true)\n      .domain([\n        parseIndiaDate(dates[0] || endDate),\n        parseIndiaDate(dates[T - 1] || endDate),\n      ])\n      .range([margin.left, chartRight]);\n  }, [width, endDate, dates]);\n\n  useEffect(() => {\n    if (!width || !height) return;\n\n    // Chart extremes\n    const chartBottom = height - margin.bottom;\n\n    const xAxis = (g) =>\n      g\n        .attr('class', 'x-axis')\n        .call(axisBottom(xScale).ticks(numTicksX(width)));\n\n    // Switched to daily confirmed instead of cumulative ARD\n    const timeseriesStacked = stack()\n      .keys(BRUSH_STATISTICS)\n      .value((date, statistic) =>\n        Math.max(0, getStatistic(timeseries[date], 'delta', statistic))\n      )(dates);\n\n    const yScale = scaleLinear()\n      .clamp(true)\n      .domain([\n        0,\n        max(\n          timeseriesStacked[timeseriesStacked.length - 1],\n          ([, y1]) => yBufferTop * y1\n        ),\n      ])\n      .range([chartBottom, margin.top]);\n\n    const svg = select(chartRef.current);\n\n    const t = svg.transition().duration(D3_TRANSITION_DURATION);\n\n    svg\n      .select('.x-axis')\n      .attr('pointer-events', 'none')\n      .style('transform', `translate3d(0, ${chartBottom}px, 0)`)\n      .transition(t)\n      .call(xAxis);\n\n    const areaPath = area()\n      .curve(curveMonotoneX)\n      .x((d) => xScale(parseIndiaDate(d.data)))\n      .y0((d) => yScale(d[0]))\n      .y1((d) => yScale(d[1]));\n\n    svg\n      .select('.trend-areas')\n      .selectAll('.trend-area')\n      .data(timeseriesStacked)\n      .join(\n        (enter) =>\n          enter\n            .append('path')\n            .attr('class', 'trend-area')\n            .attr('fill', ({key}) => STATISTIC_CONFIGS[key].color)\n            .attr('fill-opacity', 0.4)\n            .attr('stroke', ({key}) => STATISTIC_CONFIGS[key].color)\n            .attr('d', areaPath)\n            .attr('pointer-events', 'none'),\n        (update) =>\n          update\n            .transition(t)\n            .attrTween('d', function (date) {\n              const previous = select(this).attr('d');\n              const current = areaPath(date);\n              return interpolatePath(previous, current);\n            })\n            .selection()\n      );\n  }, [dates, width, height, xScale, timeseries]);\n\n  const defaultSelection = currentBrushSelection.map((date) =>\n    xScale(parseIndiaDate(date))\n  );\n\n  const brush = useMemo(() => {\n    if (!width || !height) return;\n    // Chart extremes\n    const chartRight = width - margin.right;\n    const chartBottom = height - margin.bottom;\n\n    const brush = brushX()\n      .extent([\n        [margin.left, margin.top],\n        [chartRight, chartBottom],\n      ])\n      .handleSize(20);\n    return brush;\n  }, [width, height]);\n\n  const brushed = useCallback(\n    ({sourceEvent, selection}) => {\n      if (!sourceEvent) return;\n      const [brushStartDate, brushEndDate] = selection.map(xScale.invert);\n\n      ReactDOM.unstable_batchedUpdates(() => {\n        setBrushSelectionEnd(formatISO(brushEndDate, {representation: 'date'}));\n        setLookback(differenceInDays(brushEndDate, brushStartDate));\n      });\n    },\n    [xScale, setBrushSelectionEnd, setLookback]\n  );\n\n  const beforebrushstarted = useCallback(\n    (event) => {\n      const svg = select(chartRef.current);\n      const selection = brushSelection(svg.select('.brush').node());\n\n      if (!selection) return;\n\n      const dx = selection[1] - selection[0];\n      const [[cx]] = pointers(event);\n      const [x0, x1] = [cx - dx / 2, cx + dx / 2];\n      const [X0, X1] = xScale.range();\n      svg\n        .select('.brush')\n        .call(\n          brush.move,\n          x1 > X1 ? [X1 - dx, X1] : x0 < X0 ? [X0, X0 + dx] : [x0, x1]\n        );\n    },\n    [brush, xScale]\n  );\n\n  const brushended = useCallback(\n    ({sourceEvent, selection}) => {\n      if (!sourceEvent || !selection) return;\n      const domain = selection\n        .map(xScale.invert)\n        .map((date) => formatISO(date, {representation: 'date'}));\n\n      const svg = select(chartRef.current);\n      svg\n        .select('.brush')\n        .call(\n          brush.move,\n          domain.map((date) => xScale(parseIndiaDate(date)))\n        )\n        .call((g) => g.select('.overlay').attr('cursor', 'pointer'));\n    },\n    [brush, xScale]\n  );\n\n  useEffect(() => {\n    if (!brush) return;\n    brush.on('start brush', brushed).on('end', brushended);\n    const svg = select(chartRef.current);\n    svg\n      .select('.brush')\n      .call(brush)\n      .call((g) =>\n        g\n          .select('.overlay')\n          .attr('cursor', 'pointer')\n          .datum({type: 'selection'})\n          .on('mousedown touchstart', beforebrushstarted)\n      );\n  }, [brush, brushed, brushended, beforebrushstarted]);\n\n  useEffect(() => {\n    if (!brush) return;\n    const svg = select(chartRef.current);\n    svg.select('.brush').call(brush.move, defaultSelection);\n  }, [brush, defaultSelection]);\n\n  const handleWheel = (event) => {\n    if (event.deltaX) {\n      setBrushSelectionEnd(\n        max([\n          endDateMin,\n          dates[\n            Math.max(\n              0,\n              Math.min(\n                dates.length - 1,\n                dates.indexOf(currentBrushSelection[1]) +\n                  Math.sign(event.deltaX) * brushWheelDelta\n              )\n            )\n          ],\n        ])\n      );\n    }\n  };\n\n  return (\n    <div className=\"Timeseries\">\n      <div\n        className={classnames('svg-parent is-brush fadeInUp')}\n        ref={wrapperRef}\n        onWheel={handleWheel}\n        style={{animationDelay: `${animationIndex * 250}ms`}}\n      >\n        <svg ref={chartRef} preserveAspectRatio=\"xMidYMid meet\">\n          <defs>\n            <clipPath id=\"clipPath\">\n              <rect\n                x={0}\n                y={`${margin.top}`}\n                width={width}\n                height={`${Math.max(0, height - margin.bottom)}`}\n              />\n            </clipPath>\n            <mask id=\"mask\">\n              <rect\n                x={0}\n                y={`${margin.top}`}\n                width={width}\n                height={`${Math.max(0, height - margin.bottom)}`}\n                fill=\"hsl(0, 0%, 40%)\"\n              />\n              <use href=\"#selection\" fill=\"white\" />\n            </mask>\n          </defs>\n\n          <g className=\"brush\" clipPath=\"url(#clipPath)\">\n            <g mask=\"url(#mask)\">\n              <rect className=\"overlay\" />\n              <g className=\"trend-areas\" />\n              <rect className=\"selection\" id=\"selection\" />\n            </g>\n          </g>\n          <g className=\"x-axis\" />\n        </svg>\n      </div>\n    </div>\n  );\n}\n\nconst isEqual = (prevProps, currProps) => {\n  if (\n    !equal(currProps.currentBrushSelection, prevProps.currentBrushSelection)\n  ) {\n    return false;\n  } else if (\n    !equal(\n      currProps.regionHighlighted.stateCode,\n      prevProps.regionHighlighted.stateCode\n    )\n  ) {\n    return false;\n  } else if (\n    !equal(\n      currProps.regionHighlighted.districtName,\n      prevProps.regionHighlighted.districtName\n    )\n  ) {\n    return false;\n  } else if (!equal(currProps.endDate, prevProps.endDate)) {\n    return false;\n  } else if (!equal(currProps.lookback, prevProps.lookback)) {\n    return false;\n  } else if (!equal(currProps.animationIndex, prevProps.animationIndex)) {\n    return false;\n  } else if (!equal(currProps.dates, prevProps.dates)) {\n    return false;\n  }\n  return true;\n};\n\nexport default memo(TimeseriesBrush, isEqual);\n"]},"metadata":{},"sourceType":"module"}