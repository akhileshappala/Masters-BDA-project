/*!
  Modus React Bootstrap 
  A React-based component library developed as a common, open source platform for all of Trimbleâ€™s web applications built on React.
  Extends React-Bootstrap v1.6.5
  Copyright (c) 2022 Trimble Inc.
 */

import React, { useCallback, useContext, useEffect, useRef } from 'react';
import merge from 'lodash/merge';
import classNames from 'classnames';
import { DataTableDragDropContext } from './DataTableDragdropProvider';
import { DataTableHeaderContextMenu } from './DataTableContextMenuProvider';
import { DATATABLE_CHECKBOX_SELECTOR_ID, getFlexColumnStyles } from './DataTableHelpers';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
import { Fragment as _Fragment } from "react/jsx-runtime";
const modusSortArrows = {
  asc: {
    icon: 'sort_alpha_up',
    title: 'Sort Descending'
  },
  desc: {
    icon: 'sort_alpha_down',
    title: 'Sort Ascending'
  }
};
const SortIcon = ({
  sort,
  title,
  className
}) => /*#__PURE__*/_jsx("i", {
  className: classNames('modus-icons material-icons', className),
  "data-toggle": "tooltip",
  "data-placement": "top",
  title: title || modusSortArrows[sort].title,
  children: modusSortArrows[sort].icon
});
const DataTableHeaderCell = /*#__PURE__*/React.forwardRef(({
  header,
  onToggleHideColumn,
  className,
  ...props
}, ref) => {
  const defaultRef = useRef(null);
  const resolvedRef = ref || defaultRef;
  const dragDropContext = useContext(DataTableDragDropContext);
  const contextMenu = useContext(DataTableHeaderContextMenu);
  const {
    onHeaderDragStart,
    registerColumn
  } = dragDropContext || {};
  const {
    onHeaderContextMenu
  } = contextMenu || {};
  const allowDrag = header.allowDrag && header.id !== DATATABLE_CHECKBOX_SELECTOR_ID;
  useEffect(() => {
    if (registerColumn && header.id && resolvedRef.current) {
      registerColumn(header.id, resolvedRef.current);
    }
  }, [header.id, registerColumn, resolvedRef]);

  // handle right-click
  const handleContextMenuClick = useCallback(event => {
    event.preventDefault();
    if (onHeaderContextMenu) onHeaderContextMenu(event, header.id);
  }, [onHeaderContextMenu, header.id]);
  const handleShowHiddenColumn = useCallback(() => {
    onToggleHideColumn(header.id, false);
  }, [onToggleHideColumn, header.id]);
  const handleMouseDown = useCallback(event => {
    if (onHeaderDragStart && allowDrag) onHeaderDragStart(event, header);
  }, [onHeaderDragStart, allowDrag, header]);
  if (!header.isVisible) {
    return /*#__PURE__*/_jsx("th", {
      className: "hidden-column",
      children: /*#__PURE__*/_jsxs("div", {
        className: "d-flex flex-row align-items-center justify-content-center",
        onClick: handleShowHiddenColumn,
        role: "group",
        "aria-label": "Show hidden columns",
        children: [/*#__PURE__*/_jsx("i", {
          className: "modus-icons triangle_left",
          role: "button",
          children: "triangle_left"
        }), /*#__PURE__*/_jsx("i", {
          className: "modus-icons triangle_right",
          role: "button",
          children: "triangle_right"
        })]
      })
    });
  }
  const headerLabel = header.render('Header');
  const headerProps = merge(header.getHeaderProps(header.getSortByToggleProps && header.getSortByToggleProps()), {
    style: getFlexColumnStyles(header),
    title: ''
  });
  return /*#__PURE__*/_jsxs("th", {
    className: classNames(header.id === DATATABLE_CHECKBOX_SELECTOR_ID ? 'icon-only checkbox-selector-cell' : 'pr-2', allowDrag && 'draggable', header.isResizing && 'resizing', className),
    ref: resolvedRef,
    onContextMenu: handleContextMenuClick,
    ...headerProps,
    ...props,
    children: [/*#__PURE__*/_jsxs("div", {
      className: "d-flex w-100 h-100 align-items-center th-content",
      onMouseDown: handleMouseDown,
      role: "columnheader",
      tabIndex: 0,
      children: [/*#__PURE__*/_jsx("div", {
        className: "flex-grow-1 overflow-hidden",
        style: {
          whiteSpace: 'nowrap',
          textOverflow: 'ellipsis'
        },
        "data-toggle": "tooltip",
        "data-placement": "top",
        title: headerLabel,
        children: headerLabel
      }), /*#__PURE__*/_jsx("div", {
        children: header.canSort && /*#__PURE__*/_jsx(_Fragment, {
          children: header.isSorted ? /*#__PURE__*/_jsx(SortIcon, {
            className: "sorted",
            sort: header.isSortedDesc ? 'desc' : 'asc'
          }) : /*#__PURE__*/_jsx(SortIcon, {
            className: "unsorted",
            title: "Sort Ascending",
            sort: "asc"
          })
        })
      })]
    }), header.getResizerProps && /*#__PURE__*/_jsx("div", {
      ...header.getResizerProps(),
      className: "table-col-resizable"
    })]
  });
});
DataTableHeaderCell.displayName = 'DataTableHeaderCell';
export default DataTableHeaderCell;