{"ast":null,"code":"var _jsxFileName = \"/Users/ssakhilesha/Documents/GitHub/Masters-BDA-project/website/covid19/src/components/Minigraphs.js\",\n    _s = $RefreshSig$();\n\nimport { MINIGRAPH_LOOKBACK_DAYS, LEVEL_STATISTICS, STATISTIC_CONFIGS } from '../constants';\nimport { getStatistic, getIndiaDateYesterdayISO, parseIndiaDate } from '../utils/commonFunctions';\nimport classnames from 'classnames';\nimport { max } from 'd3-array';\nimport { interpolatePath } from 'd3-interpolate-path';\nimport { scaleTime, scaleLinear } from 'd3-scale';\nimport { select } from 'd3-selection';\nimport { line, curveMonotoneX } from 'd3-shape';\nimport 'd3-transition';\nimport { formatISO, subDays } from 'date-fns';\nimport equal from 'fast-deep-equal';\nimport { memo, useCallback, useEffect, useRef, useMemo } from 'react';\nimport { useMeasure } from 'react-use'; // Dimensions\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst margin = {\n  top: 10,\n  right: 10,\n  bottom: 2,\n  left: 10\n};\nconst height = 75;\nconst maxWidth = 120;\n\nfunction Minigraphs({\n  timeseries,\n  date: timelineDate\n}) {\n  _s();\n\n  const refs = useRef([]);\n  const endDate = timelineDate || getIndiaDateYesterdayISO();\n  let [wrapperRef, {\n    width\n  }] = useMeasure();\n  width = Math.min(width, maxWidth);\n  const dates = useMemo(() => {\n    const pastDates = Object.keys(timeseries || {}).filter(date => date <= endDate);\n    const lastDate = pastDates[pastDates.length - 1];\n    const cutOffDateLower = formatISO(subDays(parseIndiaDate(lastDate), MINIGRAPH_LOOKBACK_DAYS), {\n      representation: 'date'\n    });\n    return pastDates.filter(date => date >= cutOffDateLower);\n  }, [endDate, timeseries]);\n  const getMinigraphStatistic = useCallback((date, statistic) => {\n    return getStatistic(timeseries === null || timeseries === void 0 ? void 0 : timeseries[date], 'delta', statistic);\n  }, [timeseries]);\n  useEffect(() => {\n    if (!width) return;\n    const T = dates.length;\n    const chartRight = width - margin.right;\n    const chartBottom = height - margin.bottom;\n    const xScale = scaleTime().clamp(true).domain([parseIndiaDate(dates[0] || endDate), parseIndiaDate(dates[T - 1]) || endDate]).range([margin.left, chartRight]);\n    refs.current.forEach((ref, index) => {\n      const svg = select(ref);\n      const statistic = LEVEL_STATISTICS[index];\n      const color = STATISTIC_CONFIGS[statistic].color;\n      const dailyMaxAbs = max(dates, date => Math.abs(getMinigraphStatistic(date, statistic)));\n      const yScale = scaleLinear().clamp(true).domain([-dailyMaxAbs, dailyMaxAbs]).range([chartBottom, margin.top]);\n      const linePath = line().curve(curveMonotoneX).x(date => xScale(parseIndiaDate(date))).y(date => yScale(getMinigraphStatistic(date, statistic)));\n      let pathLength;\n      svg.selectAll('path').data(T ? [dates] : []).join(enter => enter.append('path').attr('fill', 'none').attr('stroke', color + '99').attr('stroke-width', 2.5).attr('d', linePath).attr('stroke-dasharray', function () {\n        return pathLength = this.getTotalLength();\n      }).call(enter => enter.attr('stroke-dashoffset', pathLength).transition().delay(100).duration(2500).attr('stroke-dashoffset', 0)), update => update.attr('stroke-dasharray', null).transition().duration(500).attrTween('d', function (date) {\n        const previous = select(this).attr('d');\n        const current = linePath(date);\n        return interpolatePath(previous, current);\n      }).selection());\n      svg.selectAll('circle').data(T ? [dates[T - 1]] : []).join(enter => enter.append('circle').attr('fill', color).attr('r', 2.5).attr('cx', date => xScale(parseIndiaDate(date))).attr('cy', date => yScale(getMinigraphStatistic(date, statistic))).style('opacity', 0).call(enter => enter.transition().delay(2100).duration(500).style('opacity', 1).attr('cx', date => xScale(parseIndiaDate(date))).attr('cy', date => yScale(getMinigraphStatistic(date, statistic)))), update => update.transition().duration(500).attr('cx', date => xScale(parseIndiaDate(date))).attr('cy', date => yScale(getMinigraphStatistic(date, statistic))).style('opacity', 1).selection());\n    });\n  }, [endDate, dates, width, getMinigraphStatistic]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Minigraph\",\n    children: LEVEL_STATISTICS.map((statistic, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classnames('svg-parent'),\n      ref: index === 0 ? wrapperRef : null,\n      style: {\n        width: `calc(${100 / LEVEL_STATISTICS.length}%)`\n      },\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        ref: el => {\n          refs.current[index] = el;\n        },\n        preserveAspectRatio: \"xMidYMid meet\",\n        width: width,\n        height: height\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 11\n      }, this)\n    }, statistic, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Minigraphs, \"0bXzwquCTHUGJBJyEU54Lg9IHnQ=\", false, function () {\n  return [useMeasure];\n});\n\n_c = Minigraphs;\n\nconst isEqual = (prevProps, currProps) => {\n  if (currProps.forceRender) {\n    return false;\n  } else if (!currProps.timeseries && prevProps.timeseries) {\n    return true;\n  } else if (currProps.timeseries && !prevProps.timeseries) {\n    return false;\n  } else if (!equal(currProps.stateCode, prevProps.stateCode)) {\n    return false;\n  } else if (!equal(currProps.date, prevProps.date)) {\n    return false;\n  }\n\n  return true;\n};\n\nexport default _c2 = /*#__PURE__*/memo(Minigraphs, isEqual);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Minigraphs\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/ssakhilesha/Documents/GitHub/Masters-BDA-project/website/covid19/src/components/Minigraphs.js"],"names":["MINIGRAPH_LOOKBACK_DAYS","LEVEL_STATISTICS","STATISTIC_CONFIGS","getStatistic","getIndiaDateYesterdayISO","parseIndiaDate","classnames","max","interpolatePath","scaleTime","scaleLinear","select","line","curveMonotoneX","formatISO","subDays","equal","memo","useCallback","useEffect","useRef","useMemo","useMeasure","margin","top","right","bottom","left","height","maxWidth","Minigraphs","timeseries","date","timelineDate","refs","endDate","wrapperRef","width","Math","min","dates","pastDates","Object","keys","filter","lastDate","length","cutOffDateLower","representation","getMinigraphStatistic","statistic","T","chartRight","chartBottom","xScale","clamp","domain","range","current","forEach","ref","index","svg","color","dailyMaxAbs","abs","yScale","linePath","curve","x","y","pathLength","selectAll","data","join","enter","append","attr","getTotalLength","call","transition","delay","duration","update","attrTween","previous","selection","style","map","el","isEqual","prevProps","currProps","forceRender","stateCode"],"mappings":"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","sourcesContent":["import {\n  MINIGRAPH_LOOKBACK_DAYS,\n  LEVEL_STATISTICS,\n  STATISTIC_CONFIGS,\n} from '../constants';\nimport {\n  getStatistic,\n  getIndiaDateYesterdayISO,\n  parseIndiaDate,\n} from '../utils/commonFunctions';\n\nimport classnames from 'classnames';\nimport {max} from 'd3-array';\nimport {interpolatePath} from 'd3-interpolate-path';\nimport {scaleTime, scaleLinear} from 'd3-scale';\nimport {select} from 'd3-selection';\nimport {line, curveMonotoneX} from 'd3-shape';\nimport 'd3-transition';\nimport {formatISO, subDays} from 'date-fns';\nimport equal from 'fast-deep-equal';\nimport {memo, useCallback, useEffect, useRef, useMemo} from 'react';\nimport {useMeasure} from 'react-use';\n\n// Dimensions\nconst margin = {top: 10, right: 10, bottom: 2, left: 10};\nconst height = 75;\nconst maxWidth = 120;\n\nfunction Minigraphs({timeseries, date: timelineDate}) {\n  const refs = useRef([]);\n  const endDate = timelineDate || getIndiaDateYesterdayISO();\n\n  let [wrapperRef, {width}] = useMeasure();\n  width = Math.min(width, maxWidth);\n\n  const dates = useMemo(() => {\n    const pastDates = Object.keys(timeseries || {}).filter(\n      (date) => date <= endDate\n    );\n    const lastDate = pastDates[pastDates.length - 1];\n\n    const cutOffDateLower = formatISO(\n      subDays(parseIndiaDate(lastDate), MINIGRAPH_LOOKBACK_DAYS),\n      {representation: 'date'}\n    );\n    return pastDates.filter((date) => date >= cutOffDateLower);\n  }, [endDate, timeseries]);\n\n  const getMinigraphStatistic = useCallback(\n    (date, statistic) => {\n      return getStatistic(timeseries?.[date], 'delta', statistic);\n    },\n    [timeseries]\n  );\n\n  useEffect(() => {\n    if (!width) return;\n\n    const T = dates.length;\n\n    const chartRight = width - margin.right;\n    const chartBottom = height - margin.bottom;\n\n    const xScale = scaleTime()\n      .clamp(true)\n      .domain([\n        parseIndiaDate(dates[0] || endDate),\n        parseIndiaDate(dates[T - 1]) || endDate,\n      ])\n      .range([margin.left, chartRight]);\n\n    refs.current.forEach((ref, index) => {\n      const svg = select(ref);\n      const statistic = LEVEL_STATISTICS[index];\n      const color = STATISTIC_CONFIGS[statistic].color;\n\n      const dailyMaxAbs = max(dates, (date) =>\n        Math.abs(getMinigraphStatistic(date, statistic))\n      );\n\n      const yScale = scaleLinear()\n        .clamp(true)\n        .domain([-dailyMaxAbs, dailyMaxAbs])\n        .range([chartBottom, margin.top]);\n\n      const linePath = line()\n        .curve(curveMonotoneX)\n        .x((date) => xScale(parseIndiaDate(date)))\n        .y((date) => yScale(getMinigraphStatistic(date, statistic)));\n\n      let pathLength;\n      svg\n        .selectAll('path')\n        .data(T ? [dates] : [])\n        .join(\n          (enter) =>\n            enter\n              .append('path')\n              .attr('fill', 'none')\n              .attr('stroke', color + '99')\n              .attr('stroke-width', 2.5)\n              .attr('d', linePath)\n              .attr('stroke-dasharray', function () {\n                return (pathLength = this.getTotalLength());\n              })\n              .call((enter) =>\n                enter\n                  .attr('stroke-dashoffset', pathLength)\n                  .transition()\n                  .delay(100)\n                  .duration(2500)\n                  .attr('stroke-dashoffset', 0)\n              ),\n          (update) =>\n            update\n              .attr('stroke-dasharray', null)\n              .transition()\n              .duration(500)\n              .attrTween('d', function (date) {\n                const previous = select(this).attr('d');\n                const current = linePath(date);\n                return interpolatePath(previous, current);\n              })\n              .selection()\n        );\n\n      svg\n        .selectAll('circle')\n        .data(T ? [dates[T - 1]] : [])\n        .join(\n          (enter) =>\n            enter\n              .append('circle')\n              .attr('fill', color)\n              .attr('r', 2.5)\n              .attr('cx', (date) => xScale(parseIndiaDate(date)))\n              .attr('cy', (date) =>\n                yScale(getMinigraphStatistic(date, statistic))\n              )\n              .style('opacity', 0)\n              .call((enter) =>\n                enter\n                  .transition()\n                  .delay(2100)\n                  .duration(500)\n                  .style('opacity', 1)\n                  .attr('cx', (date) => xScale(parseIndiaDate(date)))\n                  .attr('cy', (date) =>\n                    yScale(getMinigraphStatistic(date, statistic))\n                  )\n              ),\n          (update) =>\n            update\n              .transition()\n              .duration(500)\n              .attr('cx', (date) => xScale(parseIndiaDate(date)))\n              .attr('cy', (date) =>\n                yScale(getMinigraphStatistic(date, statistic))\n              )\n              .style('opacity', 1)\n              .selection()\n        );\n    });\n  }, [endDate, dates, width, getMinigraphStatistic]);\n\n  return (\n    <div className=\"Minigraph\">\n      {LEVEL_STATISTICS.map((statistic, index) => (\n        <div\n          key={statistic}\n          className={classnames('svg-parent')}\n          ref={index === 0 ? wrapperRef : null}\n          style={{width: `calc(${100 / LEVEL_STATISTICS.length}%)`}}\n        >\n          <svg\n            ref={(el) => {\n              refs.current[index] = el;\n            }}\n            preserveAspectRatio=\"xMidYMid meet\"\n            width={width}\n            height={height}\n          />\n        </div>\n      ))}\n    </div>\n  );\n}\n\nconst isEqual = (prevProps, currProps) => {\n  if (currProps.forceRender) {\n    return false;\n  } else if (!currProps.timeseries && prevProps.timeseries) {\n    return true;\n  } else if (currProps.timeseries && !prevProps.timeseries) {\n    return false;\n  } else if (!equal(currProps.stateCode, prevProps.stateCode)) {\n    return false;\n  } else if (!equal(currProps.date, prevProps.date)) {\n    return false;\n  }\n  return true;\n};\n\nexport default memo(Minigraphs, isEqual);\n"]},"metadata":{},"sourceType":"module"}